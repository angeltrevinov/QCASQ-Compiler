
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BIGGEREQUALSTHAN BIGGERTHAN CLASS CLOSEBRACKET CLOSECURLY CLOSEPAREN COMMA CONSTRUCTOR CTEFLOAT CTEINT CTESTRING DIFFERENTTHAN DIV ELSE EQUALS FLOAT FUNC ID IF INPUT INT MAIN OPENBRACKET OPENCURLY OPENPAREN OR OUTPUT PROGRAM RETURN SAMEAS SEMICOLON SMALLEQUALSTHAN SMALLTHAN STRING SUBTRACT SUM TIMES TWODOTS VAR\n        program : PROGRAM ID SEMICOLON altprogram\n        \n        altprogram : class altprogram\n                   | var altprogram\n                   | function altprogram\n                   | main\n        \n        main : MAIN OPENPAREN CLOSEPAREN OPENCURLY altmain\n        \n        altmain : estatuto altmain\n                | CLOSECURLY\n        \n        class : CLASS ID altclass OPENCURLY alt2class\n        \n        altclass : TWODOTS ID\n                 | empty\n        \n        alt2class : var alt2class\n                  | function alt2class\n                  | constructor CLOSECURLY SEMICOLON\n        \n        constructor : CONSTRUCTOR OPENPAREN altconst CLOSEPAREN OPENCURLY alt2const\n        \n        altconst : params altconst\n                 | empty\n        \n        alt2const : estatuto alt2const\n                 | CLOSECURLY\n        \n        var : VAR listids TWODOTS type SEMICOLON\n        \n        listids : ID listidsalty\n        \n        listidsalty : COMMA listids\n                    | OPENBRACKET INT CLOSEBRACKET listidsaltz\n                    | empty\n        \n        listidsaltz : COMMA listids\n                    | OPENBRACKET INT CLOSEBRACKET listidsaltp\n                    | empty\n        \n        listidsaltp : COMMA listids\n                    | empty\n        \n        function : FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func OPENCURLY alt3func\n        \n        altfunc : params\n                | empty\n        \n        alt2func : TWODOTS type\n                 | empty\n        \n        alt3func : var alt3func\n                 | estatuto alt3func\n                 | CLOSECURLY\n        \n        params : ID TWODOTS type altparams\n        \n        altparams : COMMA ID TWODOTS type altparams\n                | empty\n        \n        callfunc : ID OPENPAREN altcall\n        \n        altcall : varcte alt2call \n                | CLOSEPAREN\n        \n        alt2call : COMMA varcte alt2call\n                 | CLOSEPAREN\n        \n        type : INT\n             | FLOAT\n             | STRING\n             | ID\n        \n        estatuto : assign\n                | condition\n                | write\n                | read\n        \n        varcte : ID\n              | CTEFLOAT\n             | CTESTRING\n             | CTEINT\n        \n        expresion : exp altexpresion exp\n        \n        altexpresion : SAMEAS\n                    | BIGGERTHAN\n                    | BIGGEREQUALSTHAN\n                    | SMALLTHAN\n                    | SMALLEQUALSTHAN\n                    | DIFFERENTTHAN\n                    | AND\n                    | OR\n        \n        exp : termino \n            | termino altexp\n        \n        altexp  : SUM termino altexp\n                | SUBTRACT termino altexp\n                | empty\n        \n        termino : factor \n                | factor alttermino\n        \n        alttermino : TIMES factor alttermino\n                    | DIV factor alttermino\n                    | empty\n        \n        read : INPUT OPENPAREN ID CLOSEPAREN SEMICOLON\n        \n        write : OUTPUT OPENPAREN varcte altwrite\n                | OUTPUT OPENPAREN expresion altwrite\n        \n        altwrite : COMMA varcte altwrite\n                | COMMA expresion altwrite\n                | CLOSEPAREN SEMICOLON\n        \n        factor : OPENPAREN expresion CLOSEPAREN  \n                | SUM varcte\n                | SUBTRACT varcte\n                | varcte\n        \n        condition : IF OPENPAREN expresion CLOSEPAREN OPENCURLY altcondition\n                    | IF OPENPAREN expresion CLOSEPAREN  OPENCURLY  altcondition ELSE OPENCURLY altcondition\n        \n        altcondition : estatuto altcondition\n                    | CLOSECURLY\n        \n        assign : ID EQUALS expresion SEMICOLON \n                | ID EQUALS expresion altassign\n        \n        altassign : callfunc altassign\n                    | exp altassign \n                    | exp varcte altassign\n                    | SEMICOLON\n        \n        empty :\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,9,14,15,16,55,57,78,],[0,-1,-5,-2,-3,-4,-6,-8,-7,]),'ID':([2,10,11,12,23,25,27,30,35,36,37,38,45,51,53,56,58,59,60,61,69,72,74,76,79,80,81,82,85,89,90,91,92,94,95,97,98,99,100,101,102,103,104,105,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,144,145,147,149,151,153,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,174,177,178,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,197,199,200,201,],[3,17,19,20,33,38,19,41,-46,-47,-48,-49,62,-20,38,62,-50,-51,-52,-53,41,19,-97,38,94,94,94,109,41,-38,113,-40,62,-54,118,-67,-72,94,94,-86,94,-55,-56,-57,62,62,-54,-91,-92,118,161,94,-59,-60,-61,-62,-63,-64,-65,-66,-68,94,94,-71,-73,94,94,-76,-84,-85,-78,94,-79,62,19,38,94,-93,-96,-94,118,-54,-58,-97,-97,-97,-97,-83,62,-82,-77,62,-97,-41,-43,-95,-69,-70,-74,-75,-87,62,-90,-80,-81,-39,-42,94,-45,-89,62,-44,-88,]),'SEMICOLON':([3,34,35,36,37,38,68,94,95,97,98,101,103,104,105,118,121,122,132,135,136,139,141,142,146,148,160,161,162,163,164,165,166,167,178,180,182,183,184,185,193,195,200,],[4,51,-46,-47,-48,-49,83,-54,119,-67,-72,-86,-55,-56,-57,-54,158,158,-68,-71,-73,-76,-84,-85,171,172,158,-54,-58,-97,-97,-97,-97,-83,-41,-43,-69,-70,-74,-75,-42,-45,-44,]),'CLASS':([4,6,7,8,46,51,66,67,83,114,117,154,155,],[10,10,10,10,-9,-20,-12,-13,-14,-30,-37,-35,-36,]),'VAR':([4,6,7,8,32,46,47,48,51,58,59,60,61,66,67,83,92,114,115,116,117,119,120,144,147,154,155,157,158,159,171,172,181,186,188,189,190,197,201,],[11,11,11,11,11,-9,11,11,-20,-50,-51,-52,-53,-12,-13,-14,11,-30,11,11,-37,-91,-92,-78,-79,-35,-36,-93,-96,-94,-82,-77,-95,-87,-90,-80,-81,-89,-88,]),'FUNC':([4,6,7,8,32,46,47,48,51,66,67,83,114,117,154,155,],[12,12,12,12,12,-9,12,12,-20,-12,-13,-14,-30,-37,-35,-36,]),'MAIN':([4,6,7,8,46,51,66,67,83,114,117,154,155,],[13,13,13,13,-9,-20,-12,-13,-14,-30,-37,-35,-36,]),'OPENPAREN':([13,20,50,63,64,65,79,80,81,94,95,97,98,99,101,103,104,105,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,160,161,162,163,164,165,166,167,178,180,182,183,184,185,193,195,200,],[21,30,69,80,81,82,99,99,99,-54,99,-67,-72,99,-86,-55,-56,-57,156,99,99,99,-59,-60,-61,-62,-63,-64,-65,-66,-68,99,99,-71,-73,99,99,-76,-84,-85,99,99,156,-58,-97,-97,-97,-97,-83,-41,-43,-69,-70,-74,-75,-42,-45,-44,]),'TWODOTS':([17,18,19,26,29,39,41,52,54,71,73,88,112,113,150,152,176,],[23,25,-97,-21,-24,-22,53,-97,76,-23,-27,-25,-97,153,-26,-29,-28,]),'OPENCURLY':([17,22,24,31,33,35,36,37,38,54,75,77,93,110,143,196,],[-97,32,-11,45,-10,-46,-47,-48,-49,-97,92,-34,-33,149,168,199,]),'COMMA':([19,35,36,37,38,52,74,94,97,98,101,103,104,105,107,108,112,132,135,136,139,141,142,162,163,164,165,166,167,169,170,177,179,182,183,184,185,198,],[27,-46,-47,-48,-49,72,90,-54,-67,-72,-86,-55,-56,-57,145,145,151,-68,-71,-73,-76,-84,-85,-58,-97,-97,-97,-97,-83,145,145,90,194,-69,-70,-74,-75,194,]),'OPENBRACKET':([19,52,],[28,70,]),'CLOSEPAREN':([21,30,35,36,37,38,42,43,44,69,74,84,85,86,89,91,94,97,98,101,103,104,105,106,107,108,109,111,132,135,136,139,140,141,142,156,162,163,164,165,166,167,169,170,177,179,182,183,184,185,192,198,],[31,-97,-46,-47,-48,-49,54,-31,-32,-97,-97,110,-97,-17,-38,-40,-54,-67,-72,-86,-55,-56,-57,143,146,146,148,-16,-68,-71,-73,-76,167,-84,-85,180,-58,-97,-97,-97,-97,-83,146,146,-97,195,-69,-70,-74,-75,-39,195,]),'INT':([25,28,53,70,76,153,],[35,40,35,87,35,35,]),'FLOAT':([25,53,76,153,],[36,36,36,36,]),'STRING':([25,53,76,153,],[37,37,37,37,]),'CONSTRUCTOR':([32,47,48,51,114,117,154,155,],[50,50,50,-20,-30,-37,-35,-36,]),'CLOSEBRACKET':([40,87,],[52,112,]),'CLOSECURLY':([45,49,51,56,58,59,60,61,92,115,116,119,120,144,147,149,157,158,159,168,171,172,173,174,175,181,186,187,188,189,190,191,197,199,201,],[57,68,-20,57,-50,-51,-52,-53,117,117,117,-91,-92,-78,-79,175,-93,-96,-94,188,-82,-77,-15,175,-19,-95,-87,188,-90,-80,-81,-18,-89,188,-88,]),'IF':([45,51,56,58,59,60,61,92,115,116,119,120,144,147,149,157,158,159,168,171,172,174,181,186,187,188,189,190,197,199,201,],[63,-20,63,-50,-51,-52,-53,63,63,63,-91,-92,-78,-79,63,-93,-96,-94,63,-82,-77,63,-95,-87,63,-90,-80,-81,-89,63,-88,]),'OUTPUT':([45,51,56,58,59,60,61,92,115,116,119,120,144,147,149,157,158,159,168,171,172,174,181,186,187,188,189,190,197,199,201,],[64,-20,64,-50,-51,-52,-53,64,64,64,-91,-92,-78,-79,64,-93,-96,-94,64,-82,-77,64,-95,-87,64,-90,-80,-81,-89,64,-88,]),'INPUT':([45,51,56,58,59,60,61,92,115,116,119,120,144,147,149,157,158,159,168,171,172,174,181,186,187,188,189,190,197,199,201,],[65,-20,65,-50,-51,-52,-53,65,65,65,-91,-92,-78,-79,65,-93,-96,-94,65,-82,-77,65,-95,-87,65,-90,-80,-81,-89,65,-88,]),'EQUALS':([62,],[79,]),'SUM':([79,80,81,94,95,97,98,99,101,103,104,105,107,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,160,161,162,163,164,165,166,167,169,178,180,182,183,184,185,193,195,200,],[100,100,100,-54,100,133,-72,100,-86,-55,-56,-57,-86,-54,100,100,100,-59,-60,-61,-62,-63,-64,-65,-66,-68,100,100,-71,-73,100,100,-76,-84,-85,100,100,-54,-58,133,133,-97,-97,-83,-86,-41,-43,-69,-70,-74,-75,-42,-45,-44,]),'SUBTRACT':([79,80,81,94,95,97,98,99,101,103,104,105,107,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,160,161,162,163,164,165,166,167,169,178,180,182,183,184,185,193,195,200,],[102,102,102,-54,102,134,-72,102,-86,-55,-56,-57,-86,-54,102,102,102,-59,-60,-61,-62,-63,-64,-65,-66,-68,102,102,-71,-73,102,102,-76,-84,-85,102,102,-54,-58,134,134,-97,-97,-83,-86,-41,-43,-69,-70,-74,-75,-42,-45,-44,]),'CTEFLOAT':([79,80,81,94,95,97,98,99,100,101,102,103,104,105,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,156,160,161,162,163,164,165,166,167,178,180,182,183,184,185,193,194,195,200,],[103,103,103,-54,103,-67,-72,103,103,-86,103,-55,-56,-57,-54,103,103,103,-59,-60,-61,-62,-63,-64,-65,-66,-68,103,103,-71,-73,103,103,-76,-84,-85,103,103,103,-54,-58,-97,-97,-97,-97,-83,-41,-43,-69,-70,-74,-75,-42,103,-45,-44,]),'CTESTRING':([79,80,81,94,95,97,98,99,100,101,102,103,104,105,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,156,160,161,162,163,164,165,166,167,178,180,182,183,184,185,193,194,195,200,],[104,104,104,-54,104,-67,-72,104,104,-86,104,-55,-56,-57,-54,104,104,104,-59,-60,-61,-62,-63,-64,-65,-66,-68,104,104,-71,-73,104,104,-76,-84,-85,104,104,104,-54,-58,-97,-97,-97,-97,-83,-41,-43,-69,-70,-74,-75,-42,104,-45,-44,]),'CTEINT':([79,80,81,94,95,97,98,99,100,101,102,103,104,105,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,145,156,160,161,162,163,164,165,166,167,178,180,182,183,184,185,193,194,195,200,],[105,105,105,-54,105,-67,-72,105,105,-86,105,-55,-56,-57,-54,105,105,105,-59,-60,-61,-62,-63,-64,-65,-66,-68,105,105,-71,-73,105,105,-76,-84,-85,105,105,105,-54,-58,-97,-97,-97,-97,-83,-41,-43,-69,-70,-74,-75,-42,105,-45,-44,]),'TIMES':([94,98,101,103,104,105,107,118,141,142,160,161,165,166,167,169,],[-54,137,-86,-55,-56,-57,-86,-54,-84,-85,-86,-54,137,137,-83,-86,]),'DIV':([94,98,101,103,104,105,107,118,141,142,160,161,165,166,167,169,],[-54,138,-86,-55,-56,-57,-86,-54,-84,-85,-86,-54,138,138,-83,-86,]),'SAMEAS':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,124,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'BIGGERTHAN':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,125,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'BIGGEREQUALSTHAN':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,126,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'SMALLTHAN':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,127,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'SMALLEQUALSTHAN':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,128,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'DIFFERENTTHAN':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,129,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'AND':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,130,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'OR':([94,96,97,98,101,103,104,105,107,132,135,136,139,141,142,163,164,165,166,167,169,182,183,184,185,],[-54,131,-67,-72,-86,-55,-56,-57,-86,-68,-71,-73,-76,-84,-85,-97,-97,-97,-97,-83,-86,-69,-70,-74,-75,]),'ELSE':([186,188,197,],[196,-90,-89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'altprogram':([4,6,7,8,],[5,14,15,16,]),'class':([4,6,7,8,],[6,6,6,6,]),'var':([4,6,7,8,32,47,48,92,115,116,],[7,7,7,7,47,47,47,115,115,115,]),'function':([4,6,7,8,32,47,48,],[8,8,8,8,48,48,48,]),'main':([4,6,7,8,],[9,9,9,9,]),'listids':([11,27,72,151,],[18,39,88,176,]),'altclass':([17,],[22,]),'empty':([17,19,30,52,54,69,74,85,97,98,112,163,164,165,166,177,],[24,29,44,73,77,86,91,86,135,139,152,135,135,139,139,91,]),'listidsalty':([19,],[26,]),'type':([25,53,76,153,],[34,74,93,177,]),'altfunc':([30,],[42,]),'params':([30,69,85,],[43,85,85,]),'alt2class':([32,47,48,],[46,66,67,]),'constructor':([32,47,48,],[49,49,49,]),'altmain':([45,56,],[55,78,]),'estatuto':([45,56,92,115,116,149,168,174,187,199,],[56,56,116,116,116,174,187,174,187,187,]),'assign':([45,56,92,115,116,149,168,174,187,199,],[58,58,58,58,58,58,58,58,58,58,]),'condition':([45,56,92,115,116,149,168,174,187,199,],[59,59,59,59,59,59,59,59,59,59,]),'write':([45,56,92,115,116,149,168,174,187,199,],[60,60,60,60,60,60,60,60,60,60,]),'read':([45,56,92,115,116,149,168,174,187,199,],[61,61,61,61,61,61,61,61,61,61,]),'listidsaltz':([52,],[71,]),'alt2func':([54,],[75,]),'altconst':([69,85,],[84,111,]),'altparams':([74,177,],[89,192,]),'expresion':([79,80,81,99,145,],[95,106,108,140,170,]),'exp':([79,80,81,95,99,121,122,123,145,160,],[96,96,96,122,96,122,122,162,96,122,]),'termino':([79,80,81,95,99,121,122,123,133,134,145,160,],[97,97,97,97,97,97,97,97,163,164,97,97,]),'factor':([79,80,81,95,99,121,122,123,133,134,137,138,145,160,],[98,98,98,98,98,98,98,98,98,98,165,166,98,98,]),'varcte':([79,80,81,95,99,100,102,121,122,123,133,134,137,138,145,156,160,194,],[101,101,107,101,101,141,142,101,160,101,101,101,101,101,169,179,101,198,]),'alt3func':([92,115,116,],[114,154,155,]),'altassign':([95,121,122,160,],[120,157,159,181,]),'callfunc':([95,121,122,160,],[121,121,121,121,]),'altexpresion':([96,],[123,]),'altexp':([97,163,164,],[132,182,183,]),'alttermino':([98,165,166,],[136,184,185,]),'altwrite':([107,108,169,170,],[144,147,189,190,]),'listidsaltp':([112,],[150,]),'alt2const':([149,174,],[173,191,]),'altcall':([156,],[178,]),'altcondition':([168,187,199,],[186,197,201,]),'alt2call':([179,198,],[193,200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON altprogram','program',4,'p_program','QCSAQ_Parser.py',11),
  ('altprogram -> class altprogram','altprogram',2,'p_altprogram','QCSAQ_Parser.py',17),
  ('altprogram -> var altprogram','altprogram',2,'p_altprogram','QCSAQ_Parser.py',18),
  ('altprogram -> function altprogram','altprogram',2,'p_altprogram','QCSAQ_Parser.py',19),
  ('altprogram -> main','altprogram',1,'p_altprogram','QCSAQ_Parser.py',20),
  ('main -> MAIN OPENPAREN CLOSEPAREN OPENCURLY altmain','main',5,'p_main','QCSAQ_Parser.py',26),
  ('altmain -> estatuto altmain','altmain',2,'p_altmain','QCSAQ_Parser.py',32),
  ('altmain -> CLOSECURLY','altmain',1,'p_altmain','QCSAQ_Parser.py',33),
  ('class -> CLASS ID altclass OPENCURLY alt2class','class',5,'p_class','QCSAQ_Parser.py',39),
  ('altclass -> TWODOTS ID','altclass',2,'p_altclass','QCSAQ_Parser.py',45),
  ('altclass -> empty','altclass',1,'p_altclass','QCSAQ_Parser.py',46),
  ('alt2class -> var alt2class','alt2class',2,'p_alt2class','QCSAQ_Parser.py',52),
  ('alt2class -> function alt2class','alt2class',2,'p_alt2class','QCSAQ_Parser.py',53),
  ('alt2class -> constructor CLOSECURLY SEMICOLON','alt2class',3,'p_alt2class','QCSAQ_Parser.py',54),
  ('constructor -> CONSTRUCTOR OPENPAREN altconst CLOSEPAREN OPENCURLY alt2const','constructor',6,'p_constructor','QCSAQ_Parser.py',60),
  ('altconst -> params altconst','altconst',2,'p_altconst','QCSAQ_Parser.py',66),
  ('altconst -> empty','altconst',1,'p_altconst','QCSAQ_Parser.py',67),
  ('alt2const -> estatuto alt2const','alt2const',2,'p_alt2const','QCSAQ_Parser.py',73),
  ('alt2const -> CLOSECURLY','alt2const',1,'p_alt2const','QCSAQ_Parser.py',74),
  ('var -> VAR listids TWODOTS type SEMICOLON','var',5,'p_var','QCSAQ_Parser.py',80),
  ('listids -> ID listidsalty','listids',2,'p_listids','QCSAQ_Parser.py',86),
  ('listidsalty -> COMMA listids','listidsalty',2,'p_listidsalty','QCSAQ_Parser.py',92),
  ('listidsalty -> OPENBRACKET INT CLOSEBRACKET listidsaltz','listidsalty',4,'p_listidsalty','QCSAQ_Parser.py',93),
  ('listidsalty -> empty','listidsalty',1,'p_listidsalty','QCSAQ_Parser.py',94),
  ('listidsaltz -> COMMA listids','listidsaltz',2,'p_listidsaltz','QCSAQ_Parser.py',100),
  ('listidsaltz -> OPENBRACKET INT CLOSEBRACKET listidsaltp','listidsaltz',4,'p_listidsaltz','QCSAQ_Parser.py',101),
  ('listidsaltz -> empty','listidsaltz',1,'p_listidsaltz','QCSAQ_Parser.py',102),
  ('listidsaltp -> COMMA listids','listidsaltp',2,'p_listidsaltp','QCSAQ_Parser.py',108),
  ('listidsaltp -> empty','listidsaltp',1,'p_listidsaltp','QCSAQ_Parser.py',109),
  ('function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func OPENCURLY alt3func','function',8,'p_function','QCSAQ_Parser.py',115),
  ('altfunc -> params','altfunc',1,'p_altfunc','QCSAQ_Parser.py',121),
  ('altfunc -> empty','altfunc',1,'p_altfunc','QCSAQ_Parser.py',122),
  ('alt2func -> TWODOTS type','alt2func',2,'p_alt2func','QCSAQ_Parser.py',128),
  ('alt2func -> empty','alt2func',1,'p_alt2func','QCSAQ_Parser.py',129),
  ('alt3func -> var alt3func','alt3func',2,'p_alt3func','QCSAQ_Parser.py',135),
  ('alt3func -> estatuto alt3func','alt3func',2,'p_alt3func','QCSAQ_Parser.py',136),
  ('alt3func -> CLOSECURLY','alt3func',1,'p_alt3func','QCSAQ_Parser.py',137),
  ('params -> ID TWODOTS type altparams','params',4,'p_params','QCSAQ_Parser.py',143),
  ('altparams -> COMMA ID TWODOTS type altparams','altparams',5,'p_altparams','QCSAQ_Parser.py',149),
  ('altparams -> empty','altparams',1,'p_altparams','QCSAQ_Parser.py',150),
  ('callfunc -> ID OPENPAREN altcall','callfunc',3,'p_callfunc','QCSAQ_Parser.py',156),
  ('altcall -> varcte alt2call','altcall',2,'p_altcall','QCSAQ_Parser.py',162),
  ('altcall -> CLOSEPAREN','altcall',1,'p_altcall','QCSAQ_Parser.py',163),
  ('alt2call -> COMMA varcte alt2call','alt2call',3,'p_alt2call','QCSAQ_Parser.py',169),
  ('alt2call -> CLOSEPAREN','alt2call',1,'p_alt2call','QCSAQ_Parser.py',170),
  ('type -> INT','type',1,'p_type','QCSAQ_Parser.py',176),
  ('type -> FLOAT','type',1,'p_type','QCSAQ_Parser.py',177),
  ('type -> STRING','type',1,'p_type','QCSAQ_Parser.py',178),
  ('type -> ID','type',1,'p_type','QCSAQ_Parser.py',179),
  ('estatuto -> assign','estatuto',1,'p_estatuto','QCSAQ_Parser.py',185),
  ('estatuto -> condition','estatuto',1,'p_estatuto','QCSAQ_Parser.py',186),
  ('estatuto -> write','estatuto',1,'p_estatuto','QCSAQ_Parser.py',187),
  ('estatuto -> read','estatuto',1,'p_estatuto','QCSAQ_Parser.py',188),
  ('varcte -> ID','varcte',1,'p_varcte','QCSAQ_Parser.py',194),
  ('varcte -> CTEFLOAT','varcte',1,'p_varcte','QCSAQ_Parser.py',195),
  ('varcte -> CTESTRING','varcte',1,'p_varcte','QCSAQ_Parser.py',196),
  ('varcte -> CTEINT','varcte',1,'p_varcte','QCSAQ_Parser.py',197),
  ('expresion -> exp altexpresion exp','expresion',3,'p_expresion','QCSAQ_Parser.py',203),
  ('altexpresion -> SAMEAS','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',209),
  ('altexpresion -> BIGGERTHAN','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',210),
  ('altexpresion -> BIGGEREQUALSTHAN','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',211),
  ('altexpresion -> SMALLTHAN','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',212),
  ('altexpresion -> SMALLEQUALSTHAN','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',213),
  ('altexpresion -> DIFFERENTTHAN','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',214),
  ('altexpresion -> AND','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',215),
  ('altexpresion -> OR','altexpresion',1,'p_altexpresion','QCSAQ_Parser.py',216),
  ('exp -> termino','exp',1,'p_exp','QCSAQ_Parser.py',222),
  ('exp -> termino altexp','exp',2,'p_exp','QCSAQ_Parser.py',223),
  ('altexp -> SUM termino altexp','altexp',3,'p_altexp','QCSAQ_Parser.py',229),
  ('altexp -> SUBTRACT termino altexp','altexp',3,'p_altexp','QCSAQ_Parser.py',230),
  ('altexp -> empty','altexp',1,'p_altexp','QCSAQ_Parser.py',231),
  ('termino -> factor','termino',1,'p_termino','QCSAQ_Parser.py',237),
  ('termino -> factor alttermino','termino',2,'p_termino','QCSAQ_Parser.py',238),
  ('alttermino -> TIMES factor alttermino','alttermino',3,'p_alttermino','QCSAQ_Parser.py',244),
  ('alttermino -> DIV factor alttermino','alttermino',3,'p_alttermino','QCSAQ_Parser.py',245),
  ('alttermino -> empty','alttermino',1,'p_alttermino','QCSAQ_Parser.py',246),
  ('read -> INPUT OPENPAREN ID CLOSEPAREN SEMICOLON','read',5,'p_read','QCSAQ_Parser.py',252),
  ('write -> OUTPUT OPENPAREN varcte altwrite','write',4,'p_write','QCSAQ_Parser.py',258),
  ('write -> OUTPUT OPENPAREN expresion altwrite','write',4,'p_write','QCSAQ_Parser.py',259),
  ('altwrite -> COMMA varcte altwrite','altwrite',3,'p_altwrite','QCSAQ_Parser.py',265),
  ('altwrite -> COMMA expresion altwrite','altwrite',3,'p_altwrite','QCSAQ_Parser.py',266),
  ('altwrite -> CLOSEPAREN SEMICOLON','altwrite',2,'p_altwrite','QCSAQ_Parser.py',267),
  ('factor -> OPENPAREN expresion CLOSEPAREN','factor',3,'p_factor','QCSAQ_Parser.py',273),
  ('factor -> SUM varcte','factor',2,'p_factor','QCSAQ_Parser.py',274),
  ('factor -> SUBTRACT varcte','factor',2,'p_factor','QCSAQ_Parser.py',275),
  ('factor -> varcte','factor',1,'p_factor','QCSAQ_Parser.py',276),
  ('condition -> IF OPENPAREN expresion CLOSEPAREN OPENCURLY altcondition','condition',6,'p_condition','QCSAQ_Parser.py',282),
  ('condition -> IF OPENPAREN expresion CLOSEPAREN OPENCURLY altcondition ELSE OPENCURLY altcondition','condition',9,'p_condition','QCSAQ_Parser.py',283),
  ('altcondition -> estatuto altcondition','altcondition',2,'p_altcondition','QCSAQ_Parser.py',289),
  ('altcondition -> CLOSECURLY','altcondition',1,'p_altcondition','QCSAQ_Parser.py',290),
  ('assign -> ID EQUALS expresion SEMICOLON','assign',4,'p_assign','QCSAQ_Parser.py',296),
  ('assign -> ID EQUALS expresion altassign','assign',4,'p_assign','QCSAQ_Parser.py',297),
  ('altassign -> callfunc altassign','altassign',2,'p_altassign','QCSAQ_Parser.py',303),
  ('altassign -> exp altassign','altassign',2,'p_altassign','QCSAQ_Parser.py',304),
  ('altassign -> exp varcte altassign','altassign',3,'p_altassign','QCSAQ_Parser.py',305),
  ('altassign -> SEMICOLON','altassign',1,'p_altassign','QCSAQ_Parser.py',306),
  ('empty -> <empty>','empty',0,'p_empty','QCSAQ_Parser.py',312),
]
