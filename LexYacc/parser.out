Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID save_program SEMICOLON altprogram
Rule 2     altprogram -> class altprogram
Rule 3     altprogram -> var altprogram
Rule 4     altprogram -> function altprogram
Rule 5     altprogram -> main remove_class_scope
Rule 6     main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
Rule 7     altmain -> var altmain
Rule 8     altmain -> estatuto altmain
Rule 9     altmain -> CLOSECURLY
Rule 10    class -> CLASS ID altclass save_class OPENCURLY alt2class
Rule 11    altclass -> TWODOTS ID
Rule 12    altclass -> empty
Rule 13    alt2class -> var alt2class
Rule 14    alt2class -> function alt2class
Rule 15    alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope
Rule 16    constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
Rule 17    altconst -> params
Rule 18    altconst -> empty
Rule 19    alt2const -> var alt2const
Rule 20    alt2const -> estatuto alt2const
Rule 21    alt2const -> CLOSECURLY
Rule 22    var -> VAR listids TWODOTS type save_vars SEMICOLON
Rule 23    listids -> ID save_var_name dec_array listidsalty
Rule 24    listidsalty -> COMMA listids
Rule 25    listidsalty -> empty
Rule 26    dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2
Rule 27    dec_array -> empty
Rule 28    dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET
Rule 29    dec_array2 -> empty
Rule 30    array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2
Rule 31    array -> empty
Rule 32    array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv
Rule 33    array2 -> empty
Rule 34    function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
Rule 35    altfunc -> params
Rule 36    altfunc -> empty
Rule 37    alt2func -> TWODOTS type
Rule 38    alt2func -> empty
Rule 39    alt3func -> var alt3func
Rule 40    alt3func -> estatuto alt3func
Rule 41    alt3func -> CLOSECURLY remove_function_scope
Rule 42    params -> ID TWODOTS type save_params altparams
Rule 43    altparams -> COMMA ID TWODOTS type save_params altparams
Rule 44    altparams -> empty
Rule 45    callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
Rule 46    altcall -> expresion generate_param_quad alt2call
Rule 47    altcall -> empty
Rule 48    alt2call -> COMMA altcall
Rule 49    alt2call -> empty
Rule 50    type -> INT
Rule 51    type -> FLOAT
Rule 52    type -> STRING
Rule 53    type -> ID
Rule 54    type -> BOOL
Rule 55    estatuto -> assign empty_pv
Rule 56    estatuto -> condition empty_pv
Rule 57    estatuto -> write empty_pv
Rule 58    estatuto -> read empty_pv
Rule 59    estatuto -> return empty_pv
Rule 60    estatuto -> voidcall empty_pv
Rule 61    estatuto -> while empty_pv
Rule 62    voidcall -> callfunc SEMICOLON
Rule 63    voidcall -> ID DOT voidcall
Rule 64    while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
Rule 65    altwhile -> estatuto altwhile
Rule 66    altwhile -> CLOSECURLY
Rule 67    varcall -> varcte save_const
Rule 68    varcall -> varcomplicated save_comp
Rule 69    varcte -> TRUE
Rule 70    varcte -> FALSE
Rule 71    varcte -> CTEFLOAT
Rule 72    varcte -> CTESTRING
Rule 73    varcte -> CTEINT
Rule 74    varcomplicated -> varcomp1
Rule 75    varcomplicated -> callfunc
Rule 76    varcomp1 -> ID varcomp2
Rule 77    varcomp2 -> DOT varcomp3
Rule 78    varcomp2 -> array empty
Rule 79    varcomp3 -> varcomp1
Rule 80    varcomp3 -> callfunc
Rule 81    expresion -> exp altexpresion
Rule 82    altexpresion -> altexpresion2 save_op exp
Rule 83    altexpresion -> empty
Rule 84    altexpresion2 -> SAMEAS
Rule 85    altexpresion2 -> BIGGERTHAN
Rule 86    altexpresion2 -> BIGGEREQUALSTHAN
Rule 87    altexpresion2 -> SMALLTHAN
Rule 88    altexpresion2 -> SMALLEQUALSTHAN
Rule 89    altexpresion2 -> DIFFERENTTHAN
Rule 90    altexpresion2 -> AND
Rule 91    altexpresion2 -> OR
Rule 92    exp -> termino
Rule 93    exp -> termino altexp
Rule 94    altexp -> SUM save_op termino altexp
Rule 95    altexp -> SUBTRACT save_op termino altexp
Rule 96    altexp -> empty
Rule 97    termino -> factor
Rule 98    termino -> factor alttermino
Rule 99    alttermino -> TIMES save_op factor alttermino
Rule 100   alttermino -> DIV save_op factor alttermino
Rule 101   alttermino -> empty
Rule 102   read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
Rule 103   write -> OUTPUT save_op OPENPAREN expresion altwrite
Rule 104   altwrite -> COMMA save_op expresion altwrite
Rule 105   altwrite -> CLOSEPAREN SEMICOLON
Rule 106   factor -> OPENPAREN save_op expresion CLOSEPAREN save_op
Rule 107   factor -> varcall
Rule 108   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
Rule 109   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
Rule 110   altcondition -> estatuto altcondition
Rule 111   altcondition -> CLOSECURLY
Rule 112   assign -> ID array save_comp EQUALS save_op expresion SEMICOLON
Rule 113   return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists
Rule 114   empty -> <empty>
Rule 115   save_program -> <empty>
Rule 116   save_main -> <empty>
Rule 117   save_class -> <empty>
Rule 118   remove_class_scope -> <empty>
Rule 119   save_constructor -> <empty>
Rule 120   save_vars -> <empty>
Rule 121   save_var_name -> <empty>
Rule 122   save_function -> <empty>
Rule 123   store_params -> <empty>
Rule 124   remove_function_scope -> <empty>
Rule 125   save_params -> <empty>
Rule 126   add_false_stack -> <empty>
Rule 127   end_false_stack -> <empty>
Rule 128   generate_gosub -> <empty>
Rule 129   check_params -> <empty>
Rule 130   generate_param_quad -> <empty>
Rule 131   check_exists_func -> <empty>
Rule 132   empty_pv -> <empty>
Rule 133   add_stack_jump -> <empty>
Rule 134   end_while -> <empty>
Rule 135   save_const -> <empty>
Rule 136   save_comp -> <empty>
Rule 137   save_op -> <empty>
Rule 138   add_gotof -> <empty>
Rule 139   add_end_if -> <empty>
Rule 140   generate_goto -> <empty>
Rule 141   generate_quad_ret -> <empty>
Rule 142   add_return_exists -> <empty>

Terminals, with rules where they appear

AND                  : 90
BIGGEREQUALSTHAN     : 86
BIGGERTHAN           : 85
BOOL                 : 54
CLASS                : 10
CLOSEBRACKET         : 26 28 30 32
CLOSECURLY           : 9 15 21 41 66 111
CLOSEPAREN           : 6 16 34 45 64 102 105 106 108 109
COMMA                : 24 43 48 104
CONSTRUCTOR          : 16
CTEFLOAT             : 71
CTEINT               : 26 28 73
CTESTRING            : 72
DIFFERENTTHAN        : 89
DIV                  : 100
DOT                  : 63 77
ELSE                 : 109
EQUALS               : 112
FALSE                : 70
FLOAT                : 51
FUNC                 : 34
ID                   : 1 10 11 23 34 42 43 45 53 63 76 102 112
IF                   : 108 109
INPUT                : 102
INT                  : 50
MAIN                 : 6
OPENBRACKET          : 26 28 30 32
OPENCURLY            : 6 10 16 34 64 108 109 109
OPENPAREN            : 6 16 34 45 64 102 103 106 108 109
OR                   : 91
OUTPUT               : 103
PROGRAM              : 1
RETURN               : 113
SAMEAS               : 84
SEMICOLON            : 1 15 22 62 102 105 112 113
SMALLEQUALSTHAN      : 88
SMALLTHAN            : 87
STRING               : 52
SUBTRACT             : 95
SUM                  : 94
TIMES                : 99
TRUE                 : 69
TWODOTS              : 11 22 37 42 43
VAR                  : 22
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

add_end_if           : 108 109
add_false_stack      : 45
add_gotof            : 64 108 109
add_return_exists    : 113
add_stack_jump       : 64
alt2call             : 46
alt2class            : 10 13 14
alt2const            : 16 19 20
alt2func             : 34
alt3func             : 34 39 40
altcall              : 45 48
altclass             : 10
altcondition         : 108 109 109 110
altconst             : 16
altexp               : 93 94 95
altexpresion         : 81
altexpresion2        : 82
altfunc              : 34
altmain              : 6 7 8
altparams            : 42 43
altprogram           : 1 2 3 4
alttermino           : 98 99 100
altwhile             : 64 65
altwrite             : 103 104
array                : 78 112
array2               : 30
assign               : 55
callfunc             : 62 75 80
check_exists_func    : 45
check_params         : 45
class                : 2
condition            : 56
constructor          : 15
dec_array            : 23
dec_array2           : 26
empty                : 12 18 25 27 29 31 33 36 38 44 47 49 78 83 96 101
empty_pv             : 30 32 55 56 57 58 59 60 61
end_false_stack      : 45
end_while            : 64
estatuto             : 8 20 40 65 110
exp                  : 81 82
expresion            : 30 32 46 64 103 104 106 108 109 112 113
factor               : 97 98 99 100
function             : 4 14
generate_gosub       : 45
generate_goto        : 109
generate_param_quad  : 46
generate_quad_ret    : 113
listids              : 22 24
listidsalty          : 23
main                 : 5
params               : 17 35
program              : 0
read                 : 58
remove_class_scope   : 5 15
remove_function_scope : 41
return               : 59
save_class           : 10
save_comp            : 68 102 112
save_const           : 67
save_constructor     : 16
save_function        : 34
save_main            : 6
save_op              : 82 94 95 99 100 102 103 104 106 106 112
save_params          : 42 43
save_program         : 1
save_var_name        : 23
save_vars            : 22
store_params         : 16 34
termino              : 92 93 94 95
type                 : 22 37 42 43
var                  : 3 7 13 19 39
varcall              : 107
varcomp1             : 74 79
varcomp2             : 76
varcomp3             : 77
varcomplicated       : 68
varcte               : 67
voidcall             : 60 63
while                : 61
write                : 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID save_program SEMICOLON altprogram

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID save_program SEMICOLON altprogram

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . save_program SEMICOLON altprogram
    (115) save_program -> .

    SEMICOLON       reduce using rule 115 (save_program -> .)

    save_program                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID save_program . SEMICOLON altprogram

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID save_program SEMICOLON . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    altprogram                     shift and go to state 6
    class                          shift and go to state 7
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 6

    (1) program -> PROGRAM ID save_program SEMICOLON altprogram .

    $end            reduce using rule 1 (program -> PROGRAM ID save_program SEMICOLON altprogram .)


state 7

    (2) altprogram -> class . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    class                          shift and go to state 7
    altprogram                     shift and go to state 15
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 8

    (3) altprogram -> var . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    var                            shift and go to state 8
    altprogram                     shift and go to state 16
    class                          shift and go to state 7
    function                       shift and go to state 9
    main                           shift and go to state 10

state 9

    (4) altprogram -> function . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    function                       shift and go to state 9
    altprogram                     shift and go to state 17
    class                          shift and go to state 7
    var                            shift and go to state 8
    main                           shift and go to state 10

state 10

    (5) altprogram -> main . remove_class_scope
    (118) remove_class_scope -> .

    $end            reduce using rule 118 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 18

state 11

    (10) class -> CLASS . ID altclass save_class OPENCURLY alt2class

    ID              shift and go to state 19


state 12

    (22) var -> VAR . listids TWODOTS type save_vars SEMICOLON
    (23) listids -> . ID save_var_name dec_array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 20

state 13

    (34) function -> FUNC . ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    ID              shift and go to state 22


state 14

    (6) main -> MAIN . save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
    (116) save_main -> .

    OPENPAREN       reduce using rule 116 (save_main -> .)

    save_main                      shift and go to state 23

state 15

    (2) altprogram -> class altprogram .

    $end            reduce using rule 2 (altprogram -> class altprogram .)


state 16

    (3) altprogram -> var altprogram .

    $end            reduce using rule 3 (altprogram -> var altprogram .)


state 17

    (4) altprogram -> function altprogram .

    $end            reduce using rule 4 (altprogram -> function altprogram .)


state 18

    (5) altprogram -> main remove_class_scope .

    $end            reduce using rule 5 (altprogram -> main remove_class_scope .)


state 19

    (10) class -> CLASS ID . altclass save_class OPENCURLY alt2class
    (11) altclass -> . TWODOTS ID
    (12) altclass -> . empty
    (114) empty -> .

    TWODOTS         shift and go to state 25
    OPENCURLY       reduce using rule 114 (empty -> .)

    altclass                       shift and go to state 24
    empty                          shift and go to state 26

state 20

    (22) var -> VAR listids . TWODOTS type save_vars SEMICOLON

    TWODOTS         shift and go to state 27


state 21

    (23) listids -> ID . save_var_name dec_array listidsalty
    (121) save_var_name -> .

    OPENBRACKET     reduce using rule 121 (save_var_name -> .)
    COMMA           reduce using rule 121 (save_var_name -> .)
    TWODOTS         reduce using rule 121 (save_var_name -> .)

    save_var_name                  shift and go to state 28

state 22

    (34) function -> FUNC ID . OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    OPENPAREN       shift and go to state 29


state 23

    (6) main -> MAIN save_main . OPENPAREN CLOSEPAREN OPENCURLY altmain

    OPENPAREN       shift and go to state 30


state 24

    (10) class -> CLASS ID altclass . save_class OPENCURLY alt2class
    (117) save_class -> .

    OPENCURLY       reduce using rule 117 (save_class -> .)

    save_class                     shift and go to state 31

state 25

    (11) altclass -> TWODOTS . ID

    ID              shift and go to state 32


state 26

    (12) altclass -> empty .

    OPENCURLY       reduce using rule 12 (altclass -> empty .)


state 27

    (22) var -> VAR listids TWODOTS . type save_vars SEMICOLON
    (50) type -> . INT
    (51) type -> . FLOAT
    (52) type -> . STRING
    (53) type -> . ID
    (54) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 33

state 28

    (23) listids -> ID save_var_name . dec_array listidsalty
    (26) dec_array -> . OPENBRACKET CTEINT CLOSEBRACKET dec_array2
    (27) dec_array -> . empty
    (114) empty -> .

    OPENBRACKET     shift and go to state 40
    COMMA           reduce using rule 114 (empty -> .)
    TWODOTS         reduce using rule 114 (empty -> .)

    dec_array                      shift and go to state 39
    empty                          shift and go to state 41

state 29

    (34) function -> FUNC ID OPENPAREN . altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (35) altfunc -> . params
    (36) altfunc -> . empty
    (42) params -> . ID TWODOTS type save_params altparams
    (114) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 114 (empty -> .)

    altfunc                        shift and go to state 43
    params                         shift and go to state 44
    empty                          shift and go to state 45

state 30

    (6) main -> MAIN save_main OPENPAREN . CLOSEPAREN OPENCURLY altmain

    CLOSEPAREN      shift and go to state 46


state 31

    (10) class -> CLASS ID altclass save_class . OPENCURLY alt2class

    OPENCURLY       shift and go to state 47


state 32

    (11) altclass -> TWODOTS ID .

    OPENCURLY       reduce using rule 11 (altclass -> TWODOTS ID .)


state 33

    (22) var -> VAR listids TWODOTS type . save_vars SEMICOLON
    (120) save_vars -> .

    SEMICOLON       reduce using rule 120 (save_vars -> .)

    save_vars                      shift and go to state 48

state 34

    (50) type -> INT .

    SEMICOLON       reduce using rule 50 (type -> INT .)
    COMMA           reduce using rule 50 (type -> INT .)
    CLOSEPAREN      reduce using rule 50 (type -> INT .)
    OPENCURLY       reduce using rule 50 (type -> INT .)


state 35

    (51) type -> FLOAT .

    SEMICOLON       reduce using rule 51 (type -> FLOAT .)
    COMMA           reduce using rule 51 (type -> FLOAT .)
    CLOSEPAREN      reduce using rule 51 (type -> FLOAT .)
    OPENCURLY       reduce using rule 51 (type -> FLOAT .)


state 36

    (52) type -> STRING .

    SEMICOLON       reduce using rule 52 (type -> STRING .)
    COMMA           reduce using rule 52 (type -> STRING .)
    CLOSEPAREN      reduce using rule 52 (type -> STRING .)
    OPENCURLY       reduce using rule 52 (type -> STRING .)


state 37

    (53) type -> ID .

    SEMICOLON       reduce using rule 53 (type -> ID .)
    COMMA           reduce using rule 53 (type -> ID .)
    CLOSEPAREN      reduce using rule 53 (type -> ID .)
    OPENCURLY       reduce using rule 53 (type -> ID .)


state 38

    (54) type -> BOOL .

    SEMICOLON       reduce using rule 54 (type -> BOOL .)
    COMMA           reduce using rule 54 (type -> BOOL .)
    CLOSEPAREN      reduce using rule 54 (type -> BOOL .)
    OPENCURLY       reduce using rule 54 (type -> BOOL .)


state 39

    (23) listids -> ID save_var_name dec_array . listidsalty
    (24) listidsalty -> . COMMA listids
    (25) listidsalty -> . empty
    (114) empty -> .

    COMMA           shift and go to state 50
    TWODOTS         reduce using rule 114 (empty -> .)

    listidsalty                    shift and go to state 49
    empty                          shift and go to state 51

state 40

    (26) dec_array -> OPENBRACKET . CTEINT CLOSEBRACKET dec_array2

    CTEINT          shift and go to state 52


state 41

    (27) dec_array -> empty .

    COMMA           reduce using rule 27 (dec_array -> empty .)
    TWODOTS         reduce using rule 27 (dec_array -> empty .)


state 42

    (42) params -> ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 53


state 43

    (34) function -> FUNC ID OPENPAREN altfunc . CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    CLOSEPAREN      shift and go to state 54


state 44

    (35) altfunc -> params .

    CLOSEPAREN      reduce using rule 35 (altfunc -> params .)


state 45

    (36) altfunc -> empty .

    CLOSEPAREN      reduce using rule 36 (altfunc -> empty .)


state 46

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN . OPENCURLY altmain

    OPENCURLY       shift and go to state 55


state 47

    (10) class -> CLASS ID altclass save_class OPENCURLY . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    alt2class                      shift and go to state 56
    var                            shift and go to state 57
    function                       shift and go to state 58
    constructor                    shift and go to state 59

state 48

    (22) var -> VAR listids TWODOTS type save_vars . SEMICOLON

    SEMICOLON       shift and go to state 61


state 49

    (23) listids -> ID save_var_name dec_array listidsalty .

    TWODOTS         reduce using rule 23 (listids -> ID save_var_name dec_array listidsalty .)


state 50

    (24) listidsalty -> COMMA . listids
    (23) listids -> . ID save_var_name dec_array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 62

state 51

    (25) listidsalty -> empty .

    TWODOTS         reduce using rule 25 (listidsalty -> empty .)


state 52

    (26) dec_array -> OPENBRACKET CTEINT . CLOSEBRACKET dec_array2

    CLOSEBRACKET    shift and go to state 63


state 53

    (42) params -> ID TWODOTS . type save_params altparams
    (50) type -> . INT
    (51) type -> . FLOAT
    (52) type -> . STRING
    (53) type -> . ID
    (54) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 64

state 54

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN . alt2func save_function store_params OPENCURLY alt3func
    (37) alt2func -> . TWODOTS type
    (38) alt2func -> . empty
    (114) empty -> .

    TWODOTS         shift and go to state 66
    OPENCURLY       reduce using rule 114 (empty -> .)

    alt2func                       shift and go to state 65
    empty                          shift and go to state 67

state 55

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altmain                        shift and go to state 68
    var                            shift and go to state 69
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 56

    (10) class -> CLASS ID altclass save_class OPENCURLY alt2class .

    CLASS           reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    VAR             reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    FUNC            reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    MAIN            reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)


state 57

    (13) alt2class -> var . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    var                            shift and go to state 57
    alt2class                      shift and go to state 86
    function                       shift and go to state 58
    constructor                    shift and go to state 59

state 58

    (14) alt2class -> function . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (34) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    function                       shift and go to state 58
    alt2class                      shift and go to state 87
    var                            shift and go to state 57
    constructor                    shift and go to state 59

state 59

    (15) alt2class -> constructor . CLOSECURLY SEMICOLON remove_class_scope

    CLOSECURLY      shift and go to state 88


state 60

    (16) constructor -> CONSTRUCTOR . save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
    (119) save_constructor -> .

    OPENPAREN       reduce using rule 119 (save_constructor -> .)

    save_constructor               shift and go to state 89

state 61

    (22) var -> VAR listids TWODOTS type save_vars SEMICOLON .

    CLASS           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    VAR             reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    FUNC            reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    MAIN            reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CONSTRUCTOR     reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CLOSECURLY      reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    ID              reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    IF              reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    OUTPUT          reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    INPUT           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    RETURN          reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    WHILE           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)


state 62

    (24) listidsalty -> COMMA listids .

    TWODOTS         reduce using rule 24 (listidsalty -> COMMA listids .)


state 63

    (26) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET . dec_array2
    (28) dec_array2 -> . OPENBRACKET CTEINT CLOSEBRACKET
    (29) dec_array2 -> . empty
    (114) empty -> .

    OPENBRACKET     shift and go to state 90
    COMMA           reduce using rule 114 (empty -> .)
    TWODOTS         reduce using rule 114 (empty -> .)

    dec_array2                     shift and go to state 91
    empty                          shift and go to state 92

state 64

    (42) params -> ID TWODOTS type . save_params altparams
    (125) save_params -> .

    COMMA           reduce using rule 125 (save_params -> .)
    CLOSEPAREN      reduce using rule 125 (save_params -> .)

    save_params                    shift and go to state 93

state 65

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func . save_function store_params OPENCURLY alt3func
    (122) save_function -> .

    OPENCURLY       reduce using rule 122 (save_function -> .)

    save_function                  shift and go to state 94

state 66

    (37) alt2func -> TWODOTS . type
    (50) type -> . INT
    (51) type -> . FLOAT
    (52) type -> . STRING
    (53) type -> . ID
    (54) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 95

state 67

    (38) alt2func -> empty .

    OPENCURLY       reduce using rule 38 (alt2func -> empty .)


state 68

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .

    $end            reduce using rule 6 (main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .)


state 69

    (7) altmain -> var . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 69
    altmain                        shift and go to state 96
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 70

    (8) altmain -> estatuto . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 70
    altmain                        shift and go to state 97
    var                            shift and go to state 69
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 71

    (9) altmain -> CLOSECURLY .

    $end            reduce using rule 9 (altmain -> CLOSECURLY .)


state 72

    (55) estatuto -> assign . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 98

state 73

    (56) estatuto -> condition . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 99

state 74

    (57) estatuto -> write . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 100

state 75

    (58) estatuto -> read . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 101

state 76

    (59) estatuto -> return . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 102

state 77

    (60) estatuto -> voidcall . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 103

state 78

    (61) estatuto -> while . empty_pv
    (132) empty_pv -> .

    CLOSECURLY      reduce using rule 132 (empty_pv -> .)
    VAR             reduce using rule 132 (empty_pv -> .)
    ID              reduce using rule 132 (empty_pv -> .)
    IF              reduce using rule 132 (empty_pv -> .)
    OUTPUT          reduce using rule 132 (empty_pv -> .)
    INPUT           reduce using rule 132 (empty_pv -> .)
    RETURN          reduce using rule 132 (empty_pv -> .)
    WHILE           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 104

state 79

    (112) assign -> ID . array save_comp EQUALS save_op expresion SEMICOLON
    (63) voidcall -> ID . DOT voidcall
    (45) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (30) array -> . OPENBRACKET expresion CLOSEBRACKET empty_pv array2
    (31) array -> . empty
    (131) check_exists_func -> .
    (114) empty -> .

    DOT             shift and go to state 106
    OPENBRACKET     shift and go to state 108
    OPENPAREN       reduce using rule 131 (check_exists_func -> .)
    EQUALS          reduce using rule 114 (empty -> .)

    array                          shift and go to state 105
    check_exists_func              shift and go to state 107
    empty                          shift and go to state 109

state 80

    (108) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENPAREN       shift and go to state 110


state 81

    (103) write -> OUTPUT . save_op OPENPAREN expresion altwrite
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 111

state 82

    (102) read -> INPUT . save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 112

state 83

    (113) return -> RETURN . expresion generate_quad_ret SEMICOLON add_return_exists
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 113
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 84

    (62) voidcall -> callfunc . SEMICOLON

    SEMICOLON       shift and go to state 129


state 85

    (64) while -> WHILE . add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (133) add_stack_jump -> .

    OPENPAREN       reduce using rule 133 (add_stack_jump -> .)

    add_stack_jump                 shift and go to state 130

state 86

    (13) alt2class -> var alt2class .

    CLASS           reduce using rule 13 (alt2class -> var alt2class .)
    VAR             reduce using rule 13 (alt2class -> var alt2class .)
    FUNC            reduce using rule 13 (alt2class -> var alt2class .)
    MAIN            reduce using rule 13 (alt2class -> var alt2class .)


state 87

    (14) alt2class -> function alt2class .

    CLASS           reduce using rule 14 (alt2class -> function alt2class .)
    VAR             reduce using rule 14 (alt2class -> function alt2class .)
    FUNC            reduce using rule 14 (alt2class -> function alt2class .)
    MAIN            reduce using rule 14 (alt2class -> function alt2class .)


state 88

    (15) alt2class -> constructor CLOSECURLY . SEMICOLON remove_class_scope

    SEMICOLON       shift and go to state 131


state 89

    (16) constructor -> CONSTRUCTOR save_constructor . OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    OPENPAREN       shift and go to state 132


state 90

    (28) dec_array2 -> OPENBRACKET . CTEINT CLOSEBRACKET

    CTEINT          shift and go to state 133


state 91

    (26) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .

    COMMA           reduce using rule 26 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)
    TWODOTS         reduce using rule 26 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)


state 92

    (29) dec_array2 -> empty .

    COMMA           reduce using rule 29 (dec_array2 -> empty .)
    TWODOTS         reduce using rule 29 (dec_array2 -> empty .)


state 93

    (42) params -> ID TWODOTS type save_params . altparams
    (43) altparams -> . COMMA ID TWODOTS type save_params altparams
    (44) altparams -> . empty
    (114) empty -> .

    COMMA           shift and go to state 135
    CLOSEPAREN      reduce using rule 114 (empty -> .)

    altparams                      shift and go to state 134
    empty                          shift and go to state 136

state 94

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function . store_params OPENCURLY alt3func
    (123) store_params -> .

    OPENCURLY       reduce using rule 123 (store_params -> .)

    store_params                   shift and go to state 137

state 95

    (37) alt2func -> TWODOTS type .

    OPENCURLY       reduce using rule 37 (alt2func -> TWODOTS type .)


state 96

    (7) altmain -> var altmain .

    $end            reduce using rule 7 (altmain -> var altmain .)


state 97

    (8) altmain -> estatuto altmain .

    $end            reduce using rule 8 (altmain -> estatuto altmain .)


state 98

    (55) estatuto -> assign empty_pv .

    CLOSECURLY      reduce using rule 55 (estatuto -> assign empty_pv .)
    VAR             reduce using rule 55 (estatuto -> assign empty_pv .)
    ID              reduce using rule 55 (estatuto -> assign empty_pv .)
    IF              reduce using rule 55 (estatuto -> assign empty_pv .)
    OUTPUT          reduce using rule 55 (estatuto -> assign empty_pv .)
    INPUT           reduce using rule 55 (estatuto -> assign empty_pv .)
    RETURN          reduce using rule 55 (estatuto -> assign empty_pv .)
    WHILE           reduce using rule 55 (estatuto -> assign empty_pv .)


state 99

    (56) estatuto -> condition empty_pv .

    CLOSECURLY      reduce using rule 56 (estatuto -> condition empty_pv .)
    VAR             reduce using rule 56 (estatuto -> condition empty_pv .)
    ID              reduce using rule 56 (estatuto -> condition empty_pv .)
    IF              reduce using rule 56 (estatuto -> condition empty_pv .)
    OUTPUT          reduce using rule 56 (estatuto -> condition empty_pv .)
    INPUT           reduce using rule 56 (estatuto -> condition empty_pv .)
    RETURN          reduce using rule 56 (estatuto -> condition empty_pv .)
    WHILE           reduce using rule 56 (estatuto -> condition empty_pv .)


state 100

    (57) estatuto -> write empty_pv .

    CLOSECURLY      reduce using rule 57 (estatuto -> write empty_pv .)
    VAR             reduce using rule 57 (estatuto -> write empty_pv .)
    ID              reduce using rule 57 (estatuto -> write empty_pv .)
    IF              reduce using rule 57 (estatuto -> write empty_pv .)
    OUTPUT          reduce using rule 57 (estatuto -> write empty_pv .)
    INPUT           reduce using rule 57 (estatuto -> write empty_pv .)
    RETURN          reduce using rule 57 (estatuto -> write empty_pv .)
    WHILE           reduce using rule 57 (estatuto -> write empty_pv .)


state 101

    (58) estatuto -> read empty_pv .

    CLOSECURLY      reduce using rule 58 (estatuto -> read empty_pv .)
    VAR             reduce using rule 58 (estatuto -> read empty_pv .)
    ID              reduce using rule 58 (estatuto -> read empty_pv .)
    IF              reduce using rule 58 (estatuto -> read empty_pv .)
    OUTPUT          reduce using rule 58 (estatuto -> read empty_pv .)
    INPUT           reduce using rule 58 (estatuto -> read empty_pv .)
    RETURN          reduce using rule 58 (estatuto -> read empty_pv .)
    WHILE           reduce using rule 58 (estatuto -> read empty_pv .)


state 102

    (59) estatuto -> return empty_pv .

    CLOSECURLY      reduce using rule 59 (estatuto -> return empty_pv .)
    VAR             reduce using rule 59 (estatuto -> return empty_pv .)
    ID              reduce using rule 59 (estatuto -> return empty_pv .)
    IF              reduce using rule 59 (estatuto -> return empty_pv .)
    OUTPUT          reduce using rule 59 (estatuto -> return empty_pv .)
    INPUT           reduce using rule 59 (estatuto -> return empty_pv .)
    RETURN          reduce using rule 59 (estatuto -> return empty_pv .)
    WHILE           reduce using rule 59 (estatuto -> return empty_pv .)


state 103

    (60) estatuto -> voidcall empty_pv .

    CLOSECURLY      reduce using rule 60 (estatuto -> voidcall empty_pv .)
    VAR             reduce using rule 60 (estatuto -> voidcall empty_pv .)
    ID              reduce using rule 60 (estatuto -> voidcall empty_pv .)
    IF              reduce using rule 60 (estatuto -> voidcall empty_pv .)
    OUTPUT          reduce using rule 60 (estatuto -> voidcall empty_pv .)
    INPUT           reduce using rule 60 (estatuto -> voidcall empty_pv .)
    RETURN          reduce using rule 60 (estatuto -> voidcall empty_pv .)
    WHILE           reduce using rule 60 (estatuto -> voidcall empty_pv .)


state 104

    (61) estatuto -> while empty_pv .

    CLOSECURLY      reduce using rule 61 (estatuto -> while empty_pv .)
    VAR             reduce using rule 61 (estatuto -> while empty_pv .)
    ID              reduce using rule 61 (estatuto -> while empty_pv .)
    IF              reduce using rule 61 (estatuto -> while empty_pv .)
    OUTPUT          reduce using rule 61 (estatuto -> while empty_pv .)
    INPUT           reduce using rule 61 (estatuto -> while empty_pv .)
    RETURN          reduce using rule 61 (estatuto -> while empty_pv .)
    WHILE           reduce using rule 61 (estatuto -> while empty_pv .)


state 105

    (112) assign -> ID array . save_comp EQUALS save_op expresion SEMICOLON
    (136) save_comp -> .

    EQUALS          reduce using rule 136 (save_comp -> .)

    save_comp                      shift and go to state 138

state 106

    (63) voidcall -> ID DOT . voidcall
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 139

    voidcall                       shift and go to state 140
    callfunc                       shift and go to state 84

state 107

    (45) callfunc -> ID check_exists_func . add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (126) add_false_stack -> .

    OPENPAREN       reduce using rule 126 (add_false_stack -> .)

    add_false_stack                shift and go to state 141

state 108

    (30) array -> OPENBRACKET . expresion CLOSEBRACKET empty_pv array2
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 142
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 109

    (31) array -> empty .

    EQUALS          reduce using rule 31 (array -> empty .)
    TIMES           reduce using rule 31 (array -> empty .)
    DIV             reduce using rule 31 (array -> empty .)
    SUM             reduce using rule 31 (array -> empty .)
    SUBTRACT        reduce using rule 31 (array -> empty .)
    SAMEAS          reduce using rule 31 (array -> empty .)
    BIGGERTHAN      reduce using rule 31 (array -> empty .)
    BIGGEREQUALSTHAN reduce using rule 31 (array -> empty .)
    SMALLTHAN       reduce using rule 31 (array -> empty .)
    SMALLEQUALSTHAN reduce using rule 31 (array -> empty .)
    DIFFERENTTHAN   reduce using rule 31 (array -> empty .)
    AND             reduce using rule 31 (array -> empty .)
    OR              reduce using rule 31 (array -> empty .)
    SEMICOLON       reduce using rule 31 (array -> empty .)
    CLOSEBRACKET    reduce using rule 31 (array -> empty .)
    CLOSEPAREN      reduce using rule 31 (array -> empty .)
    COMMA           reduce using rule 31 (array -> empty .)


state 110

    (108) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 143
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 111

    (103) write -> OUTPUT save_op . OPENPAREN expresion altwrite

    OPENPAREN       shift and go to state 144


state 112

    (102) read -> INPUT save_op . OPENPAREN ID save_comp CLOSEPAREN SEMICOLON

    OPENPAREN       shift and go to state 145


state 113

    (113) return -> RETURN expresion . generate_quad_ret SEMICOLON add_return_exists
    (141) generate_quad_ret -> .

    SEMICOLON       reduce using rule 141 (generate_quad_ret -> .)

    generate_quad_ret              shift and go to state 146

state 114

    (81) expresion -> exp . altexpresion
    (82) altexpresion -> . altexpresion2 save_op exp
    (83) altexpresion -> . empty
    (84) altexpresion2 -> . SAMEAS
    (85) altexpresion2 -> . BIGGERTHAN
    (86) altexpresion2 -> . BIGGEREQUALSTHAN
    (87) altexpresion2 -> . SMALLTHAN
    (88) altexpresion2 -> . SMALLEQUALSTHAN
    (89) altexpresion2 -> . DIFFERENTTHAN
    (90) altexpresion2 -> . AND
    (91) altexpresion2 -> . OR
    (114) empty -> .

    SAMEAS          shift and go to state 150
    BIGGERTHAN      shift and go to state 151
    BIGGEREQUALSTHAN shift and go to state 152
    SMALLTHAN       shift and go to state 153
    SMALLEQUALSTHAN shift and go to state 154
    DIFFERENTTHAN   shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    altexpresion                   shift and go to state 147
    altexpresion2                  shift and go to state 148
    empty                          shift and go to state 149

state 115

    (92) exp -> termino .
    (93) exp -> termino . altexp
    (94) altexp -> . SUM save_op termino altexp
    (95) altexp -> . SUBTRACT save_op termino altexp
    (96) altexp -> . empty
    (114) empty -> .

  ! reduce/reduce conflict for SAMEAS resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for AND resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for OR resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 92 (exp -> termino .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (exp -> termino .)
    SAMEAS          reduce using rule 92 (exp -> termino .)
    BIGGERTHAN      reduce using rule 92 (exp -> termino .)
    BIGGEREQUALSTHAN reduce using rule 92 (exp -> termino .)
    SMALLTHAN       reduce using rule 92 (exp -> termino .)
    SMALLEQUALSTHAN reduce using rule 92 (exp -> termino .)
    DIFFERENTTHAN   reduce using rule 92 (exp -> termino .)
    AND             reduce using rule 92 (exp -> termino .)
    OR              reduce using rule 92 (exp -> termino .)
    SEMICOLON       reduce using rule 92 (exp -> termino .)
    CLOSEBRACKET    reduce using rule 92 (exp -> termino .)
    CLOSEPAREN      reduce using rule 92 (exp -> termino .)
    COMMA           reduce using rule 92 (exp -> termino .)
    SUM             shift and go to state 159
    SUBTRACT        shift and go to state 160

  ! SAMEAS          [ reduce using rule 114 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 114 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 114 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 114 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 114 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 114 (empty -> .) ]
  ! AND             [ reduce using rule 114 (empty -> .) ]
  ! OR              [ reduce using rule 114 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 114 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 114 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 114 (empty -> .) ]
  ! COMMA           [ reduce using rule 114 (empty -> .) ]

    altexp                         shift and go to state 158
    empty                          shift and go to state 161

state 116

    (97) termino -> factor .
    (98) termino -> factor . alttermino
    (99) alttermino -> . TIMES save_op factor alttermino
    (100) alttermino -> . DIV save_op factor alttermino
    (101) alttermino -> . empty
    (114) empty -> .

  ! reduce/reduce conflict for SUM resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for SUBTRACT resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for SAMEAS resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 97 (termino -> factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 97 (termino -> factor .)
    SUM             reduce using rule 97 (termino -> factor .)
    SUBTRACT        reduce using rule 97 (termino -> factor .)
    SAMEAS          reduce using rule 97 (termino -> factor .)
    BIGGERTHAN      reduce using rule 97 (termino -> factor .)
    BIGGEREQUALSTHAN reduce using rule 97 (termino -> factor .)
    SMALLTHAN       reduce using rule 97 (termino -> factor .)
    SMALLEQUALSTHAN reduce using rule 97 (termino -> factor .)
    DIFFERENTTHAN   reduce using rule 97 (termino -> factor .)
    AND             reduce using rule 97 (termino -> factor .)
    OR              reduce using rule 97 (termino -> factor .)
    SEMICOLON       reduce using rule 97 (termino -> factor .)
    CLOSEBRACKET    reduce using rule 97 (termino -> factor .)
    CLOSEPAREN      reduce using rule 97 (termino -> factor .)
    COMMA           reduce using rule 97 (termino -> factor .)
    TIMES           shift and go to state 163
    DIV             shift and go to state 164

  ! SUM             [ reduce using rule 114 (empty -> .) ]
  ! SUBTRACT        [ reduce using rule 114 (empty -> .) ]
  ! SAMEAS          [ reduce using rule 114 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 114 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 114 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 114 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 114 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 114 (empty -> .) ]
  ! AND             [ reduce using rule 114 (empty -> .) ]
  ! OR              [ reduce using rule 114 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 114 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 114 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 114 (empty -> .) ]
  ! COMMA           [ reduce using rule 114 (empty -> .) ]

    alttermino                     shift and go to state 162
    empty                          shift and go to state 165

state 117

    (106) factor -> OPENPAREN . save_op expresion CLOSEPAREN save_op
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 166

state 118

    (107) factor -> varcall .

    TIMES           reduce using rule 107 (factor -> varcall .)
    DIV             reduce using rule 107 (factor -> varcall .)
    SUM             reduce using rule 107 (factor -> varcall .)
    SUBTRACT        reduce using rule 107 (factor -> varcall .)
    SAMEAS          reduce using rule 107 (factor -> varcall .)
    BIGGERTHAN      reduce using rule 107 (factor -> varcall .)
    BIGGEREQUALSTHAN reduce using rule 107 (factor -> varcall .)
    SMALLTHAN       reduce using rule 107 (factor -> varcall .)
    SMALLEQUALSTHAN reduce using rule 107 (factor -> varcall .)
    DIFFERENTTHAN   reduce using rule 107 (factor -> varcall .)
    AND             reduce using rule 107 (factor -> varcall .)
    OR              reduce using rule 107 (factor -> varcall .)
    SEMICOLON       reduce using rule 107 (factor -> varcall .)
    CLOSEBRACKET    reduce using rule 107 (factor -> varcall .)
    CLOSEPAREN      reduce using rule 107 (factor -> varcall .)
    COMMA           reduce using rule 107 (factor -> varcall .)


state 119

    (67) varcall -> varcte . save_const
    (135) save_const -> .

    TIMES           reduce using rule 135 (save_const -> .)
    DIV             reduce using rule 135 (save_const -> .)
    SUM             reduce using rule 135 (save_const -> .)
    SUBTRACT        reduce using rule 135 (save_const -> .)
    SAMEAS          reduce using rule 135 (save_const -> .)
    BIGGERTHAN      reduce using rule 135 (save_const -> .)
    BIGGEREQUALSTHAN reduce using rule 135 (save_const -> .)
    SMALLTHAN       reduce using rule 135 (save_const -> .)
    SMALLEQUALSTHAN reduce using rule 135 (save_const -> .)
    DIFFERENTTHAN   reduce using rule 135 (save_const -> .)
    AND             reduce using rule 135 (save_const -> .)
    OR              reduce using rule 135 (save_const -> .)
    SEMICOLON       reduce using rule 135 (save_const -> .)
    CLOSEBRACKET    reduce using rule 135 (save_const -> .)
    CLOSEPAREN      reduce using rule 135 (save_const -> .)
    COMMA           reduce using rule 135 (save_const -> .)

    save_const                     shift and go to state 167

state 120

    (68) varcall -> varcomplicated . save_comp
    (136) save_comp -> .

    TIMES           reduce using rule 136 (save_comp -> .)
    DIV             reduce using rule 136 (save_comp -> .)
    SUM             reduce using rule 136 (save_comp -> .)
    SUBTRACT        reduce using rule 136 (save_comp -> .)
    SAMEAS          reduce using rule 136 (save_comp -> .)
    BIGGERTHAN      reduce using rule 136 (save_comp -> .)
    BIGGEREQUALSTHAN reduce using rule 136 (save_comp -> .)
    SMALLTHAN       reduce using rule 136 (save_comp -> .)
    SMALLEQUALSTHAN reduce using rule 136 (save_comp -> .)
    DIFFERENTTHAN   reduce using rule 136 (save_comp -> .)
    AND             reduce using rule 136 (save_comp -> .)
    OR              reduce using rule 136 (save_comp -> .)
    SEMICOLON       reduce using rule 136 (save_comp -> .)
    CLOSEBRACKET    reduce using rule 136 (save_comp -> .)
    CLOSEPAREN      reduce using rule 136 (save_comp -> .)
    COMMA           reduce using rule 136 (save_comp -> .)

    save_comp                      shift and go to state 168

state 121

    (69) varcte -> TRUE .

    TIMES           reduce using rule 69 (varcte -> TRUE .)
    DIV             reduce using rule 69 (varcte -> TRUE .)
    SUM             reduce using rule 69 (varcte -> TRUE .)
    SUBTRACT        reduce using rule 69 (varcte -> TRUE .)
    SAMEAS          reduce using rule 69 (varcte -> TRUE .)
    BIGGERTHAN      reduce using rule 69 (varcte -> TRUE .)
    BIGGEREQUALSTHAN reduce using rule 69 (varcte -> TRUE .)
    SMALLTHAN       reduce using rule 69 (varcte -> TRUE .)
    SMALLEQUALSTHAN reduce using rule 69 (varcte -> TRUE .)
    DIFFERENTTHAN   reduce using rule 69 (varcte -> TRUE .)
    AND             reduce using rule 69 (varcte -> TRUE .)
    OR              reduce using rule 69 (varcte -> TRUE .)
    SEMICOLON       reduce using rule 69 (varcte -> TRUE .)
    CLOSEBRACKET    reduce using rule 69 (varcte -> TRUE .)
    CLOSEPAREN      reduce using rule 69 (varcte -> TRUE .)
    COMMA           reduce using rule 69 (varcte -> TRUE .)


state 122

    (70) varcte -> FALSE .

    TIMES           reduce using rule 70 (varcte -> FALSE .)
    DIV             reduce using rule 70 (varcte -> FALSE .)
    SUM             reduce using rule 70 (varcte -> FALSE .)
    SUBTRACT        reduce using rule 70 (varcte -> FALSE .)
    SAMEAS          reduce using rule 70 (varcte -> FALSE .)
    BIGGERTHAN      reduce using rule 70 (varcte -> FALSE .)
    BIGGEREQUALSTHAN reduce using rule 70 (varcte -> FALSE .)
    SMALLTHAN       reduce using rule 70 (varcte -> FALSE .)
    SMALLEQUALSTHAN reduce using rule 70 (varcte -> FALSE .)
    DIFFERENTTHAN   reduce using rule 70 (varcte -> FALSE .)
    AND             reduce using rule 70 (varcte -> FALSE .)
    OR              reduce using rule 70 (varcte -> FALSE .)
    SEMICOLON       reduce using rule 70 (varcte -> FALSE .)
    CLOSEBRACKET    reduce using rule 70 (varcte -> FALSE .)
    CLOSEPAREN      reduce using rule 70 (varcte -> FALSE .)
    COMMA           reduce using rule 70 (varcte -> FALSE .)


state 123

    (71) varcte -> CTEFLOAT .

    TIMES           reduce using rule 71 (varcte -> CTEFLOAT .)
    DIV             reduce using rule 71 (varcte -> CTEFLOAT .)
    SUM             reduce using rule 71 (varcte -> CTEFLOAT .)
    SUBTRACT        reduce using rule 71 (varcte -> CTEFLOAT .)
    SAMEAS          reduce using rule 71 (varcte -> CTEFLOAT .)
    BIGGERTHAN      reduce using rule 71 (varcte -> CTEFLOAT .)
    BIGGEREQUALSTHAN reduce using rule 71 (varcte -> CTEFLOAT .)
    SMALLTHAN       reduce using rule 71 (varcte -> CTEFLOAT .)
    SMALLEQUALSTHAN reduce using rule 71 (varcte -> CTEFLOAT .)
    DIFFERENTTHAN   reduce using rule 71 (varcte -> CTEFLOAT .)
    AND             reduce using rule 71 (varcte -> CTEFLOAT .)
    OR              reduce using rule 71 (varcte -> CTEFLOAT .)
    SEMICOLON       reduce using rule 71 (varcte -> CTEFLOAT .)
    CLOSEBRACKET    reduce using rule 71 (varcte -> CTEFLOAT .)
    CLOSEPAREN      reduce using rule 71 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 71 (varcte -> CTEFLOAT .)


state 124

    (72) varcte -> CTESTRING .

    TIMES           reduce using rule 72 (varcte -> CTESTRING .)
    DIV             reduce using rule 72 (varcte -> CTESTRING .)
    SUM             reduce using rule 72 (varcte -> CTESTRING .)
    SUBTRACT        reduce using rule 72 (varcte -> CTESTRING .)
    SAMEAS          reduce using rule 72 (varcte -> CTESTRING .)
    BIGGERTHAN      reduce using rule 72 (varcte -> CTESTRING .)
    BIGGEREQUALSTHAN reduce using rule 72 (varcte -> CTESTRING .)
    SMALLTHAN       reduce using rule 72 (varcte -> CTESTRING .)
    SMALLEQUALSTHAN reduce using rule 72 (varcte -> CTESTRING .)
    DIFFERENTTHAN   reduce using rule 72 (varcte -> CTESTRING .)
    AND             reduce using rule 72 (varcte -> CTESTRING .)
    OR              reduce using rule 72 (varcte -> CTESTRING .)
    SEMICOLON       reduce using rule 72 (varcte -> CTESTRING .)
    CLOSEBRACKET    reduce using rule 72 (varcte -> CTESTRING .)
    CLOSEPAREN      reduce using rule 72 (varcte -> CTESTRING .)
    COMMA           reduce using rule 72 (varcte -> CTESTRING .)


state 125

    (73) varcte -> CTEINT .

    TIMES           reduce using rule 73 (varcte -> CTEINT .)
    DIV             reduce using rule 73 (varcte -> CTEINT .)
    SUM             reduce using rule 73 (varcte -> CTEINT .)
    SUBTRACT        reduce using rule 73 (varcte -> CTEINT .)
    SAMEAS          reduce using rule 73 (varcte -> CTEINT .)
    BIGGERTHAN      reduce using rule 73 (varcte -> CTEINT .)
    BIGGEREQUALSTHAN reduce using rule 73 (varcte -> CTEINT .)
    SMALLTHAN       reduce using rule 73 (varcte -> CTEINT .)
    SMALLEQUALSTHAN reduce using rule 73 (varcte -> CTEINT .)
    DIFFERENTTHAN   reduce using rule 73 (varcte -> CTEINT .)
    AND             reduce using rule 73 (varcte -> CTEINT .)
    OR              reduce using rule 73 (varcte -> CTEINT .)
    SEMICOLON       reduce using rule 73 (varcte -> CTEINT .)
    CLOSEBRACKET    reduce using rule 73 (varcte -> CTEINT .)
    CLOSEPAREN      reduce using rule 73 (varcte -> CTEINT .)
    COMMA           reduce using rule 73 (varcte -> CTEINT .)


state 126

    (74) varcomplicated -> varcomp1 .

    TIMES           reduce using rule 74 (varcomplicated -> varcomp1 .)
    DIV             reduce using rule 74 (varcomplicated -> varcomp1 .)
    SUM             reduce using rule 74 (varcomplicated -> varcomp1 .)
    SUBTRACT        reduce using rule 74 (varcomplicated -> varcomp1 .)
    SAMEAS          reduce using rule 74 (varcomplicated -> varcomp1 .)
    BIGGERTHAN      reduce using rule 74 (varcomplicated -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 74 (varcomplicated -> varcomp1 .)
    SMALLTHAN       reduce using rule 74 (varcomplicated -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 74 (varcomplicated -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 74 (varcomplicated -> varcomp1 .)
    AND             reduce using rule 74 (varcomplicated -> varcomp1 .)
    OR              reduce using rule 74 (varcomplicated -> varcomp1 .)
    SEMICOLON       reduce using rule 74 (varcomplicated -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 74 (varcomplicated -> varcomp1 .)
    CLOSEPAREN      reduce using rule 74 (varcomplicated -> varcomp1 .)
    COMMA           reduce using rule 74 (varcomplicated -> varcomp1 .)


state 127

    (75) varcomplicated -> callfunc .

    TIMES           reduce using rule 75 (varcomplicated -> callfunc .)
    DIV             reduce using rule 75 (varcomplicated -> callfunc .)
    SUM             reduce using rule 75 (varcomplicated -> callfunc .)
    SUBTRACT        reduce using rule 75 (varcomplicated -> callfunc .)
    SAMEAS          reduce using rule 75 (varcomplicated -> callfunc .)
    BIGGERTHAN      reduce using rule 75 (varcomplicated -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 75 (varcomplicated -> callfunc .)
    SMALLTHAN       reduce using rule 75 (varcomplicated -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 75 (varcomplicated -> callfunc .)
    DIFFERENTTHAN   reduce using rule 75 (varcomplicated -> callfunc .)
    AND             reduce using rule 75 (varcomplicated -> callfunc .)
    OR              reduce using rule 75 (varcomplicated -> callfunc .)
    SEMICOLON       reduce using rule 75 (varcomplicated -> callfunc .)
    CLOSEBRACKET    reduce using rule 75 (varcomplicated -> callfunc .)
    CLOSEPAREN      reduce using rule 75 (varcomplicated -> callfunc .)
    COMMA           reduce using rule 75 (varcomplicated -> callfunc .)


state 128

    (76) varcomp1 -> ID . varcomp2
    (45) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (77) varcomp2 -> . DOT varcomp3
    (78) varcomp2 -> . array empty
    (131) check_exists_func -> .
    (30) array -> . OPENBRACKET expresion CLOSEBRACKET empty_pv array2
    (31) array -> . empty
    (114) empty -> .

    DOT             shift and go to state 170
    OPENPAREN       reduce using rule 131 (check_exists_func -> .)
    OPENBRACKET     shift and go to state 108
    TIMES           reduce using rule 114 (empty -> .)
    DIV             reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    SUBTRACT        reduce using rule 114 (empty -> .)
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    varcomp2                       shift and go to state 169
    check_exists_func              shift and go to state 107
    array                          shift and go to state 171
    empty                          shift and go to state 109

state 129

    (62) voidcall -> callfunc SEMICOLON .

    CLOSECURLY      reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    VAR             reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    ID              reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    IF              reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    OUTPUT          reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    INPUT           reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    RETURN          reduce using rule 62 (voidcall -> callfunc SEMICOLON .)
    WHILE           reduce using rule 62 (voidcall -> callfunc SEMICOLON .)


state 130

    (64) while -> WHILE add_stack_jump . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    OPENPAREN       shift and go to state 172


state 131

    (15) alt2class -> constructor CLOSECURLY SEMICOLON . remove_class_scope
    (118) remove_class_scope -> .

    CLASS           reduce using rule 118 (remove_class_scope -> .)
    VAR             reduce using rule 118 (remove_class_scope -> .)
    FUNC            reduce using rule 118 (remove_class_scope -> .)
    MAIN            reduce using rule 118 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 173

state 132

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN . altconst store_params CLOSEPAREN OPENCURLY alt2const
    (17) altconst -> . params
    (18) altconst -> . empty
    (42) params -> . ID TWODOTS type save_params altparams
    (114) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 114 (empty -> .)

    altconst                       shift and go to state 174
    params                         shift and go to state 175
    empty                          shift and go to state 176

state 133

    (28) dec_array2 -> OPENBRACKET CTEINT . CLOSEBRACKET

    CLOSEBRACKET    shift and go to state 177


state 134

    (42) params -> ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 42 (params -> ID TWODOTS type save_params altparams .)


state 135

    (43) altparams -> COMMA . ID TWODOTS type save_params altparams

    ID              shift and go to state 178


state 136

    (44) altparams -> empty .

    CLOSEPAREN      reduce using rule 44 (altparams -> empty .)


state 137

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params . OPENCURLY alt3func

    OPENCURLY       shift and go to state 179


state 138

    (112) assign -> ID array save_comp . EQUALS save_op expresion SEMICOLON

    EQUALS          shift and go to state 180


state 139

    (63) voidcall -> ID . DOT voidcall
    (45) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (131) check_exists_func -> .

    DOT             shift and go to state 106
    OPENPAREN       reduce using rule 131 (check_exists_func -> .)

    check_exists_func              shift and go to state 107

state 140

    (63) voidcall -> ID DOT voidcall .

    CLOSECURLY      reduce using rule 63 (voidcall -> ID DOT voidcall .)
    VAR             reduce using rule 63 (voidcall -> ID DOT voidcall .)
    ID              reduce using rule 63 (voidcall -> ID DOT voidcall .)
    IF              reduce using rule 63 (voidcall -> ID DOT voidcall .)
    OUTPUT          reduce using rule 63 (voidcall -> ID DOT voidcall .)
    INPUT           reduce using rule 63 (voidcall -> ID DOT voidcall .)
    RETURN          reduce using rule 63 (voidcall -> ID DOT voidcall .)
    WHILE           reduce using rule 63 (voidcall -> ID DOT voidcall .)


state 141

    (45) callfunc -> ID check_exists_func add_false_stack . OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 181


state 142

    (30) array -> OPENBRACKET expresion . CLOSEBRACKET empty_pv array2

    CLOSEBRACKET    shift and go to state 182


state 143

    (108) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    CLOSEPAREN      shift and go to state 183


state 144

    (103) write -> OUTPUT save_op OPENPAREN . expresion altwrite
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 184
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 145

    (102) read -> INPUT save_op OPENPAREN . ID save_comp CLOSEPAREN SEMICOLON

    ID              shift and go to state 185


state 146

    (113) return -> RETURN expresion generate_quad_ret . SEMICOLON add_return_exists

    SEMICOLON       shift and go to state 186


state 147

    (81) expresion -> exp altexpresion .

    SEMICOLON       reduce using rule 81 (expresion -> exp altexpresion .)
    CLOSEBRACKET    reduce using rule 81 (expresion -> exp altexpresion .)
    CLOSEPAREN      reduce using rule 81 (expresion -> exp altexpresion .)
    COMMA           reduce using rule 81 (expresion -> exp altexpresion .)


state 148

    (82) altexpresion -> altexpresion2 . save_op exp
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 187

state 149

    (83) altexpresion -> empty .

    SEMICOLON       reduce using rule 83 (altexpresion -> empty .)
    CLOSEBRACKET    reduce using rule 83 (altexpresion -> empty .)
    CLOSEPAREN      reduce using rule 83 (altexpresion -> empty .)
    COMMA           reduce using rule 83 (altexpresion -> empty .)


state 150

    (84) altexpresion2 -> SAMEAS .

    OPENPAREN       reduce using rule 84 (altexpresion2 -> SAMEAS .)
    TRUE            reduce using rule 84 (altexpresion2 -> SAMEAS .)
    FALSE           reduce using rule 84 (altexpresion2 -> SAMEAS .)
    CTEFLOAT        reduce using rule 84 (altexpresion2 -> SAMEAS .)
    CTESTRING       reduce using rule 84 (altexpresion2 -> SAMEAS .)
    CTEINT          reduce using rule 84 (altexpresion2 -> SAMEAS .)
    ID              reduce using rule 84 (altexpresion2 -> SAMEAS .)


state 151

    (85) altexpresion2 -> BIGGERTHAN .

    OPENPAREN       reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    TRUE            reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    FALSE           reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    CTEFLOAT        reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    CTESTRING       reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    CTEINT          reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)
    ID              reduce using rule 85 (altexpresion2 -> BIGGERTHAN .)


state 152

    (86) altexpresion2 -> BIGGEREQUALSTHAN .

    OPENPAREN       reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    TRUE            reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    FALSE           reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEFLOAT        reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTESTRING       reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEINT          reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)
    ID              reduce using rule 86 (altexpresion2 -> BIGGEREQUALSTHAN .)


state 153

    (87) altexpresion2 -> SMALLTHAN .

    OPENPAREN       reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    TRUE            reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    FALSE           reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    CTEFLOAT        reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    CTESTRING       reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    CTEINT          reduce using rule 87 (altexpresion2 -> SMALLTHAN .)
    ID              reduce using rule 87 (altexpresion2 -> SMALLTHAN .)


state 154

    (88) altexpresion2 -> SMALLEQUALSTHAN .

    OPENPAREN       reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    TRUE            reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    FALSE           reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEFLOAT        reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTESTRING       reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEINT          reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)
    ID              reduce using rule 88 (altexpresion2 -> SMALLEQUALSTHAN .)


state 155

    (89) altexpresion2 -> DIFFERENTTHAN .

    OPENPAREN       reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    TRUE            reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    FALSE           reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    CTEFLOAT        reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    CTESTRING       reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    CTEINT          reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)
    ID              reduce using rule 89 (altexpresion2 -> DIFFERENTTHAN .)


state 156

    (90) altexpresion2 -> AND .

    OPENPAREN       reduce using rule 90 (altexpresion2 -> AND .)
    TRUE            reduce using rule 90 (altexpresion2 -> AND .)
    FALSE           reduce using rule 90 (altexpresion2 -> AND .)
    CTEFLOAT        reduce using rule 90 (altexpresion2 -> AND .)
    CTESTRING       reduce using rule 90 (altexpresion2 -> AND .)
    CTEINT          reduce using rule 90 (altexpresion2 -> AND .)
    ID              reduce using rule 90 (altexpresion2 -> AND .)


state 157

    (91) altexpresion2 -> OR .

    OPENPAREN       reduce using rule 91 (altexpresion2 -> OR .)
    TRUE            reduce using rule 91 (altexpresion2 -> OR .)
    FALSE           reduce using rule 91 (altexpresion2 -> OR .)
    CTEFLOAT        reduce using rule 91 (altexpresion2 -> OR .)
    CTESTRING       reduce using rule 91 (altexpresion2 -> OR .)
    CTEINT          reduce using rule 91 (altexpresion2 -> OR .)
    ID              reduce using rule 91 (altexpresion2 -> OR .)


state 158

    (93) exp -> termino altexp .

    SAMEAS          reduce using rule 93 (exp -> termino altexp .)
    BIGGERTHAN      reduce using rule 93 (exp -> termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 93 (exp -> termino altexp .)
    SMALLTHAN       reduce using rule 93 (exp -> termino altexp .)
    SMALLEQUALSTHAN reduce using rule 93 (exp -> termino altexp .)
    DIFFERENTTHAN   reduce using rule 93 (exp -> termino altexp .)
    AND             reduce using rule 93 (exp -> termino altexp .)
    OR              reduce using rule 93 (exp -> termino altexp .)
    SEMICOLON       reduce using rule 93 (exp -> termino altexp .)
    CLOSEBRACKET    reduce using rule 93 (exp -> termino altexp .)
    CLOSEPAREN      reduce using rule 93 (exp -> termino altexp .)
    COMMA           reduce using rule 93 (exp -> termino altexp .)


state 159

    (94) altexp -> SUM . save_op termino altexp
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 188

state 160

    (95) altexp -> SUBTRACT . save_op termino altexp
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 189

state 161

    (96) altexp -> empty .

    SAMEAS          reduce using rule 96 (altexp -> empty .)
    BIGGERTHAN      reduce using rule 96 (altexp -> empty .)
    BIGGEREQUALSTHAN reduce using rule 96 (altexp -> empty .)
    SMALLTHAN       reduce using rule 96 (altexp -> empty .)
    SMALLEQUALSTHAN reduce using rule 96 (altexp -> empty .)
    DIFFERENTTHAN   reduce using rule 96 (altexp -> empty .)
    AND             reduce using rule 96 (altexp -> empty .)
    OR              reduce using rule 96 (altexp -> empty .)
    SEMICOLON       reduce using rule 96 (altexp -> empty .)
    CLOSEBRACKET    reduce using rule 96 (altexp -> empty .)
    CLOSEPAREN      reduce using rule 96 (altexp -> empty .)
    COMMA           reduce using rule 96 (altexp -> empty .)


state 162

    (98) termino -> factor alttermino .

    SUM             reduce using rule 98 (termino -> factor alttermino .)
    SUBTRACT        reduce using rule 98 (termino -> factor alttermino .)
    SAMEAS          reduce using rule 98 (termino -> factor alttermino .)
    BIGGERTHAN      reduce using rule 98 (termino -> factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 98 (termino -> factor alttermino .)
    SMALLTHAN       reduce using rule 98 (termino -> factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 98 (termino -> factor alttermino .)
    DIFFERENTTHAN   reduce using rule 98 (termino -> factor alttermino .)
    AND             reduce using rule 98 (termino -> factor alttermino .)
    OR              reduce using rule 98 (termino -> factor alttermino .)
    SEMICOLON       reduce using rule 98 (termino -> factor alttermino .)
    CLOSEBRACKET    reduce using rule 98 (termino -> factor alttermino .)
    CLOSEPAREN      reduce using rule 98 (termino -> factor alttermino .)
    COMMA           reduce using rule 98 (termino -> factor alttermino .)


state 163

    (99) alttermino -> TIMES . save_op factor alttermino
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 190

state 164

    (100) alttermino -> DIV . save_op factor alttermino
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 191

state 165

    (101) alttermino -> empty .

    SUM             reduce using rule 101 (alttermino -> empty .)
    SUBTRACT        reduce using rule 101 (alttermino -> empty .)
    SAMEAS          reduce using rule 101 (alttermino -> empty .)
    BIGGERTHAN      reduce using rule 101 (alttermino -> empty .)
    BIGGEREQUALSTHAN reduce using rule 101 (alttermino -> empty .)
    SMALLTHAN       reduce using rule 101 (alttermino -> empty .)
    SMALLEQUALSTHAN reduce using rule 101 (alttermino -> empty .)
    DIFFERENTTHAN   reduce using rule 101 (alttermino -> empty .)
    AND             reduce using rule 101 (alttermino -> empty .)
    OR              reduce using rule 101 (alttermino -> empty .)
    SEMICOLON       reduce using rule 101 (alttermino -> empty .)
    CLOSEBRACKET    reduce using rule 101 (alttermino -> empty .)
    CLOSEPAREN      reduce using rule 101 (alttermino -> empty .)
    COMMA           reduce using rule 101 (alttermino -> empty .)


state 166

    (106) factor -> OPENPAREN save_op . expresion CLOSEPAREN save_op
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 192
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 167

    (67) varcall -> varcte save_const .

    TIMES           reduce using rule 67 (varcall -> varcte save_const .)
    DIV             reduce using rule 67 (varcall -> varcte save_const .)
    SUM             reduce using rule 67 (varcall -> varcte save_const .)
    SUBTRACT        reduce using rule 67 (varcall -> varcte save_const .)
    SAMEAS          reduce using rule 67 (varcall -> varcte save_const .)
    BIGGERTHAN      reduce using rule 67 (varcall -> varcte save_const .)
    BIGGEREQUALSTHAN reduce using rule 67 (varcall -> varcte save_const .)
    SMALLTHAN       reduce using rule 67 (varcall -> varcte save_const .)
    SMALLEQUALSTHAN reduce using rule 67 (varcall -> varcte save_const .)
    DIFFERENTTHAN   reduce using rule 67 (varcall -> varcte save_const .)
    AND             reduce using rule 67 (varcall -> varcte save_const .)
    OR              reduce using rule 67 (varcall -> varcte save_const .)
    SEMICOLON       reduce using rule 67 (varcall -> varcte save_const .)
    CLOSEBRACKET    reduce using rule 67 (varcall -> varcte save_const .)
    CLOSEPAREN      reduce using rule 67 (varcall -> varcte save_const .)
    COMMA           reduce using rule 67 (varcall -> varcte save_const .)


state 168

    (68) varcall -> varcomplicated save_comp .

    TIMES           reduce using rule 68 (varcall -> varcomplicated save_comp .)
    DIV             reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SUM             reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SUBTRACT        reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SAMEAS          reduce using rule 68 (varcall -> varcomplicated save_comp .)
    BIGGERTHAN      reduce using rule 68 (varcall -> varcomplicated save_comp .)
    BIGGEREQUALSTHAN reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SMALLTHAN       reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SMALLEQUALSTHAN reduce using rule 68 (varcall -> varcomplicated save_comp .)
    DIFFERENTTHAN   reduce using rule 68 (varcall -> varcomplicated save_comp .)
    AND             reduce using rule 68 (varcall -> varcomplicated save_comp .)
    OR              reduce using rule 68 (varcall -> varcomplicated save_comp .)
    SEMICOLON       reduce using rule 68 (varcall -> varcomplicated save_comp .)
    CLOSEBRACKET    reduce using rule 68 (varcall -> varcomplicated save_comp .)
    CLOSEPAREN      reduce using rule 68 (varcall -> varcomplicated save_comp .)
    COMMA           reduce using rule 68 (varcall -> varcomplicated save_comp .)


state 169

    (76) varcomp1 -> ID varcomp2 .

    TIMES           reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    DIV             reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SUM             reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SUBTRACT        reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SAMEAS          reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    BIGGERTHAN      reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    BIGGEREQUALSTHAN reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SMALLTHAN       reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SMALLEQUALSTHAN reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    DIFFERENTTHAN   reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    AND             reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    OR              reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    SEMICOLON       reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    CLOSEBRACKET    reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    CLOSEPAREN      reduce using rule 76 (varcomp1 -> ID varcomp2 .)
    COMMA           reduce using rule 76 (varcomp1 -> ID varcomp2 .)


state 170

    (77) varcomp2 -> DOT . varcomp3
    (79) varcomp3 -> . varcomp1
    (80) varcomp3 -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 128

    varcomp3                       shift and go to state 193
    varcomp1                       shift and go to state 194
    callfunc                       shift and go to state 195

state 171

    (78) varcomp2 -> array . empty
    (114) empty -> .

    TIMES           reduce using rule 114 (empty -> .)
    DIV             reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    SUBTRACT        reduce using rule 114 (empty -> .)
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    empty                          shift and go to state 196

state 172

    (64) while -> WHILE add_stack_jump OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 197
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 173

    (15) alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .

    CLASS           reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    VAR             reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    FUNC            reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    MAIN            reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)


state 174

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst . store_params CLOSEPAREN OPENCURLY alt2const
    (123) store_params -> .

    CLOSEPAREN      reduce using rule 123 (store_params -> .)

    store_params                   shift and go to state 198

state 175

    (17) altconst -> params .

    CLOSEPAREN      reduce using rule 17 (altconst -> params .)


state 176

    (18) altconst -> empty .

    CLOSEPAREN      reduce using rule 18 (altconst -> empty .)


state 177

    (28) dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .

    COMMA           reduce using rule 28 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)
    TWODOTS         reduce using rule 28 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)


state 178

    (43) altparams -> COMMA ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 199


state 179

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY . alt3func
    (39) alt3func -> . var alt3func
    (40) alt3func -> . estatuto alt3func
    (41) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 203
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt3func                       shift and go to state 200
    var                            shift and go to state 201
    estatuto                       shift and go to state 202
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 180

    (112) assign -> ID array save_comp EQUALS . save_op expresion SEMICOLON
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 204

state 181

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN . altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (46) altcall -> . expresion generate_param_quad alt2call
    (47) altcall -> . empty
    (81) expresion -> . exp altexpresion
    (114) empty -> .
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 114 (empty -> .)
    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    altcall                        shift and go to state 205
    expresion                      shift and go to state 206
    empty                          shift and go to state 207
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 182

    (30) array -> OPENBRACKET expresion CLOSEBRACKET . empty_pv array2
    (132) empty_pv -> .

    OPENBRACKET     reduce using rule 132 (empty_pv -> .)
    EQUALS          reduce using rule 132 (empty_pv -> .)
    TIMES           reduce using rule 132 (empty_pv -> .)
    DIV             reduce using rule 132 (empty_pv -> .)
    SUM             reduce using rule 132 (empty_pv -> .)
    SUBTRACT        reduce using rule 132 (empty_pv -> .)
    SAMEAS          reduce using rule 132 (empty_pv -> .)
    BIGGERTHAN      reduce using rule 132 (empty_pv -> .)
    BIGGEREQUALSTHAN reduce using rule 132 (empty_pv -> .)
    SMALLTHAN       reduce using rule 132 (empty_pv -> .)
    SMALLEQUALSTHAN reduce using rule 132 (empty_pv -> .)
    DIFFERENTTHAN   reduce using rule 132 (empty_pv -> .)
    AND             reduce using rule 132 (empty_pv -> .)
    OR              reduce using rule 132 (empty_pv -> .)
    SEMICOLON       reduce using rule 132 (empty_pv -> .)
    CLOSEBRACKET    reduce using rule 132 (empty_pv -> .)
    CLOSEPAREN      reduce using rule 132 (empty_pv -> .)
    COMMA           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 208

state 183

    (108) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (138) add_gotof -> .

    OPENCURLY       reduce using rule 138 (add_gotof -> .)

    add_gotof                      shift and go to state 209

state 184

    (103) write -> OUTPUT save_op OPENPAREN expresion . altwrite
    (104) altwrite -> . COMMA save_op expresion altwrite
    (105) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 211
    CLOSEPAREN      shift and go to state 212

    altwrite                       shift and go to state 210

state 185

    (102) read -> INPUT save_op OPENPAREN ID . save_comp CLOSEPAREN SEMICOLON
    (136) save_comp -> .

    CLOSEPAREN      reduce using rule 136 (save_comp -> .)

    save_comp                      shift and go to state 213

state 186

    (113) return -> RETURN expresion generate_quad_ret SEMICOLON . add_return_exists
    (142) add_return_exists -> .

    CLOSECURLY      reduce using rule 142 (add_return_exists -> .)
    VAR             reduce using rule 142 (add_return_exists -> .)
    ID              reduce using rule 142 (add_return_exists -> .)
    IF              reduce using rule 142 (add_return_exists -> .)
    OUTPUT          reduce using rule 142 (add_return_exists -> .)
    INPUT           reduce using rule 142 (add_return_exists -> .)
    RETURN          reduce using rule 142 (add_return_exists -> .)
    WHILE           reduce using rule 142 (add_return_exists -> .)

    add_return_exists              shift and go to state 214

state 187

    (82) altexpresion -> altexpresion2 save_op . exp
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    exp                            shift and go to state 215
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 188

    (94) altexp -> SUM save_op . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    termino                        shift and go to state 216
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 189

    (95) altexp -> SUBTRACT save_op . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    termino                        shift and go to state 217
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 190

    (99) alttermino -> TIMES save_op . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    factor                         shift and go to state 218
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 191

    (100) alttermino -> DIV save_op . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    factor                         shift and go to state 219
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 192

    (106) factor -> OPENPAREN save_op expresion . CLOSEPAREN save_op

    CLOSEPAREN      shift and go to state 220


state 193

    (77) varcomp2 -> DOT varcomp3 .

    TIMES           reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    DIV             reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SUM             reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SUBTRACT        reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SAMEAS          reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    BIGGERTHAN      reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    BIGGEREQUALSTHAN reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SMALLTHAN       reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SMALLEQUALSTHAN reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    DIFFERENTTHAN   reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    AND             reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    OR              reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    SEMICOLON       reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    CLOSEBRACKET    reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    CLOSEPAREN      reduce using rule 77 (varcomp2 -> DOT varcomp3 .)
    COMMA           reduce using rule 77 (varcomp2 -> DOT varcomp3 .)


state 194

    (79) varcomp3 -> varcomp1 .

    TIMES           reduce using rule 79 (varcomp3 -> varcomp1 .)
    DIV             reduce using rule 79 (varcomp3 -> varcomp1 .)
    SUM             reduce using rule 79 (varcomp3 -> varcomp1 .)
    SUBTRACT        reduce using rule 79 (varcomp3 -> varcomp1 .)
    SAMEAS          reduce using rule 79 (varcomp3 -> varcomp1 .)
    BIGGERTHAN      reduce using rule 79 (varcomp3 -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 79 (varcomp3 -> varcomp1 .)
    SMALLTHAN       reduce using rule 79 (varcomp3 -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 79 (varcomp3 -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 79 (varcomp3 -> varcomp1 .)
    AND             reduce using rule 79 (varcomp3 -> varcomp1 .)
    OR              reduce using rule 79 (varcomp3 -> varcomp1 .)
    SEMICOLON       reduce using rule 79 (varcomp3 -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 79 (varcomp3 -> varcomp1 .)
    CLOSEPAREN      reduce using rule 79 (varcomp3 -> varcomp1 .)
    COMMA           reduce using rule 79 (varcomp3 -> varcomp1 .)


state 195

    (80) varcomp3 -> callfunc .

    TIMES           reduce using rule 80 (varcomp3 -> callfunc .)
    DIV             reduce using rule 80 (varcomp3 -> callfunc .)
    SUM             reduce using rule 80 (varcomp3 -> callfunc .)
    SUBTRACT        reduce using rule 80 (varcomp3 -> callfunc .)
    SAMEAS          reduce using rule 80 (varcomp3 -> callfunc .)
    BIGGERTHAN      reduce using rule 80 (varcomp3 -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 80 (varcomp3 -> callfunc .)
    SMALLTHAN       reduce using rule 80 (varcomp3 -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 80 (varcomp3 -> callfunc .)
    DIFFERENTTHAN   reduce using rule 80 (varcomp3 -> callfunc .)
    AND             reduce using rule 80 (varcomp3 -> callfunc .)
    OR              reduce using rule 80 (varcomp3 -> callfunc .)
    SEMICOLON       reduce using rule 80 (varcomp3 -> callfunc .)
    CLOSEBRACKET    reduce using rule 80 (varcomp3 -> callfunc .)
    CLOSEPAREN      reduce using rule 80 (varcomp3 -> callfunc .)
    COMMA           reduce using rule 80 (varcomp3 -> callfunc .)


state 196

    (78) varcomp2 -> array empty .

    TIMES           reduce using rule 78 (varcomp2 -> array empty .)
    DIV             reduce using rule 78 (varcomp2 -> array empty .)
    SUM             reduce using rule 78 (varcomp2 -> array empty .)
    SUBTRACT        reduce using rule 78 (varcomp2 -> array empty .)
    SAMEAS          reduce using rule 78 (varcomp2 -> array empty .)
    BIGGERTHAN      reduce using rule 78 (varcomp2 -> array empty .)
    BIGGEREQUALSTHAN reduce using rule 78 (varcomp2 -> array empty .)
    SMALLTHAN       reduce using rule 78 (varcomp2 -> array empty .)
    SMALLEQUALSTHAN reduce using rule 78 (varcomp2 -> array empty .)
    DIFFERENTTHAN   reduce using rule 78 (varcomp2 -> array empty .)
    AND             reduce using rule 78 (varcomp2 -> array empty .)
    OR              reduce using rule 78 (varcomp2 -> array empty .)
    SEMICOLON       reduce using rule 78 (varcomp2 -> array empty .)
    CLOSEBRACKET    reduce using rule 78 (varcomp2 -> array empty .)
    CLOSEPAREN      reduce using rule 78 (varcomp2 -> array empty .)
    COMMA           reduce using rule 78 (varcomp2 -> array empty .)


state 197

    (64) while -> WHILE add_stack_jump OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    CLOSEPAREN      shift and go to state 221


state 198

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params . CLOSEPAREN OPENCURLY alt2const

    CLOSEPAREN      shift and go to state 222


state 199

    (43) altparams -> COMMA ID TWODOTS . type save_params altparams
    (50) type -> . INT
    (51) type -> . FLOAT
    (52) type -> . STRING
    (53) type -> . ID
    (54) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 223

state 200

    (34) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .

    CLASS           reduce using rule 34 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    VAR             reduce using rule 34 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    FUNC            reduce using rule 34 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    MAIN            reduce using rule 34 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    CONSTRUCTOR     reduce using rule 34 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)


state 201

    (39) alt3func -> var . alt3func
    (39) alt3func -> . var alt3func
    (40) alt3func -> . estatuto alt3func
    (41) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 203
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 201
    alt3func                       shift and go to state 224
    estatuto                       shift and go to state 202
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 202

    (40) alt3func -> estatuto . alt3func
    (39) alt3func -> . var alt3func
    (40) alt3func -> . estatuto alt3func
    (41) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 203
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 202
    alt3func                       shift and go to state 225
    var                            shift and go to state 201
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 203

    (41) alt3func -> CLOSECURLY . remove_function_scope
    (124) remove_function_scope -> .

    CLASS           reduce using rule 124 (remove_function_scope -> .)
    VAR             reduce using rule 124 (remove_function_scope -> .)
    FUNC            reduce using rule 124 (remove_function_scope -> .)
    MAIN            reduce using rule 124 (remove_function_scope -> .)
    CONSTRUCTOR     reduce using rule 124 (remove_function_scope -> .)

    remove_function_scope          shift and go to state 226

state 204

    (112) assign -> ID array save_comp EQUALS save_op . expresion SEMICOLON
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 227
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 205

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall . check_params CLOSEPAREN end_false_stack generate_gosub
    (129) check_params -> .

    CLOSEPAREN      reduce using rule 129 (check_params -> .)

    check_params                   shift and go to state 228

state 206

    (46) altcall -> expresion . generate_param_quad alt2call
    (130) generate_param_quad -> .

    COMMA           reduce using rule 130 (generate_param_quad -> .)
    CLOSEPAREN      reduce using rule 130 (generate_param_quad -> .)

    generate_param_quad            shift and go to state 229

state 207

    (47) altcall -> empty .

    CLOSEPAREN      reduce using rule 47 (altcall -> empty .)


state 208

    (30) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv . array2
    (32) array2 -> . OPENBRACKET expresion CLOSEBRACKET empty_pv
    (33) array2 -> . empty
    (114) empty -> .

    OPENBRACKET     shift and go to state 230
    EQUALS          reduce using rule 114 (empty -> .)
    TIMES           reduce using rule 114 (empty -> .)
    DIV             reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    SUBTRACT        reduce using rule 114 (empty -> .)
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    array2                         shift and go to state 231
    empty                          shift and go to state 232

state 209

    (108) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition add_end_if
    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 233


state 210

    (103) write -> OUTPUT save_op OPENPAREN expresion altwrite .

    CLOSECURLY      reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    VAR             reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    ID              reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    IF              reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    OUTPUT          reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    INPUT           reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    RETURN          reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    WHILE           reduce using rule 103 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)


state 211

    (104) altwrite -> COMMA . save_op expresion altwrite
    (137) save_op -> .

    OPENPAREN       reduce using rule 137 (save_op -> .)
    TRUE            reduce using rule 137 (save_op -> .)
    FALSE           reduce using rule 137 (save_op -> .)
    CTEFLOAT        reduce using rule 137 (save_op -> .)
    CTESTRING       reduce using rule 137 (save_op -> .)
    CTEINT          reduce using rule 137 (save_op -> .)
    ID              reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 234

state 212

    (105) altwrite -> CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 235


state 213

    (102) read -> INPUT save_op OPENPAREN ID save_comp . CLOSEPAREN SEMICOLON

    CLOSEPAREN      shift and go to state 236


state 214

    (113) return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .

    CLOSECURLY      reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    VAR             reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    ID              reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    IF              reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    OUTPUT          reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    INPUT           reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    RETURN          reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    WHILE           reduce using rule 113 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)


state 215

    (82) altexpresion -> altexpresion2 save_op exp .

    SEMICOLON       reduce using rule 82 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEBRACKET    reduce using rule 82 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEPAREN      reduce using rule 82 (altexpresion -> altexpresion2 save_op exp .)
    COMMA           reduce using rule 82 (altexpresion -> altexpresion2 save_op exp .)


state 216

    (94) altexp -> SUM save_op termino . altexp
    (94) altexp -> . SUM save_op termino altexp
    (95) altexp -> . SUBTRACT save_op termino altexp
    (96) altexp -> . empty
    (114) empty -> .

    SUM             shift and go to state 159
    SUBTRACT        shift and go to state 160
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    altexp                         shift and go to state 237
    empty                          shift and go to state 161

state 217

    (95) altexp -> SUBTRACT save_op termino . altexp
    (94) altexp -> . SUM save_op termino altexp
    (95) altexp -> . SUBTRACT save_op termino altexp
    (96) altexp -> . empty
    (114) empty -> .

    SUM             shift and go to state 159
    SUBTRACT        shift and go to state 160
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    altexp                         shift and go to state 238
    empty                          shift and go to state 161

state 218

    (99) alttermino -> TIMES save_op factor . alttermino
    (99) alttermino -> . TIMES save_op factor alttermino
    (100) alttermino -> . DIV save_op factor alttermino
    (101) alttermino -> . empty
    (114) empty -> .

    TIMES           shift and go to state 163
    DIV             shift and go to state 164
    SUM             reduce using rule 114 (empty -> .)
    SUBTRACT        reduce using rule 114 (empty -> .)
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    alttermino                     shift and go to state 239
    empty                          shift and go to state 165

state 219

    (100) alttermino -> DIV save_op factor . alttermino
    (99) alttermino -> . TIMES save_op factor alttermino
    (100) alttermino -> . DIV save_op factor alttermino
    (101) alttermino -> . empty
    (114) empty -> .

    TIMES           shift and go to state 163
    DIV             shift and go to state 164
    SUM             reduce using rule 114 (empty -> .)
    SUBTRACT        reduce using rule 114 (empty -> .)
    SAMEAS          reduce using rule 114 (empty -> .)
    BIGGERTHAN      reduce using rule 114 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 114 (empty -> .)
    SMALLTHAN       reduce using rule 114 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 114 (empty -> .)
    DIFFERENTTHAN   reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    CLOSEBRACKET    reduce using rule 114 (empty -> .)
    CLOSEPAREN      reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    alttermino                     shift and go to state 240
    empty                          shift and go to state 165

state 220

    (106) factor -> OPENPAREN save_op expresion CLOSEPAREN . save_op
    (137) save_op -> .

    TIMES           reduce using rule 137 (save_op -> .)
    DIV             reduce using rule 137 (save_op -> .)
    SUM             reduce using rule 137 (save_op -> .)
    SUBTRACT        reduce using rule 137 (save_op -> .)
    SAMEAS          reduce using rule 137 (save_op -> .)
    BIGGERTHAN      reduce using rule 137 (save_op -> .)
    BIGGEREQUALSTHAN reduce using rule 137 (save_op -> .)
    SMALLTHAN       reduce using rule 137 (save_op -> .)
    SMALLEQUALSTHAN reduce using rule 137 (save_op -> .)
    DIFFERENTTHAN   reduce using rule 137 (save_op -> .)
    AND             reduce using rule 137 (save_op -> .)
    OR              reduce using rule 137 (save_op -> .)
    SEMICOLON       reduce using rule 137 (save_op -> .)
    CLOSEBRACKET    reduce using rule 137 (save_op -> .)
    CLOSEPAREN      reduce using rule 137 (save_op -> .)
    COMMA           reduce using rule 137 (save_op -> .)

    save_op                        shift and go to state 241

state 221

    (64) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altwhile end_while
    (138) add_gotof -> .

    OPENCURLY       reduce using rule 138 (add_gotof -> .)

    add_gotof                      shift and go to state 242

state 222

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN . OPENCURLY alt2const

    OPENCURLY       shift and go to state 243


state 223

    (43) altparams -> COMMA ID TWODOTS type . save_params altparams
    (125) save_params -> .

    COMMA           reduce using rule 125 (save_params -> .)
    CLOSEPAREN      reduce using rule 125 (save_params -> .)

    save_params                    shift and go to state 244

state 224

    (39) alt3func -> var alt3func .

    CLASS           reduce using rule 39 (alt3func -> var alt3func .)
    VAR             reduce using rule 39 (alt3func -> var alt3func .)
    FUNC            reduce using rule 39 (alt3func -> var alt3func .)
    MAIN            reduce using rule 39 (alt3func -> var alt3func .)
    CONSTRUCTOR     reduce using rule 39 (alt3func -> var alt3func .)


state 225

    (40) alt3func -> estatuto alt3func .

    CLASS           reduce using rule 40 (alt3func -> estatuto alt3func .)
    VAR             reduce using rule 40 (alt3func -> estatuto alt3func .)
    FUNC            reduce using rule 40 (alt3func -> estatuto alt3func .)
    MAIN            reduce using rule 40 (alt3func -> estatuto alt3func .)
    CONSTRUCTOR     reduce using rule 40 (alt3func -> estatuto alt3func .)


state 226

    (41) alt3func -> CLOSECURLY remove_function_scope .

    CLASS           reduce using rule 41 (alt3func -> CLOSECURLY remove_function_scope .)
    VAR             reduce using rule 41 (alt3func -> CLOSECURLY remove_function_scope .)
    FUNC            reduce using rule 41 (alt3func -> CLOSECURLY remove_function_scope .)
    MAIN            reduce using rule 41 (alt3func -> CLOSECURLY remove_function_scope .)
    CONSTRUCTOR     reduce using rule 41 (alt3func -> CLOSECURLY remove_function_scope .)


state 227

    (112) assign -> ID array save_comp EQUALS save_op expresion . SEMICOLON

    SEMICOLON       shift and go to state 245


state 228

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params . CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      shift and go to state 246


state 229

    (46) altcall -> expresion generate_param_quad . alt2call
    (48) alt2call -> . COMMA altcall
    (49) alt2call -> . empty
    (114) empty -> .

    COMMA           shift and go to state 248
    CLOSEPAREN      reduce using rule 114 (empty -> .)

    alt2call                       shift and go to state 247
    empty                          shift and go to state 249

state 230

    (32) array2 -> OPENBRACKET . expresion CLOSEBRACKET empty_pv
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 250
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 231

    (30) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .

    EQUALS          reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    TIMES           reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    DIV             reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SUM             reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SUBTRACT        reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SAMEAS          reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    BIGGERTHAN      reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    BIGGEREQUALSTHAN reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SMALLTHAN       reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SMALLEQUALSTHAN reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    DIFFERENTTHAN   reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    AND             reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    OR              reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SEMICOLON       reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    CLOSEBRACKET    reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    CLOSEPAREN      reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    COMMA           reduce using rule 30 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)


state 232

    (33) array2 -> empty .

    EQUALS          reduce using rule 33 (array2 -> empty .)
    TIMES           reduce using rule 33 (array2 -> empty .)
    DIV             reduce using rule 33 (array2 -> empty .)
    SUM             reduce using rule 33 (array2 -> empty .)
    SUBTRACT        reduce using rule 33 (array2 -> empty .)
    SAMEAS          reduce using rule 33 (array2 -> empty .)
    BIGGERTHAN      reduce using rule 33 (array2 -> empty .)
    BIGGEREQUALSTHAN reduce using rule 33 (array2 -> empty .)
    SMALLTHAN       reduce using rule 33 (array2 -> empty .)
    SMALLEQUALSTHAN reduce using rule 33 (array2 -> empty .)
    DIFFERENTTHAN   reduce using rule 33 (array2 -> empty .)
    AND             reduce using rule 33 (array2 -> empty .)
    OR              reduce using rule 33 (array2 -> empty .)
    SEMICOLON       reduce using rule 33 (array2 -> empty .)
    CLOSEBRACKET    reduce using rule 33 (array2 -> empty .)
    CLOSEPAREN      reduce using rule 33 (array2 -> empty .)
    COMMA           reduce using rule 33 (array2 -> empty .)


state 233

    (108) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition add_end_if
    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (110) altcondition -> . estatuto altcondition
    (111) altcondition -> . CLOSECURLY
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 251
    estatuto                       shift and go to state 252
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 234

    (104) altwrite -> COMMA save_op . expresion altwrite
    (81) expresion -> . exp altexpresion
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    expresion                      shift and go to state 254
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 235

    (105) altwrite -> CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 105 (altwrite -> CLOSEPAREN SEMICOLON .)


state 236

    (102) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 255


state 237

    (94) altexp -> SUM save_op termino altexp .

    SAMEAS          reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    BIGGERTHAN      reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    SMALLTHAN       reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    AND             reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    OR              reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    SEMICOLON       reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    CLOSEPAREN      reduce using rule 94 (altexp -> SUM save_op termino altexp .)
    COMMA           reduce using rule 94 (altexp -> SUM save_op termino altexp .)


state 238

    (95) altexp -> SUBTRACT save_op termino altexp .

    SAMEAS          reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGERTHAN      reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLTHAN       reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    AND             reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    OR              reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    SEMICOLON       reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEPAREN      reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)
    COMMA           reduce using rule 95 (altexp -> SUBTRACT save_op termino altexp .)


state 239

    (99) alttermino -> TIMES save_op factor alttermino .

    SUM             reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    SUBTRACT        reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    SAMEAS          reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    SMALLTHAN       reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    AND             reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    OR              reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    SEMICOLON       reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)
    COMMA           reduce using rule 99 (alttermino -> TIMES save_op factor alttermino .)


state 240

    (100) alttermino -> DIV save_op factor alttermino .

    SUM             reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    SUBTRACT        reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    SAMEAS          reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    SMALLTHAN       reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    AND             reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    OR              reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    SEMICOLON       reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)
    COMMA           reduce using rule 100 (alttermino -> DIV save_op factor alttermino .)


state 241

    (106) factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .

    TIMES           reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIV             reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUM             reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUBTRACT        reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SAMEAS          reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGERTHAN      reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGEREQUALSTHAN reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLTHAN       reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLEQUALSTHAN reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIFFERENTTHAN   reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    AND             reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    OR              reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SEMICOLON       reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEBRACKET    reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEPAREN      reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    COMMA           reduce using rule 106 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)


state 242

    (64) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altwhile end_while

    OPENCURLY       shift and go to state 256


state 243

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 260
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt2const                      shift and go to state 257
    var                            shift and go to state 258
    estatuto                       shift and go to state 259
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 244

    (43) altparams -> COMMA ID TWODOTS type save_params . altparams
    (43) altparams -> . COMMA ID TWODOTS type save_params altparams
    (44) altparams -> . empty
    (114) empty -> .

    COMMA           shift and go to state 135
    CLOSEPAREN      reduce using rule 114 (empty -> .)

    altparams                      shift and go to state 261
    empty                          shift and go to state 136

state 245

    (112) assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .

    CLOSECURLY      reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    VAR             reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    ID              reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    IF              reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    OUTPUT          reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    INPUT           reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    RETURN          reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    WHILE           reduce using rule 112 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)


state 246

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN . end_false_stack generate_gosub
    (127) end_false_stack -> .

    SEMICOLON       reduce using rule 127 (end_false_stack -> .)
    TIMES           reduce using rule 127 (end_false_stack -> .)
    DIV             reduce using rule 127 (end_false_stack -> .)
    SUM             reduce using rule 127 (end_false_stack -> .)
    SUBTRACT        reduce using rule 127 (end_false_stack -> .)
    SAMEAS          reduce using rule 127 (end_false_stack -> .)
    BIGGERTHAN      reduce using rule 127 (end_false_stack -> .)
    BIGGEREQUALSTHAN reduce using rule 127 (end_false_stack -> .)
    SMALLTHAN       reduce using rule 127 (end_false_stack -> .)
    SMALLEQUALSTHAN reduce using rule 127 (end_false_stack -> .)
    DIFFERENTTHAN   reduce using rule 127 (end_false_stack -> .)
    AND             reduce using rule 127 (end_false_stack -> .)
    OR              reduce using rule 127 (end_false_stack -> .)
    CLOSEBRACKET    reduce using rule 127 (end_false_stack -> .)
    CLOSEPAREN      reduce using rule 127 (end_false_stack -> .)
    COMMA           reduce using rule 127 (end_false_stack -> .)

    end_false_stack                shift and go to state 262

state 247

    (46) altcall -> expresion generate_param_quad alt2call .

    CLOSEPAREN      reduce using rule 46 (altcall -> expresion generate_param_quad alt2call .)


state 248

    (48) alt2call -> COMMA . altcall
    (46) altcall -> . expresion generate_param_quad alt2call
    (47) altcall -> . empty
    (81) expresion -> . exp altexpresion
    (114) empty -> .
    (92) exp -> . termino
    (93) exp -> . termino altexp
    (97) termino -> . factor
    (98) termino -> . factor alttermino
    (106) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (107) factor -> . varcall
    (67) varcall -> . varcte save_const
    (68) varcall -> . varcomplicated save_comp
    (69) varcte -> . TRUE
    (70) varcte -> . FALSE
    (71) varcte -> . CTEFLOAT
    (72) varcte -> . CTESTRING
    (73) varcte -> . CTEINT
    (74) varcomplicated -> . varcomp1
    (75) varcomplicated -> . callfunc
    (76) varcomp1 -> . ID varcomp2
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 114 (empty -> .)
    OPENPAREN       shift and go to state 117
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    CTEFLOAT        shift and go to state 123
    CTESTRING       shift and go to state 124
    CTEINT          shift and go to state 125
    ID              shift and go to state 128

    altcall                        shift and go to state 263
    expresion                      shift and go to state 206
    empty                          shift and go to state 207
    exp                            shift and go to state 114
    termino                        shift and go to state 115
    factor                         shift and go to state 116
    varcall                        shift and go to state 118
    varcte                         shift and go to state 119
    varcomplicated                 shift and go to state 120
    varcomp1                       shift and go to state 126
    callfunc                       shift and go to state 127

state 249

    (49) alt2call -> empty .

    CLOSEPAREN      reduce using rule 49 (alt2call -> empty .)


state 250

    (32) array2 -> OPENBRACKET expresion . CLOSEBRACKET empty_pv

    CLOSEBRACKET    shift and go to state 264


state 251

    (108) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . add_end_if
    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . ELSE generate_goto OPENCURLY altcondition add_end_if
    (139) add_end_if -> .

    ELSE            shift and go to state 266
    CLOSECURLY      reduce using rule 139 (add_end_if -> .)
    VAR             reduce using rule 139 (add_end_if -> .)
    ID              reduce using rule 139 (add_end_if -> .)
    IF              reduce using rule 139 (add_end_if -> .)
    OUTPUT          reduce using rule 139 (add_end_if -> .)
    INPUT           reduce using rule 139 (add_end_if -> .)
    RETURN          reduce using rule 139 (add_end_if -> .)
    WHILE           reduce using rule 139 (add_end_if -> .)

    add_end_if                     shift and go to state 265

state 252

    (110) altcondition -> estatuto . altcondition
    (110) altcondition -> . estatuto altcondition
    (111) altcondition -> . CLOSECURLY
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 252
    altcondition                   shift and go to state 267
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 253

    (111) altcondition -> CLOSECURLY .

    ELSE            reduce using rule 111 (altcondition -> CLOSECURLY .)
    CLOSECURLY      reduce using rule 111 (altcondition -> CLOSECURLY .)
    VAR             reduce using rule 111 (altcondition -> CLOSECURLY .)
    ID              reduce using rule 111 (altcondition -> CLOSECURLY .)
    IF              reduce using rule 111 (altcondition -> CLOSECURLY .)
    OUTPUT          reduce using rule 111 (altcondition -> CLOSECURLY .)
    INPUT           reduce using rule 111 (altcondition -> CLOSECURLY .)
    RETURN          reduce using rule 111 (altcondition -> CLOSECURLY .)
    WHILE           reduce using rule 111 (altcondition -> CLOSECURLY .)


state 254

    (104) altwrite -> COMMA save_op expresion . altwrite
    (104) altwrite -> . COMMA save_op expresion altwrite
    (105) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 211
    CLOSEPAREN      shift and go to state 212

    altwrite                       shift and go to state 268

state 255

    (102) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 102 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)


state 256

    (64) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altwhile end_while
    (65) altwhile -> . estatuto altwhile
    (66) altwhile -> . CLOSECURLY
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 271
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altwhile                       shift and go to state 269
    estatuto                       shift and go to state 270
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 257

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .

    CLOSECURLY      reduce using rule 16 (constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .)


state 258

    (19) alt2const -> var . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 260
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 258
    alt2const                      shift and go to state 272
    estatuto                       shift and go to state 259
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 259

    (20) alt2const -> estatuto . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 260
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 259
    alt2const                      shift and go to state 273
    var                            shift and go to state 258
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 260

    (21) alt2const -> CLOSECURLY .

    CLOSECURLY      reduce using rule 21 (alt2const -> CLOSECURLY .)


state 261

    (43) altparams -> COMMA ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 43 (altparams -> COMMA ID TWODOTS type save_params altparams .)


state 262

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack . generate_gosub
    (128) generate_gosub -> .

    SEMICOLON       reduce using rule 128 (generate_gosub -> .)
    TIMES           reduce using rule 128 (generate_gosub -> .)
    DIV             reduce using rule 128 (generate_gosub -> .)
    SUM             reduce using rule 128 (generate_gosub -> .)
    SUBTRACT        reduce using rule 128 (generate_gosub -> .)
    SAMEAS          reduce using rule 128 (generate_gosub -> .)
    BIGGERTHAN      reduce using rule 128 (generate_gosub -> .)
    BIGGEREQUALSTHAN reduce using rule 128 (generate_gosub -> .)
    SMALLTHAN       reduce using rule 128 (generate_gosub -> .)
    SMALLEQUALSTHAN reduce using rule 128 (generate_gosub -> .)
    DIFFERENTTHAN   reduce using rule 128 (generate_gosub -> .)
    AND             reduce using rule 128 (generate_gosub -> .)
    OR              reduce using rule 128 (generate_gosub -> .)
    CLOSEBRACKET    reduce using rule 128 (generate_gosub -> .)
    CLOSEPAREN      reduce using rule 128 (generate_gosub -> .)
    COMMA           reduce using rule 128 (generate_gosub -> .)

    generate_gosub                 shift and go to state 274

state 263

    (48) alt2call -> COMMA altcall .

    CLOSEPAREN      reduce using rule 48 (alt2call -> COMMA altcall .)


state 264

    (32) array2 -> OPENBRACKET expresion CLOSEBRACKET . empty_pv
    (132) empty_pv -> .

    EQUALS          reduce using rule 132 (empty_pv -> .)
    TIMES           reduce using rule 132 (empty_pv -> .)
    DIV             reduce using rule 132 (empty_pv -> .)
    SUM             reduce using rule 132 (empty_pv -> .)
    SUBTRACT        reduce using rule 132 (empty_pv -> .)
    SAMEAS          reduce using rule 132 (empty_pv -> .)
    BIGGERTHAN      reduce using rule 132 (empty_pv -> .)
    BIGGEREQUALSTHAN reduce using rule 132 (empty_pv -> .)
    SMALLTHAN       reduce using rule 132 (empty_pv -> .)
    SMALLEQUALSTHAN reduce using rule 132 (empty_pv -> .)
    DIFFERENTTHAN   reduce using rule 132 (empty_pv -> .)
    AND             reduce using rule 132 (empty_pv -> .)
    OR              reduce using rule 132 (empty_pv -> .)
    SEMICOLON       reduce using rule 132 (empty_pv -> .)
    CLOSEBRACKET    reduce using rule 132 (empty_pv -> .)
    CLOSEPAREN      reduce using rule 132 (empty_pv -> .)
    COMMA           reduce using rule 132 (empty_pv -> .)

    empty_pv                       shift and go to state 275

state 265

    (108) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 108 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)


state 266

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE . generate_goto OPENCURLY altcondition add_end_if
    (140) generate_goto -> .

    OPENCURLY       reduce using rule 140 (generate_goto -> .)

    generate_goto                  shift and go to state 276

state 267

    (110) altcondition -> estatuto altcondition .

    ELSE            reduce using rule 110 (altcondition -> estatuto altcondition .)
    CLOSECURLY      reduce using rule 110 (altcondition -> estatuto altcondition .)
    VAR             reduce using rule 110 (altcondition -> estatuto altcondition .)
    ID              reduce using rule 110 (altcondition -> estatuto altcondition .)
    IF              reduce using rule 110 (altcondition -> estatuto altcondition .)
    OUTPUT          reduce using rule 110 (altcondition -> estatuto altcondition .)
    INPUT           reduce using rule 110 (altcondition -> estatuto altcondition .)
    RETURN          reduce using rule 110 (altcondition -> estatuto altcondition .)
    WHILE           reduce using rule 110 (altcondition -> estatuto altcondition .)


state 268

    (104) altwrite -> COMMA save_op expresion altwrite .

    CLOSECURLY      reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    VAR             reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    ID              reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    IF              reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    OUTPUT          reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    INPUT           reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    RETURN          reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)
    WHILE           reduce using rule 104 (altwrite -> COMMA save_op expresion altwrite .)


state 269

    (64) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile . end_while
    (134) end_while -> .

    CLOSECURLY      reduce using rule 134 (end_while -> .)
    VAR             reduce using rule 134 (end_while -> .)
    ID              reduce using rule 134 (end_while -> .)
    IF              reduce using rule 134 (end_while -> .)
    OUTPUT          reduce using rule 134 (end_while -> .)
    INPUT           reduce using rule 134 (end_while -> .)
    RETURN          reduce using rule 134 (end_while -> .)
    WHILE           reduce using rule 134 (end_while -> .)

    end_while                      shift and go to state 277

state 270

    (65) altwhile -> estatuto . altwhile
    (65) altwhile -> . estatuto altwhile
    (66) altwhile -> . CLOSECURLY
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 271
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 270
    altwhile                       shift and go to state 278
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 271

    (66) altwhile -> CLOSECURLY .

    CLOSECURLY      reduce using rule 66 (altwhile -> CLOSECURLY .)
    VAR             reduce using rule 66 (altwhile -> CLOSECURLY .)
    ID              reduce using rule 66 (altwhile -> CLOSECURLY .)
    IF              reduce using rule 66 (altwhile -> CLOSECURLY .)
    OUTPUT          reduce using rule 66 (altwhile -> CLOSECURLY .)
    INPUT           reduce using rule 66 (altwhile -> CLOSECURLY .)
    RETURN          reduce using rule 66 (altwhile -> CLOSECURLY .)
    WHILE           reduce using rule 66 (altwhile -> CLOSECURLY .)


state 272

    (19) alt2const -> var alt2const .

    CLOSECURLY      reduce using rule 19 (alt2const -> var alt2const .)


state 273

    (20) alt2const -> estatuto alt2const .

    CLOSECURLY      reduce using rule 20 (alt2const -> estatuto alt2const .)


state 274

    (45) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .

    SEMICOLON       reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    TIMES           reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIV             reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUM             reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUBTRACT        reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SAMEAS          reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGERTHAN      reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGEREQUALSTHAN reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLTHAN       reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLEQUALSTHAN reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIFFERENTTHAN   reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    AND             reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    OR              reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEBRACKET    reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEPAREN      reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    COMMA           reduce using rule 45 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)


state 275

    (32) array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .

    EQUALS          reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    TIMES           reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    DIV             reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SUM             reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SUBTRACT        reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SAMEAS          reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    BIGGERTHAN      reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    BIGGEREQUALSTHAN reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SMALLTHAN       reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SMALLEQUALSTHAN reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    DIFFERENTTHAN   reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    AND             reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    OR              reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SEMICOLON       reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    CLOSEBRACKET    reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    CLOSEPAREN      reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    COMMA           reduce using rule 32 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)


state 276

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto . OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 279


state 277

    (64) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .

    CLOSECURLY      reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    VAR             reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    ID              reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    IF              reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    OUTPUT          reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    INPUT           reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    RETURN          reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    WHILE           reduce using rule 64 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)


state 278

    (65) altwhile -> estatuto altwhile .

    CLOSECURLY      reduce using rule 65 (altwhile -> estatuto altwhile .)
    VAR             reduce using rule 65 (altwhile -> estatuto altwhile .)
    ID              reduce using rule 65 (altwhile -> estatuto altwhile .)
    IF              reduce using rule 65 (altwhile -> estatuto altwhile .)
    OUTPUT          reduce using rule 65 (altwhile -> estatuto altwhile .)
    INPUT           reduce using rule 65 (altwhile -> estatuto altwhile .)
    RETURN          reduce using rule 65 (altwhile -> estatuto altwhile .)
    WHILE           reduce using rule 65 (altwhile -> estatuto altwhile .)


state 279

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY . altcondition add_end_if
    (110) altcondition -> . estatuto altcondition
    (111) altcondition -> . CLOSECURLY
    (55) estatuto -> . assign empty_pv
    (56) estatuto -> . condition empty_pv
    (57) estatuto -> . write empty_pv
    (58) estatuto -> . read empty_pv
    (59) estatuto -> . return empty_pv
    (60) estatuto -> . voidcall empty_pv
    (61) estatuto -> . while empty_pv
    (112) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (108) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (102) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (113) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (62) voidcall -> . callfunc SEMICOLON
    (63) voidcall -> . ID DOT voidcall
    (64) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (45) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 280
    estatuto                       shift and go to state 252
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 280

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition . add_end_if
    (139) add_end_if -> .

    CLOSECURLY      reduce using rule 139 (add_end_if -> .)
    VAR             reduce using rule 139 (add_end_if -> .)
    ID              reduce using rule 139 (add_end_if -> .)
    IF              reduce using rule 139 (add_end_if -> .)
    OUTPUT          reduce using rule 139 (add_end_if -> .)
    INPUT           reduce using rule 139 (add_end_if -> .)
    RETURN          reduce using rule 139 (add_end_if -> .)
    WHILE           reduce using rule 139 (add_end_if -> .)

    add_end_if                     shift and go to state 281

state 281

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 115 resolved using rule (exp -> termino)
WARNING: rejected rule (empty -> <empty>) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (termino -> factor)
WARNING: rejected rule (empty -> <empty>) in state 116
