Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID save_program SEMICOLON altprogram
Rule 2     altprogram -> class altprogram
Rule 3     altprogram -> var altprogram
Rule 4     altprogram -> function altprogram
Rule 5     altprogram -> main remove_class_scope
Rule 6     save_program -> <empty>
Rule 7     main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
Rule 8     altmain -> var altmain
Rule 9     altmain -> estatuto altmain
Rule 10    altmain -> CLOSECURLY
Rule 11    save_main -> <empty>
Rule 12    class -> CLASS ID altclass save_class OPENCURLY alt2class
Rule 13    altclass -> TWODOTS ID
Rule 14    altclass -> empty
Rule 15    alt2class -> var alt2class
Rule 16    alt2class -> function alt2class
Rule 17    alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope
Rule 18    save_class -> <empty>
Rule 19    remove_class_scope -> <empty>
Rule 20    constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
Rule 21    altconst -> params
Rule 22    altconst -> empty
Rule 23    alt2const -> var alt2const
Rule 24    alt2const -> estatuto alt2const
Rule 25    alt2const -> CLOSECURLY
Rule 26    save_constructor -> <empty>
Rule 27    var -> VAR listids TWODOTS type save_vars SEMICOLON
Rule 28    save_vars -> <empty>
Rule 29    listids -> ID save_var_name dec_array listidsalty
Rule 30    listidsalty -> COMMA listids
Rule 31    listidsalty -> empty
Rule 32    dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2
Rule 33    dec_array -> empty
Rule 34    dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET
Rule 35    dec_array2 -> empty
Rule 36    array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2
Rule 37    array -> empty
Rule 38    array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv
Rule 39    array2 -> empty
Rule 40    save_var_name -> <empty>
Rule 41    function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
Rule 42    altfunc -> params
Rule 43    altfunc -> empty
Rule 44    alt2func -> TWODOTS type
Rule 45    alt2func -> empty
Rule 46    alt3func -> var alt3func
Rule 47    alt3func -> estatuto alt3func
Rule 48    alt3func -> CLOSECURLY remove_function_scope
Rule 49    save_function -> <empty>
Rule 50    store_params -> <empty>
Rule 51    remove_function_scope -> <empty>
Rule 52    params -> ID TWODOTS type save_params altparams
Rule 53    altparams -> COMMA ID TWODOTS type save_params altparams
Rule 54    altparams -> empty
Rule 55    save_params -> <empty>
Rule 56    callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
Rule 57    altcall -> expresion generate_param_quad alt2call
Rule 58    altcall -> empty
Rule 59    alt2call -> COMMA altcall
Rule 60    alt2call -> empty
Rule 61    add_false_stack -> <empty>
Rule 62    end_false_stack -> <empty>
Rule 63    generate_gosub -> <empty>
Rule 64    check_params -> <empty>
Rule 65    generate_param_quad -> <empty>
Rule 66    check_exists_func -> <empty>
Rule 67    type -> INT
Rule 68    type -> FLOAT
Rule 69    type -> STRING
Rule 70    type -> ID
Rule 71    type -> BOOL
Rule 72    estatuto -> assign empty_pv
Rule 73    estatuto -> condition empty_pv
Rule 74    estatuto -> write empty_pv
Rule 75    estatuto -> read empty_pv
Rule 76    estatuto -> return empty_pv
Rule 77    estatuto -> voidcall empty_pv
Rule 78    estatuto -> while empty_pv
Rule 79    voidcall -> callfunc SEMICOLON
Rule 80    voidcall -> ID DOT voidcall
Rule 81    empty_pv -> <empty>
Rule 82    while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
Rule 83    altwhile -> estatuto altwhile
Rule 84    altwhile -> CLOSECURLY
Rule 85    add_stack_jump -> <empty>
Rule 86    end_while -> <empty>
Rule 87    varcall -> varcte save_const
Rule 88    varcall -> varcomplicated save_comp
Rule 89    varcte -> TRUE
Rule 90    varcte -> FALSE
Rule 91    varcte -> CTEFLOAT
Rule 92    varcte -> CTESTRING
Rule 93    varcte -> CTEINT
Rule 94    varcomplicated -> varcomp1
Rule 95    varcomplicated -> callfunc
Rule 96    varcomp1 -> ID varcomp2
Rule 97    varcomp2 -> DOT varcomp3
Rule 98    varcomp2 -> empty
Rule 99    varcomp3 -> varcomp1
Rule 100   varcomp3 -> callfunc
Rule 101   save_const -> <empty>
Rule 102   save_comp -> <empty>
Rule 103   expresion -> exp altexpresion
Rule 104   altexpresion -> altexpresion2 save_op exp
Rule 105   altexpresion -> empty
Rule 106   altexpresion2 -> SAMEAS
Rule 107   altexpresion2 -> BIGGERTHAN
Rule 108   altexpresion2 -> BIGGEREQUALSTHAN
Rule 109   altexpresion2 -> SMALLTHAN
Rule 110   altexpresion2 -> SMALLEQUALSTHAN
Rule 111   altexpresion2 -> DIFFERENTTHAN
Rule 112   altexpresion2 -> AND
Rule 113   altexpresion2 -> OR
Rule 114   exp -> termino
Rule 115   exp -> termino altexp
Rule 116   altexp -> SUM save_op termino altexp
Rule 117   altexp -> SUBTRACT save_op termino altexp
Rule 118   altexp -> empty
Rule 119   termino -> factor
Rule 120   termino -> factor alttermino
Rule 121   alttermino -> TIMES save_op factor alttermino
Rule 122   alttermino -> DIV save_op factor alttermino
Rule 123   alttermino -> empty
Rule 124   save_op -> <empty>
Rule 125   read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
Rule 126   write -> OUTPUT save_op OPENPAREN expresion altwrite
Rule 127   altwrite -> COMMA save_op expresion altwrite
Rule 128   altwrite -> CLOSEPAREN SEMICOLON
Rule 129   factor -> OPENPAREN save_op expresion CLOSEPAREN save_op
Rule 130   factor -> varcall
Rule 131   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
Rule 132   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
Rule 133   altcondition -> estatuto altcondition
Rule 134   altcondition -> CLOSECURLY
Rule 135   add_gotof -> <empty>
Rule 136   add_end_if -> <empty>
Rule 137   generate_goto -> <empty>
Rule 138   assign -> ID save_comp EQUALS save_op expresion SEMICOLON
Rule 139   return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists
Rule 140   generate_quad_ret -> <empty>
Rule 141   add_return_exists -> <empty>
Rule 142   empty -> <empty>

Terminals, with rules where they appear

AND                  : 112
BIGGEREQUALSTHAN     : 108
BIGGERTHAN           : 107
BOOL                 : 71
CLASS                : 12
CLOSEBRACKET         : 32 34 36 38
CLOSECURLY           : 10 17 25 48 84 134
CLOSEPAREN           : 7 20 41 56 82 125 128 129 131 132
COMMA                : 30 53 59 127
CONSTRUCTOR          : 20
CTEFLOAT             : 91
CTEINT               : 32 34 93
CTESTRING            : 92
DIFFERENTTHAN        : 111
DIV                  : 122
DOT                  : 80 97
ELSE                 : 132
EQUALS               : 138
FALSE                : 90
FLOAT                : 68
FUNC                 : 41
ID                   : 1 12 13 29 41 52 53 56 70 80 96 125 138
IF                   : 131 132
INPUT                : 125
INT                  : 67
MAIN                 : 7
OPENBRACKET          : 32 34 36 38
OPENCURLY            : 7 12 20 41 82 131 132 132
OPENPAREN            : 7 20 41 56 82 125 126 129 131 132
OR                   : 113
OUTPUT               : 126
PROGRAM              : 1
RETURN               : 139
SAMEAS               : 106
SEMICOLON            : 1 17 27 79 125 128 138 139
SMALLEQUALSTHAN      : 110
SMALLTHAN            : 109
STRING               : 69
SUBTRACT             : 117
SUM                  : 116
TIMES                : 121
TRUE                 : 89
TWODOTS              : 13 27 44 52 53
VAR                  : 27
WHILE                : 82
error                : 

Nonterminals, with rules where they appear

add_end_if           : 131 132
add_false_stack      : 56
add_gotof            : 82 131 132
add_return_exists    : 139
add_stack_jump       : 82
alt2call             : 57
alt2class            : 12 15 16
alt2const            : 20 23 24
alt2func             : 41
alt3func             : 41 46 47
altcall              : 56 59
altclass             : 12
altcondition         : 131 132 132 133
altconst             : 20
altexp               : 115 116 117
altexpresion         : 103
altexpresion2        : 104
altfunc              : 41
altmain              : 7 8 9
altparams            : 52 53
altprogram           : 1 2 3 4
alttermino           : 120 121 122
altwhile             : 82 83
altwrite             : 126 127
array                : 
array2               : 36
assign               : 72
callfunc             : 79 95 100
check_exists_func    : 56
check_params         : 56
class                : 2
condition            : 73
constructor          : 17
dec_array            : 29
dec_array2           : 32
empty                : 14 22 31 33 35 37 39 43 45 54 58 60 98 105 118 123
empty_pv             : 36 38 72 73 74 75 76 77 78
end_false_stack      : 56
end_while            : 82
estatuto             : 9 24 47 83 133
exp                  : 103 104
expresion            : 36 38 57 82 126 127 129 131 132 138 139
factor               : 119 120 121 122
function             : 4 16
generate_gosub       : 56
generate_goto        : 132
generate_param_quad  : 57
generate_quad_ret    : 139
listids              : 27 30
listidsalty          : 29
main                 : 5
params               : 21 42
program              : 0
read                 : 75
remove_class_scope   : 5 17
remove_function_scope : 48
return               : 76
save_class           : 12
save_comp            : 88 125 138
save_const           : 87
save_constructor     : 20
save_function        : 41
save_main            : 7
save_op              : 104 116 117 121 122 125 126 127 129 129 138
save_params          : 52 53
save_program         : 1
save_var_name        : 29
save_vars            : 27
store_params         : 20 41
termino              : 114 115 116 117
type                 : 27 44 52 53
var                  : 3 8 15 23 46
varcall              : 130
varcomp1             : 94 99
varcomp2             : 96
varcomp3             : 97
varcomplicated       : 88
varcte               : 87
voidcall             : 77 80
while                : 78
write                : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID save_program SEMICOLON altprogram

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID save_program SEMICOLON altprogram

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . save_program SEMICOLON altprogram
    (6) save_program -> .

    SEMICOLON       reduce using rule 6 (save_program -> .)

    save_program                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID save_program . SEMICOLON altprogram

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID save_program SEMICOLON . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    altprogram                     shift and go to state 6
    class                          shift and go to state 7
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 6

    (1) program -> PROGRAM ID save_program SEMICOLON altprogram .

    $end            reduce using rule 1 (program -> PROGRAM ID save_program SEMICOLON altprogram .)


state 7

    (2) altprogram -> class . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    class                          shift and go to state 7
    altprogram                     shift and go to state 15
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 8

    (3) altprogram -> var . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    var                            shift and go to state 8
    altprogram                     shift and go to state 16
    class                          shift and go to state 7
    function                       shift and go to state 9
    main                           shift and go to state 10

state 9

    (4) altprogram -> function . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    function                       shift and go to state 9
    altprogram                     shift and go to state 17
    class                          shift and go to state 7
    var                            shift and go to state 8
    main                           shift and go to state 10

state 10

    (5) altprogram -> main . remove_class_scope
    (19) remove_class_scope -> .

    $end            reduce using rule 19 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 18

state 11

    (12) class -> CLASS . ID altclass save_class OPENCURLY alt2class

    ID              shift and go to state 19


state 12

    (27) var -> VAR . listids TWODOTS type save_vars SEMICOLON
    (29) listids -> . ID save_var_name dec_array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 20

state 13

    (41) function -> FUNC . ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    ID              shift and go to state 22


state 14

    (7) main -> MAIN . save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
    (11) save_main -> .

    OPENPAREN       reduce using rule 11 (save_main -> .)

    save_main                      shift and go to state 23

state 15

    (2) altprogram -> class altprogram .

    $end            reduce using rule 2 (altprogram -> class altprogram .)


state 16

    (3) altprogram -> var altprogram .

    $end            reduce using rule 3 (altprogram -> var altprogram .)


state 17

    (4) altprogram -> function altprogram .

    $end            reduce using rule 4 (altprogram -> function altprogram .)


state 18

    (5) altprogram -> main remove_class_scope .

    $end            reduce using rule 5 (altprogram -> main remove_class_scope .)


state 19

    (12) class -> CLASS ID . altclass save_class OPENCURLY alt2class
    (13) altclass -> . TWODOTS ID
    (14) altclass -> . empty
    (142) empty -> .

    TWODOTS         shift and go to state 25
    OPENCURLY       reduce using rule 142 (empty -> .)

    altclass                       shift and go to state 24
    empty                          shift and go to state 26

state 20

    (27) var -> VAR listids . TWODOTS type save_vars SEMICOLON

    TWODOTS         shift and go to state 27


state 21

    (29) listids -> ID . save_var_name dec_array listidsalty
    (40) save_var_name -> .

    OPENBRACKET     reduce using rule 40 (save_var_name -> .)
    COMMA           reduce using rule 40 (save_var_name -> .)
    TWODOTS         reduce using rule 40 (save_var_name -> .)

    save_var_name                  shift and go to state 28

state 22

    (41) function -> FUNC ID . OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    OPENPAREN       shift and go to state 29


state 23

    (7) main -> MAIN save_main . OPENPAREN CLOSEPAREN OPENCURLY altmain

    OPENPAREN       shift and go to state 30


state 24

    (12) class -> CLASS ID altclass . save_class OPENCURLY alt2class
    (18) save_class -> .

    OPENCURLY       reduce using rule 18 (save_class -> .)

    save_class                     shift and go to state 31

state 25

    (13) altclass -> TWODOTS . ID

    ID              shift and go to state 32


state 26

    (14) altclass -> empty .

    OPENCURLY       reduce using rule 14 (altclass -> empty .)


state 27

    (27) var -> VAR listids TWODOTS . type save_vars SEMICOLON
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING
    (70) type -> . ID
    (71) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 33

state 28

    (29) listids -> ID save_var_name . dec_array listidsalty
    (32) dec_array -> . OPENBRACKET CTEINT CLOSEBRACKET dec_array2
    (33) dec_array -> . empty
    (142) empty -> .

    OPENBRACKET     shift and go to state 40
    COMMA           reduce using rule 142 (empty -> .)
    TWODOTS         reduce using rule 142 (empty -> .)

    dec_array                      shift and go to state 39
    empty                          shift and go to state 41

state 29

    (41) function -> FUNC ID OPENPAREN . altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (42) altfunc -> . params
    (43) altfunc -> . empty
    (52) params -> . ID TWODOTS type save_params altparams
    (142) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 142 (empty -> .)

    altfunc                        shift and go to state 43
    params                         shift and go to state 44
    empty                          shift and go to state 45

state 30

    (7) main -> MAIN save_main OPENPAREN . CLOSEPAREN OPENCURLY altmain

    CLOSEPAREN      shift and go to state 46


state 31

    (12) class -> CLASS ID altclass save_class . OPENCURLY alt2class

    OPENCURLY       shift and go to state 47


state 32

    (13) altclass -> TWODOTS ID .

    OPENCURLY       reduce using rule 13 (altclass -> TWODOTS ID .)


state 33

    (27) var -> VAR listids TWODOTS type . save_vars SEMICOLON
    (28) save_vars -> .

    SEMICOLON       reduce using rule 28 (save_vars -> .)

    save_vars                      shift and go to state 48

state 34

    (67) type -> INT .

    SEMICOLON       reduce using rule 67 (type -> INT .)
    COMMA           reduce using rule 67 (type -> INT .)
    CLOSEPAREN      reduce using rule 67 (type -> INT .)
    OPENCURLY       reduce using rule 67 (type -> INT .)


state 35

    (68) type -> FLOAT .

    SEMICOLON       reduce using rule 68 (type -> FLOAT .)
    COMMA           reduce using rule 68 (type -> FLOAT .)
    CLOSEPAREN      reduce using rule 68 (type -> FLOAT .)
    OPENCURLY       reduce using rule 68 (type -> FLOAT .)


state 36

    (69) type -> STRING .

    SEMICOLON       reduce using rule 69 (type -> STRING .)
    COMMA           reduce using rule 69 (type -> STRING .)
    CLOSEPAREN      reduce using rule 69 (type -> STRING .)
    OPENCURLY       reduce using rule 69 (type -> STRING .)


state 37

    (70) type -> ID .

    SEMICOLON       reduce using rule 70 (type -> ID .)
    COMMA           reduce using rule 70 (type -> ID .)
    CLOSEPAREN      reduce using rule 70 (type -> ID .)
    OPENCURLY       reduce using rule 70 (type -> ID .)


state 38

    (71) type -> BOOL .

    SEMICOLON       reduce using rule 71 (type -> BOOL .)
    COMMA           reduce using rule 71 (type -> BOOL .)
    CLOSEPAREN      reduce using rule 71 (type -> BOOL .)
    OPENCURLY       reduce using rule 71 (type -> BOOL .)


state 39

    (29) listids -> ID save_var_name dec_array . listidsalty
    (30) listidsalty -> . COMMA listids
    (31) listidsalty -> . empty
    (142) empty -> .

    COMMA           shift and go to state 50
    TWODOTS         reduce using rule 142 (empty -> .)

    listidsalty                    shift and go to state 49
    empty                          shift and go to state 51

state 40

    (32) dec_array -> OPENBRACKET . CTEINT CLOSEBRACKET dec_array2

    CTEINT          shift and go to state 52


state 41

    (33) dec_array -> empty .

    COMMA           reduce using rule 33 (dec_array -> empty .)
    TWODOTS         reduce using rule 33 (dec_array -> empty .)


state 42

    (52) params -> ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 53


state 43

    (41) function -> FUNC ID OPENPAREN altfunc . CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    CLOSEPAREN      shift and go to state 54


state 44

    (42) altfunc -> params .

    CLOSEPAREN      reduce using rule 42 (altfunc -> params .)


state 45

    (43) altfunc -> empty .

    CLOSEPAREN      reduce using rule 43 (altfunc -> empty .)


state 46

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN . OPENCURLY altmain

    OPENCURLY       shift and go to state 55


state 47

    (12) class -> CLASS ID altclass save_class OPENCURLY . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    alt2class                      shift and go to state 56
    var                            shift and go to state 57
    function                       shift and go to state 58
    constructor                    shift and go to state 59

state 48

    (27) var -> VAR listids TWODOTS type save_vars . SEMICOLON

    SEMICOLON       shift and go to state 61


state 49

    (29) listids -> ID save_var_name dec_array listidsalty .

    TWODOTS         reduce using rule 29 (listids -> ID save_var_name dec_array listidsalty .)


state 50

    (30) listidsalty -> COMMA . listids
    (29) listids -> . ID save_var_name dec_array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 62

state 51

    (31) listidsalty -> empty .

    TWODOTS         reduce using rule 31 (listidsalty -> empty .)


state 52

    (32) dec_array -> OPENBRACKET CTEINT . CLOSEBRACKET dec_array2

    CLOSEBRACKET    shift and go to state 63


state 53

    (52) params -> ID TWODOTS . type save_params altparams
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING
    (70) type -> . ID
    (71) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 64

state 54

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN . alt2func save_function store_params OPENCURLY alt3func
    (44) alt2func -> . TWODOTS type
    (45) alt2func -> . empty
    (142) empty -> .

    TWODOTS         shift and go to state 66
    OPENCURLY       reduce using rule 142 (empty -> .)

    alt2func                       shift and go to state 65
    empty                          shift and go to state 67

state 55

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altmain                        shift and go to state 68
    var                            shift and go to state 69
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 56

    (12) class -> CLASS ID altclass save_class OPENCURLY alt2class .

    CLASS           reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    VAR             reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    FUNC            reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    MAIN            reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)


state 57

    (15) alt2class -> var . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    var                            shift and go to state 57
    alt2class                      shift and go to state 86
    function                       shift and go to state 58
    constructor                    shift and go to state 59

state 58

    (16) alt2class -> function . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (41) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 60

    function                       shift and go to state 58
    alt2class                      shift and go to state 87
    var                            shift and go to state 57
    constructor                    shift and go to state 59

state 59

    (17) alt2class -> constructor . CLOSECURLY SEMICOLON remove_class_scope

    CLOSECURLY      shift and go to state 88


state 60

    (20) constructor -> CONSTRUCTOR . save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
    (26) save_constructor -> .

    OPENPAREN       reduce using rule 26 (save_constructor -> .)

    save_constructor               shift and go to state 89

state 61

    (27) var -> VAR listids TWODOTS type save_vars SEMICOLON .

    CLASS           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    VAR             reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    FUNC            reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    MAIN            reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CONSTRUCTOR     reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CLOSECURLY      reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    ID              reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    IF              reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    OUTPUT          reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    INPUT           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    RETURN          reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    WHILE           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)


state 62

    (30) listidsalty -> COMMA listids .

    TWODOTS         reduce using rule 30 (listidsalty -> COMMA listids .)


state 63

    (32) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET . dec_array2
    (34) dec_array2 -> . OPENBRACKET CTEINT CLOSEBRACKET
    (35) dec_array2 -> . empty
    (142) empty -> .

    OPENBRACKET     shift and go to state 90
    COMMA           reduce using rule 142 (empty -> .)
    TWODOTS         reduce using rule 142 (empty -> .)

    dec_array2                     shift and go to state 91
    empty                          shift and go to state 92

state 64

    (52) params -> ID TWODOTS type . save_params altparams
    (55) save_params -> .

    COMMA           reduce using rule 55 (save_params -> .)
    CLOSEPAREN      reduce using rule 55 (save_params -> .)

    save_params                    shift and go to state 93

state 65

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func . save_function store_params OPENCURLY alt3func
    (49) save_function -> .

    OPENCURLY       reduce using rule 49 (save_function -> .)

    save_function                  shift and go to state 94

state 66

    (44) alt2func -> TWODOTS . type
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING
    (70) type -> . ID
    (71) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 95

state 67

    (45) alt2func -> empty .

    OPENCURLY       reduce using rule 45 (alt2func -> empty .)


state 68

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .

    $end            reduce using rule 7 (main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .)


state 69

    (8) altmain -> var . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 69
    altmain                        shift and go to state 96
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 70

    (9) altmain -> estatuto . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 70
    altmain                        shift and go to state 97
    var                            shift and go to state 69
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 71

    (10) altmain -> CLOSECURLY .

    $end            reduce using rule 10 (altmain -> CLOSECURLY .)


state 72

    (72) estatuto -> assign . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 98

state 73

    (73) estatuto -> condition . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 99

state 74

    (74) estatuto -> write . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 100

state 75

    (75) estatuto -> read . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 101

state 76

    (76) estatuto -> return . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 102

state 77

    (77) estatuto -> voidcall . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 103

state 78

    (78) estatuto -> while . empty_pv
    (81) empty_pv -> .

    CLOSECURLY      reduce using rule 81 (empty_pv -> .)
    VAR             reduce using rule 81 (empty_pv -> .)
    ID              reduce using rule 81 (empty_pv -> .)
    IF              reduce using rule 81 (empty_pv -> .)
    OUTPUT          reduce using rule 81 (empty_pv -> .)
    INPUT           reduce using rule 81 (empty_pv -> .)
    RETURN          reduce using rule 81 (empty_pv -> .)
    WHILE           reduce using rule 81 (empty_pv -> .)

    empty_pv                       shift and go to state 104

state 79

    (138) assign -> ID . save_comp EQUALS save_op expresion SEMICOLON
    (80) voidcall -> ID . DOT voidcall
    (56) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (102) save_comp -> .
    (66) check_exists_func -> .

    DOT             shift and go to state 106
    EQUALS          reduce using rule 102 (save_comp -> .)
    OPENPAREN       reduce using rule 66 (check_exists_func -> .)

    save_comp                      shift and go to state 105
    check_exists_func              shift and go to state 107

state 80

    (131) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENPAREN       shift and go to state 108


state 81

    (126) write -> OUTPUT . save_op OPENPAREN expresion altwrite
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 109

state 82

    (125) read -> INPUT . save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 110

state 83

    (139) return -> RETURN . expresion generate_quad_ret SEMICOLON add_return_exists
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 111
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 84

    (79) voidcall -> callfunc . SEMICOLON

    SEMICOLON       shift and go to state 127


state 85

    (82) while -> WHILE . add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (85) add_stack_jump -> .

    OPENPAREN       reduce using rule 85 (add_stack_jump -> .)

    add_stack_jump                 shift and go to state 128

state 86

    (15) alt2class -> var alt2class .

    CLASS           reduce using rule 15 (alt2class -> var alt2class .)
    VAR             reduce using rule 15 (alt2class -> var alt2class .)
    FUNC            reduce using rule 15 (alt2class -> var alt2class .)
    MAIN            reduce using rule 15 (alt2class -> var alt2class .)


state 87

    (16) alt2class -> function alt2class .

    CLASS           reduce using rule 16 (alt2class -> function alt2class .)
    VAR             reduce using rule 16 (alt2class -> function alt2class .)
    FUNC            reduce using rule 16 (alt2class -> function alt2class .)
    MAIN            reduce using rule 16 (alt2class -> function alt2class .)


state 88

    (17) alt2class -> constructor CLOSECURLY . SEMICOLON remove_class_scope

    SEMICOLON       shift and go to state 129


state 89

    (20) constructor -> CONSTRUCTOR save_constructor . OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    OPENPAREN       shift and go to state 130


state 90

    (34) dec_array2 -> OPENBRACKET . CTEINT CLOSEBRACKET

    CTEINT          shift and go to state 131


state 91

    (32) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .

    COMMA           reduce using rule 32 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)
    TWODOTS         reduce using rule 32 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)


state 92

    (35) dec_array2 -> empty .

    COMMA           reduce using rule 35 (dec_array2 -> empty .)
    TWODOTS         reduce using rule 35 (dec_array2 -> empty .)


state 93

    (52) params -> ID TWODOTS type save_params . altparams
    (53) altparams -> . COMMA ID TWODOTS type save_params altparams
    (54) altparams -> . empty
    (142) empty -> .

    COMMA           shift and go to state 133
    CLOSEPAREN      reduce using rule 142 (empty -> .)

    altparams                      shift and go to state 132
    empty                          shift and go to state 134

state 94

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function . store_params OPENCURLY alt3func
    (50) store_params -> .

    OPENCURLY       reduce using rule 50 (store_params -> .)

    store_params                   shift and go to state 135

state 95

    (44) alt2func -> TWODOTS type .

    OPENCURLY       reduce using rule 44 (alt2func -> TWODOTS type .)


state 96

    (8) altmain -> var altmain .

    $end            reduce using rule 8 (altmain -> var altmain .)


state 97

    (9) altmain -> estatuto altmain .

    $end            reduce using rule 9 (altmain -> estatuto altmain .)


state 98

    (72) estatuto -> assign empty_pv .

    CLOSECURLY      reduce using rule 72 (estatuto -> assign empty_pv .)
    VAR             reduce using rule 72 (estatuto -> assign empty_pv .)
    ID              reduce using rule 72 (estatuto -> assign empty_pv .)
    IF              reduce using rule 72 (estatuto -> assign empty_pv .)
    OUTPUT          reduce using rule 72 (estatuto -> assign empty_pv .)
    INPUT           reduce using rule 72 (estatuto -> assign empty_pv .)
    RETURN          reduce using rule 72 (estatuto -> assign empty_pv .)
    WHILE           reduce using rule 72 (estatuto -> assign empty_pv .)


state 99

    (73) estatuto -> condition empty_pv .

    CLOSECURLY      reduce using rule 73 (estatuto -> condition empty_pv .)
    VAR             reduce using rule 73 (estatuto -> condition empty_pv .)
    ID              reduce using rule 73 (estatuto -> condition empty_pv .)
    IF              reduce using rule 73 (estatuto -> condition empty_pv .)
    OUTPUT          reduce using rule 73 (estatuto -> condition empty_pv .)
    INPUT           reduce using rule 73 (estatuto -> condition empty_pv .)
    RETURN          reduce using rule 73 (estatuto -> condition empty_pv .)
    WHILE           reduce using rule 73 (estatuto -> condition empty_pv .)


state 100

    (74) estatuto -> write empty_pv .

    CLOSECURLY      reduce using rule 74 (estatuto -> write empty_pv .)
    VAR             reduce using rule 74 (estatuto -> write empty_pv .)
    ID              reduce using rule 74 (estatuto -> write empty_pv .)
    IF              reduce using rule 74 (estatuto -> write empty_pv .)
    OUTPUT          reduce using rule 74 (estatuto -> write empty_pv .)
    INPUT           reduce using rule 74 (estatuto -> write empty_pv .)
    RETURN          reduce using rule 74 (estatuto -> write empty_pv .)
    WHILE           reduce using rule 74 (estatuto -> write empty_pv .)


state 101

    (75) estatuto -> read empty_pv .

    CLOSECURLY      reduce using rule 75 (estatuto -> read empty_pv .)
    VAR             reduce using rule 75 (estatuto -> read empty_pv .)
    ID              reduce using rule 75 (estatuto -> read empty_pv .)
    IF              reduce using rule 75 (estatuto -> read empty_pv .)
    OUTPUT          reduce using rule 75 (estatuto -> read empty_pv .)
    INPUT           reduce using rule 75 (estatuto -> read empty_pv .)
    RETURN          reduce using rule 75 (estatuto -> read empty_pv .)
    WHILE           reduce using rule 75 (estatuto -> read empty_pv .)


state 102

    (76) estatuto -> return empty_pv .

    CLOSECURLY      reduce using rule 76 (estatuto -> return empty_pv .)
    VAR             reduce using rule 76 (estatuto -> return empty_pv .)
    ID              reduce using rule 76 (estatuto -> return empty_pv .)
    IF              reduce using rule 76 (estatuto -> return empty_pv .)
    OUTPUT          reduce using rule 76 (estatuto -> return empty_pv .)
    INPUT           reduce using rule 76 (estatuto -> return empty_pv .)
    RETURN          reduce using rule 76 (estatuto -> return empty_pv .)
    WHILE           reduce using rule 76 (estatuto -> return empty_pv .)


state 103

    (77) estatuto -> voidcall empty_pv .

    CLOSECURLY      reduce using rule 77 (estatuto -> voidcall empty_pv .)
    VAR             reduce using rule 77 (estatuto -> voidcall empty_pv .)
    ID              reduce using rule 77 (estatuto -> voidcall empty_pv .)
    IF              reduce using rule 77 (estatuto -> voidcall empty_pv .)
    OUTPUT          reduce using rule 77 (estatuto -> voidcall empty_pv .)
    INPUT           reduce using rule 77 (estatuto -> voidcall empty_pv .)
    RETURN          reduce using rule 77 (estatuto -> voidcall empty_pv .)
    WHILE           reduce using rule 77 (estatuto -> voidcall empty_pv .)


state 104

    (78) estatuto -> while empty_pv .

    CLOSECURLY      reduce using rule 78 (estatuto -> while empty_pv .)
    VAR             reduce using rule 78 (estatuto -> while empty_pv .)
    ID              reduce using rule 78 (estatuto -> while empty_pv .)
    IF              reduce using rule 78 (estatuto -> while empty_pv .)
    OUTPUT          reduce using rule 78 (estatuto -> while empty_pv .)
    INPUT           reduce using rule 78 (estatuto -> while empty_pv .)
    RETURN          reduce using rule 78 (estatuto -> while empty_pv .)
    WHILE           reduce using rule 78 (estatuto -> while empty_pv .)


state 105

    (138) assign -> ID save_comp . EQUALS save_op expresion SEMICOLON

    EQUALS          shift and go to state 136


state 106

    (80) voidcall -> ID DOT . voidcall
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 137

    voidcall                       shift and go to state 138
    callfunc                       shift and go to state 84

state 107

    (56) callfunc -> ID check_exists_func . add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (61) add_false_stack -> .

    OPENPAREN       reduce using rule 61 (add_false_stack -> .)

    add_false_stack                shift and go to state 139

state 108

    (131) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 140
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 109

    (126) write -> OUTPUT save_op . OPENPAREN expresion altwrite

    OPENPAREN       shift and go to state 141


state 110

    (125) read -> INPUT save_op . OPENPAREN ID save_comp CLOSEPAREN SEMICOLON

    OPENPAREN       shift and go to state 142


state 111

    (139) return -> RETURN expresion . generate_quad_ret SEMICOLON add_return_exists
    (140) generate_quad_ret -> .

    SEMICOLON       reduce using rule 140 (generate_quad_ret -> .)

    generate_quad_ret              shift and go to state 143

state 112

    (103) expresion -> exp . altexpresion
    (104) altexpresion -> . altexpresion2 save_op exp
    (105) altexpresion -> . empty
    (106) altexpresion2 -> . SAMEAS
    (107) altexpresion2 -> . BIGGERTHAN
    (108) altexpresion2 -> . BIGGEREQUALSTHAN
    (109) altexpresion2 -> . SMALLTHAN
    (110) altexpresion2 -> . SMALLEQUALSTHAN
    (111) altexpresion2 -> . DIFFERENTTHAN
    (112) altexpresion2 -> . AND
    (113) altexpresion2 -> . OR
    (142) empty -> .

    SAMEAS          shift and go to state 147
    BIGGERTHAN      shift and go to state 148
    BIGGEREQUALSTHAN shift and go to state 149
    SMALLTHAN       shift and go to state 150
    SMALLEQUALSTHAN shift and go to state 151
    DIFFERENTTHAN   shift and go to state 152
    AND             shift and go to state 153
    OR              shift and go to state 154
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    altexpresion                   shift and go to state 144
    altexpresion2                  shift and go to state 145
    empty                          shift and go to state 146

state 113

    (114) exp -> termino .
    (115) exp -> termino . altexp
    (116) altexp -> . SUM save_op termino altexp
    (117) altexp -> . SUBTRACT save_op termino altexp
    (118) altexp -> . empty
    (142) empty -> .

  ! reduce/reduce conflict for SAMEAS resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for AND resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for OR resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 114 (exp -> termino .)
  ! reduce/reduce conflict for COMMA resolved using rule 114 (exp -> termino .)
    SAMEAS          reduce using rule 114 (exp -> termino .)
    BIGGERTHAN      reduce using rule 114 (exp -> termino .)
    BIGGEREQUALSTHAN reduce using rule 114 (exp -> termino .)
    SMALLTHAN       reduce using rule 114 (exp -> termino .)
    SMALLEQUALSTHAN reduce using rule 114 (exp -> termino .)
    DIFFERENTTHAN   reduce using rule 114 (exp -> termino .)
    AND             reduce using rule 114 (exp -> termino .)
    OR              reduce using rule 114 (exp -> termino .)
    SEMICOLON       reduce using rule 114 (exp -> termino .)
    CLOSEPAREN      reduce using rule 114 (exp -> termino .)
    COMMA           reduce using rule 114 (exp -> termino .)
    SUM             shift and go to state 156
    SUBTRACT        shift and go to state 157

  ! SAMEAS          [ reduce using rule 142 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 142 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 142 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 142 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 142 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 142 (empty -> .) ]
  ! AND             [ reduce using rule 142 (empty -> .) ]
  ! OR              [ reduce using rule 142 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 142 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 142 (empty -> .) ]
  ! COMMA           [ reduce using rule 142 (empty -> .) ]

    altexp                         shift and go to state 155
    empty                          shift and go to state 158

state 114

    (119) termino -> factor .
    (120) termino -> factor . alttermino
    (121) alttermino -> . TIMES save_op factor alttermino
    (122) alttermino -> . DIV save_op factor alttermino
    (123) alttermino -> . empty
    (142) empty -> .

  ! reduce/reduce conflict for SUM resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for SUBTRACT resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for SAMEAS resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 119 (termino -> factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 119 (termino -> factor .)
    SUM             reduce using rule 119 (termino -> factor .)
    SUBTRACT        reduce using rule 119 (termino -> factor .)
    SAMEAS          reduce using rule 119 (termino -> factor .)
    BIGGERTHAN      reduce using rule 119 (termino -> factor .)
    BIGGEREQUALSTHAN reduce using rule 119 (termino -> factor .)
    SMALLTHAN       reduce using rule 119 (termino -> factor .)
    SMALLEQUALSTHAN reduce using rule 119 (termino -> factor .)
    DIFFERENTTHAN   reduce using rule 119 (termino -> factor .)
    AND             reduce using rule 119 (termino -> factor .)
    OR              reduce using rule 119 (termino -> factor .)
    SEMICOLON       reduce using rule 119 (termino -> factor .)
    CLOSEPAREN      reduce using rule 119 (termino -> factor .)
    COMMA           reduce using rule 119 (termino -> factor .)
    TIMES           shift and go to state 160
    DIV             shift and go to state 161

  ! SUM             [ reduce using rule 142 (empty -> .) ]
  ! SUBTRACT        [ reduce using rule 142 (empty -> .) ]
  ! SAMEAS          [ reduce using rule 142 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 142 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 142 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 142 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 142 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 142 (empty -> .) ]
  ! AND             [ reduce using rule 142 (empty -> .) ]
  ! OR              [ reduce using rule 142 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 142 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 142 (empty -> .) ]
  ! COMMA           [ reduce using rule 142 (empty -> .) ]

    alttermino                     shift and go to state 159
    empty                          shift and go to state 162

state 115

    (129) factor -> OPENPAREN . save_op expresion CLOSEPAREN save_op
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 163

state 116

    (130) factor -> varcall .

    TIMES           reduce using rule 130 (factor -> varcall .)
    DIV             reduce using rule 130 (factor -> varcall .)
    SUM             reduce using rule 130 (factor -> varcall .)
    SUBTRACT        reduce using rule 130 (factor -> varcall .)
    SAMEAS          reduce using rule 130 (factor -> varcall .)
    BIGGERTHAN      reduce using rule 130 (factor -> varcall .)
    BIGGEREQUALSTHAN reduce using rule 130 (factor -> varcall .)
    SMALLTHAN       reduce using rule 130 (factor -> varcall .)
    SMALLEQUALSTHAN reduce using rule 130 (factor -> varcall .)
    DIFFERENTTHAN   reduce using rule 130 (factor -> varcall .)
    AND             reduce using rule 130 (factor -> varcall .)
    OR              reduce using rule 130 (factor -> varcall .)
    SEMICOLON       reduce using rule 130 (factor -> varcall .)
    CLOSEPAREN      reduce using rule 130 (factor -> varcall .)
    COMMA           reduce using rule 130 (factor -> varcall .)


state 117

    (87) varcall -> varcte . save_const
    (101) save_const -> .

    TIMES           reduce using rule 101 (save_const -> .)
    DIV             reduce using rule 101 (save_const -> .)
    SUM             reduce using rule 101 (save_const -> .)
    SUBTRACT        reduce using rule 101 (save_const -> .)
    SAMEAS          reduce using rule 101 (save_const -> .)
    BIGGERTHAN      reduce using rule 101 (save_const -> .)
    BIGGEREQUALSTHAN reduce using rule 101 (save_const -> .)
    SMALLTHAN       reduce using rule 101 (save_const -> .)
    SMALLEQUALSTHAN reduce using rule 101 (save_const -> .)
    DIFFERENTTHAN   reduce using rule 101 (save_const -> .)
    AND             reduce using rule 101 (save_const -> .)
    OR              reduce using rule 101 (save_const -> .)
    SEMICOLON       reduce using rule 101 (save_const -> .)
    CLOSEPAREN      reduce using rule 101 (save_const -> .)
    COMMA           reduce using rule 101 (save_const -> .)

    save_const                     shift and go to state 164

state 118

    (88) varcall -> varcomplicated . save_comp
    (102) save_comp -> .

    TIMES           reduce using rule 102 (save_comp -> .)
    DIV             reduce using rule 102 (save_comp -> .)
    SUM             reduce using rule 102 (save_comp -> .)
    SUBTRACT        reduce using rule 102 (save_comp -> .)
    SAMEAS          reduce using rule 102 (save_comp -> .)
    BIGGERTHAN      reduce using rule 102 (save_comp -> .)
    BIGGEREQUALSTHAN reduce using rule 102 (save_comp -> .)
    SMALLTHAN       reduce using rule 102 (save_comp -> .)
    SMALLEQUALSTHAN reduce using rule 102 (save_comp -> .)
    DIFFERENTTHAN   reduce using rule 102 (save_comp -> .)
    AND             reduce using rule 102 (save_comp -> .)
    OR              reduce using rule 102 (save_comp -> .)
    SEMICOLON       reduce using rule 102 (save_comp -> .)
    CLOSEPAREN      reduce using rule 102 (save_comp -> .)
    COMMA           reduce using rule 102 (save_comp -> .)

    save_comp                      shift and go to state 165

state 119

    (89) varcte -> TRUE .

    TIMES           reduce using rule 89 (varcte -> TRUE .)
    DIV             reduce using rule 89 (varcte -> TRUE .)
    SUM             reduce using rule 89 (varcte -> TRUE .)
    SUBTRACT        reduce using rule 89 (varcte -> TRUE .)
    SAMEAS          reduce using rule 89 (varcte -> TRUE .)
    BIGGERTHAN      reduce using rule 89 (varcte -> TRUE .)
    BIGGEREQUALSTHAN reduce using rule 89 (varcte -> TRUE .)
    SMALLTHAN       reduce using rule 89 (varcte -> TRUE .)
    SMALLEQUALSTHAN reduce using rule 89 (varcte -> TRUE .)
    DIFFERENTTHAN   reduce using rule 89 (varcte -> TRUE .)
    AND             reduce using rule 89 (varcte -> TRUE .)
    OR              reduce using rule 89 (varcte -> TRUE .)
    SEMICOLON       reduce using rule 89 (varcte -> TRUE .)
    CLOSEPAREN      reduce using rule 89 (varcte -> TRUE .)
    COMMA           reduce using rule 89 (varcte -> TRUE .)


state 120

    (90) varcte -> FALSE .

    TIMES           reduce using rule 90 (varcte -> FALSE .)
    DIV             reduce using rule 90 (varcte -> FALSE .)
    SUM             reduce using rule 90 (varcte -> FALSE .)
    SUBTRACT        reduce using rule 90 (varcte -> FALSE .)
    SAMEAS          reduce using rule 90 (varcte -> FALSE .)
    BIGGERTHAN      reduce using rule 90 (varcte -> FALSE .)
    BIGGEREQUALSTHAN reduce using rule 90 (varcte -> FALSE .)
    SMALLTHAN       reduce using rule 90 (varcte -> FALSE .)
    SMALLEQUALSTHAN reduce using rule 90 (varcte -> FALSE .)
    DIFFERENTTHAN   reduce using rule 90 (varcte -> FALSE .)
    AND             reduce using rule 90 (varcte -> FALSE .)
    OR              reduce using rule 90 (varcte -> FALSE .)
    SEMICOLON       reduce using rule 90 (varcte -> FALSE .)
    CLOSEPAREN      reduce using rule 90 (varcte -> FALSE .)
    COMMA           reduce using rule 90 (varcte -> FALSE .)


state 121

    (91) varcte -> CTEFLOAT .

    TIMES           reduce using rule 91 (varcte -> CTEFLOAT .)
    DIV             reduce using rule 91 (varcte -> CTEFLOAT .)
    SUM             reduce using rule 91 (varcte -> CTEFLOAT .)
    SUBTRACT        reduce using rule 91 (varcte -> CTEFLOAT .)
    SAMEAS          reduce using rule 91 (varcte -> CTEFLOAT .)
    BIGGERTHAN      reduce using rule 91 (varcte -> CTEFLOAT .)
    BIGGEREQUALSTHAN reduce using rule 91 (varcte -> CTEFLOAT .)
    SMALLTHAN       reduce using rule 91 (varcte -> CTEFLOAT .)
    SMALLEQUALSTHAN reduce using rule 91 (varcte -> CTEFLOAT .)
    DIFFERENTTHAN   reduce using rule 91 (varcte -> CTEFLOAT .)
    AND             reduce using rule 91 (varcte -> CTEFLOAT .)
    OR              reduce using rule 91 (varcte -> CTEFLOAT .)
    SEMICOLON       reduce using rule 91 (varcte -> CTEFLOAT .)
    CLOSEPAREN      reduce using rule 91 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 91 (varcte -> CTEFLOAT .)


state 122

    (92) varcte -> CTESTRING .

    TIMES           reduce using rule 92 (varcte -> CTESTRING .)
    DIV             reduce using rule 92 (varcte -> CTESTRING .)
    SUM             reduce using rule 92 (varcte -> CTESTRING .)
    SUBTRACT        reduce using rule 92 (varcte -> CTESTRING .)
    SAMEAS          reduce using rule 92 (varcte -> CTESTRING .)
    BIGGERTHAN      reduce using rule 92 (varcte -> CTESTRING .)
    BIGGEREQUALSTHAN reduce using rule 92 (varcte -> CTESTRING .)
    SMALLTHAN       reduce using rule 92 (varcte -> CTESTRING .)
    SMALLEQUALSTHAN reduce using rule 92 (varcte -> CTESTRING .)
    DIFFERENTTHAN   reduce using rule 92 (varcte -> CTESTRING .)
    AND             reduce using rule 92 (varcte -> CTESTRING .)
    OR              reduce using rule 92 (varcte -> CTESTRING .)
    SEMICOLON       reduce using rule 92 (varcte -> CTESTRING .)
    CLOSEPAREN      reduce using rule 92 (varcte -> CTESTRING .)
    COMMA           reduce using rule 92 (varcte -> CTESTRING .)


state 123

    (93) varcte -> CTEINT .

    TIMES           reduce using rule 93 (varcte -> CTEINT .)
    DIV             reduce using rule 93 (varcte -> CTEINT .)
    SUM             reduce using rule 93 (varcte -> CTEINT .)
    SUBTRACT        reduce using rule 93 (varcte -> CTEINT .)
    SAMEAS          reduce using rule 93 (varcte -> CTEINT .)
    BIGGERTHAN      reduce using rule 93 (varcte -> CTEINT .)
    BIGGEREQUALSTHAN reduce using rule 93 (varcte -> CTEINT .)
    SMALLTHAN       reduce using rule 93 (varcte -> CTEINT .)
    SMALLEQUALSTHAN reduce using rule 93 (varcte -> CTEINT .)
    DIFFERENTTHAN   reduce using rule 93 (varcte -> CTEINT .)
    AND             reduce using rule 93 (varcte -> CTEINT .)
    OR              reduce using rule 93 (varcte -> CTEINT .)
    SEMICOLON       reduce using rule 93 (varcte -> CTEINT .)
    CLOSEPAREN      reduce using rule 93 (varcte -> CTEINT .)
    COMMA           reduce using rule 93 (varcte -> CTEINT .)


state 124

    (94) varcomplicated -> varcomp1 .

    TIMES           reduce using rule 94 (varcomplicated -> varcomp1 .)
    DIV             reduce using rule 94 (varcomplicated -> varcomp1 .)
    SUM             reduce using rule 94 (varcomplicated -> varcomp1 .)
    SUBTRACT        reduce using rule 94 (varcomplicated -> varcomp1 .)
    SAMEAS          reduce using rule 94 (varcomplicated -> varcomp1 .)
    BIGGERTHAN      reduce using rule 94 (varcomplicated -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 94 (varcomplicated -> varcomp1 .)
    SMALLTHAN       reduce using rule 94 (varcomplicated -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 94 (varcomplicated -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 94 (varcomplicated -> varcomp1 .)
    AND             reduce using rule 94 (varcomplicated -> varcomp1 .)
    OR              reduce using rule 94 (varcomplicated -> varcomp1 .)
    SEMICOLON       reduce using rule 94 (varcomplicated -> varcomp1 .)
    CLOSEPAREN      reduce using rule 94 (varcomplicated -> varcomp1 .)
    COMMA           reduce using rule 94 (varcomplicated -> varcomp1 .)


state 125

    (95) varcomplicated -> callfunc .

    TIMES           reduce using rule 95 (varcomplicated -> callfunc .)
    DIV             reduce using rule 95 (varcomplicated -> callfunc .)
    SUM             reduce using rule 95 (varcomplicated -> callfunc .)
    SUBTRACT        reduce using rule 95 (varcomplicated -> callfunc .)
    SAMEAS          reduce using rule 95 (varcomplicated -> callfunc .)
    BIGGERTHAN      reduce using rule 95 (varcomplicated -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 95 (varcomplicated -> callfunc .)
    SMALLTHAN       reduce using rule 95 (varcomplicated -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 95 (varcomplicated -> callfunc .)
    DIFFERENTTHAN   reduce using rule 95 (varcomplicated -> callfunc .)
    AND             reduce using rule 95 (varcomplicated -> callfunc .)
    OR              reduce using rule 95 (varcomplicated -> callfunc .)
    SEMICOLON       reduce using rule 95 (varcomplicated -> callfunc .)
    CLOSEPAREN      reduce using rule 95 (varcomplicated -> callfunc .)
    COMMA           reduce using rule 95 (varcomplicated -> callfunc .)


state 126

    (96) varcomp1 -> ID . varcomp2
    (56) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (97) varcomp2 -> . DOT varcomp3
    (98) varcomp2 -> . empty
    (66) check_exists_func -> .
    (142) empty -> .

    DOT             shift and go to state 167
    OPENPAREN       reduce using rule 66 (check_exists_func -> .)
    TIMES           reduce using rule 142 (empty -> .)
    DIV             reduce using rule 142 (empty -> .)
    SUM             reduce using rule 142 (empty -> .)
    SUBTRACT        reduce using rule 142 (empty -> .)
    SAMEAS          reduce using rule 142 (empty -> .)
    BIGGERTHAN      reduce using rule 142 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 142 (empty -> .)
    SMALLTHAN       reduce using rule 142 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 142 (empty -> .)
    DIFFERENTTHAN   reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    varcomp2                       shift and go to state 166
    check_exists_func              shift and go to state 107
    empty                          shift and go to state 168

state 127

    (79) voidcall -> callfunc SEMICOLON .

    CLOSECURLY      reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    VAR             reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    ID              reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    IF              reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    OUTPUT          reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    INPUT           reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    RETURN          reduce using rule 79 (voidcall -> callfunc SEMICOLON .)
    WHILE           reduce using rule 79 (voidcall -> callfunc SEMICOLON .)


state 128

    (82) while -> WHILE add_stack_jump . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    OPENPAREN       shift and go to state 169


state 129

    (17) alt2class -> constructor CLOSECURLY SEMICOLON . remove_class_scope
    (19) remove_class_scope -> .

    CLASS           reduce using rule 19 (remove_class_scope -> .)
    VAR             reduce using rule 19 (remove_class_scope -> .)
    FUNC            reduce using rule 19 (remove_class_scope -> .)
    MAIN            reduce using rule 19 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 170

state 130

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN . altconst store_params CLOSEPAREN OPENCURLY alt2const
    (21) altconst -> . params
    (22) altconst -> . empty
    (52) params -> . ID TWODOTS type save_params altparams
    (142) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 142 (empty -> .)

    altconst                       shift and go to state 171
    params                         shift and go to state 172
    empty                          shift and go to state 173

state 131

    (34) dec_array2 -> OPENBRACKET CTEINT . CLOSEBRACKET

    CLOSEBRACKET    shift and go to state 174


state 132

    (52) params -> ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 52 (params -> ID TWODOTS type save_params altparams .)


state 133

    (53) altparams -> COMMA . ID TWODOTS type save_params altparams

    ID              shift and go to state 175


state 134

    (54) altparams -> empty .

    CLOSEPAREN      reduce using rule 54 (altparams -> empty .)


state 135

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params . OPENCURLY alt3func

    OPENCURLY       shift and go to state 176


state 136

    (138) assign -> ID save_comp EQUALS . save_op expresion SEMICOLON
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 177

state 137

    (80) voidcall -> ID . DOT voidcall
    (56) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (66) check_exists_func -> .

    DOT             shift and go to state 106
    OPENPAREN       reduce using rule 66 (check_exists_func -> .)

    check_exists_func              shift and go to state 107

state 138

    (80) voidcall -> ID DOT voidcall .

    CLOSECURLY      reduce using rule 80 (voidcall -> ID DOT voidcall .)
    VAR             reduce using rule 80 (voidcall -> ID DOT voidcall .)
    ID              reduce using rule 80 (voidcall -> ID DOT voidcall .)
    IF              reduce using rule 80 (voidcall -> ID DOT voidcall .)
    OUTPUT          reduce using rule 80 (voidcall -> ID DOT voidcall .)
    INPUT           reduce using rule 80 (voidcall -> ID DOT voidcall .)
    RETURN          reduce using rule 80 (voidcall -> ID DOT voidcall .)
    WHILE           reduce using rule 80 (voidcall -> ID DOT voidcall .)


state 139

    (56) callfunc -> ID check_exists_func add_false_stack . OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 178


state 140

    (131) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    CLOSEPAREN      shift and go to state 179


state 141

    (126) write -> OUTPUT save_op OPENPAREN . expresion altwrite
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 180
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 142

    (125) read -> INPUT save_op OPENPAREN . ID save_comp CLOSEPAREN SEMICOLON

    ID              shift and go to state 181


state 143

    (139) return -> RETURN expresion generate_quad_ret . SEMICOLON add_return_exists

    SEMICOLON       shift and go to state 182


state 144

    (103) expresion -> exp altexpresion .

    SEMICOLON       reduce using rule 103 (expresion -> exp altexpresion .)
    CLOSEPAREN      reduce using rule 103 (expresion -> exp altexpresion .)
    COMMA           reduce using rule 103 (expresion -> exp altexpresion .)


state 145

    (104) altexpresion -> altexpresion2 . save_op exp
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 183

state 146

    (105) altexpresion -> empty .

    SEMICOLON       reduce using rule 105 (altexpresion -> empty .)
    CLOSEPAREN      reduce using rule 105 (altexpresion -> empty .)
    COMMA           reduce using rule 105 (altexpresion -> empty .)


state 147

    (106) altexpresion2 -> SAMEAS .

    OPENPAREN       reduce using rule 106 (altexpresion2 -> SAMEAS .)
    TRUE            reduce using rule 106 (altexpresion2 -> SAMEAS .)
    FALSE           reduce using rule 106 (altexpresion2 -> SAMEAS .)
    CTEFLOAT        reduce using rule 106 (altexpresion2 -> SAMEAS .)
    CTESTRING       reduce using rule 106 (altexpresion2 -> SAMEAS .)
    CTEINT          reduce using rule 106 (altexpresion2 -> SAMEAS .)
    ID              reduce using rule 106 (altexpresion2 -> SAMEAS .)


state 148

    (107) altexpresion2 -> BIGGERTHAN .

    OPENPAREN       reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    TRUE            reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    FALSE           reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    CTEFLOAT        reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    CTESTRING       reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    CTEINT          reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)
    ID              reduce using rule 107 (altexpresion2 -> BIGGERTHAN .)


state 149

    (108) altexpresion2 -> BIGGEREQUALSTHAN .

    OPENPAREN       reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    TRUE            reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    FALSE           reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEFLOAT        reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTESTRING       reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEINT          reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)
    ID              reduce using rule 108 (altexpresion2 -> BIGGEREQUALSTHAN .)


state 150

    (109) altexpresion2 -> SMALLTHAN .

    OPENPAREN       reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    TRUE            reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    FALSE           reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    CTEFLOAT        reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    CTESTRING       reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    CTEINT          reduce using rule 109 (altexpresion2 -> SMALLTHAN .)
    ID              reduce using rule 109 (altexpresion2 -> SMALLTHAN .)


state 151

    (110) altexpresion2 -> SMALLEQUALSTHAN .

    OPENPAREN       reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    TRUE            reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    FALSE           reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEFLOAT        reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTESTRING       reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEINT          reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)
    ID              reduce using rule 110 (altexpresion2 -> SMALLEQUALSTHAN .)


state 152

    (111) altexpresion2 -> DIFFERENTTHAN .

    OPENPAREN       reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    TRUE            reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    FALSE           reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    CTEFLOAT        reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    CTESTRING       reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    CTEINT          reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)
    ID              reduce using rule 111 (altexpresion2 -> DIFFERENTTHAN .)


state 153

    (112) altexpresion2 -> AND .

    OPENPAREN       reduce using rule 112 (altexpresion2 -> AND .)
    TRUE            reduce using rule 112 (altexpresion2 -> AND .)
    FALSE           reduce using rule 112 (altexpresion2 -> AND .)
    CTEFLOAT        reduce using rule 112 (altexpresion2 -> AND .)
    CTESTRING       reduce using rule 112 (altexpresion2 -> AND .)
    CTEINT          reduce using rule 112 (altexpresion2 -> AND .)
    ID              reduce using rule 112 (altexpresion2 -> AND .)


state 154

    (113) altexpresion2 -> OR .

    OPENPAREN       reduce using rule 113 (altexpresion2 -> OR .)
    TRUE            reduce using rule 113 (altexpresion2 -> OR .)
    FALSE           reduce using rule 113 (altexpresion2 -> OR .)
    CTEFLOAT        reduce using rule 113 (altexpresion2 -> OR .)
    CTESTRING       reduce using rule 113 (altexpresion2 -> OR .)
    CTEINT          reduce using rule 113 (altexpresion2 -> OR .)
    ID              reduce using rule 113 (altexpresion2 -> OR .)


state 155

    (115) exp -> termino altexp .

    SAMEAS          reduce using rule 115 (exp -> termino altexp .)
    BIGGERTHAN      reduce using rule 115 (exp -> termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 115 (exp -> termino altexp .)
    SMALLTHAN       reduce using rule 115 (exp -> termino altexp .)
    SMALLEQUALSTHAN reduce using rule 115 (exp -> termino altexp .)
    DIFFERENTTHAN   reduce using rule 115 (exp -> termino altexp .)
    AND             reduce using rule 115 (exp -> termino altexp .)
    OR              reduce using rule 115 (exp -> termino altexp .)
    SEMICOLON       reduce using rule 115 (exp -> termino altexp .)
    CLOSEPAREN      reduce using rule 115 (exp -> termino altexp .)
    COMMA           reduce using rule 115 (exp -> termino altexp .)


state 156

    (116) altexp -> SUM . save_op termino altexp
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 184

state 157

    (117) altexp -> SUBTRACT . save_op termino altexp
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 185

state 158

    (118) altexp -> empty .

    SAMEAS          reduce using rule 118 (altexp -> empty .)
    BIGGERTHAN      reduce using rule 118 (altexp -> empty .)
    BIGGEREQUALSTHAN reduce using rule 118 (altexp -> empty .)
    SMALLTHAN       reduce using rule 118 (altexp -> empty .)
    SMALLEQUALSTHAN reduce using rule 118 (altexp -> empty .)
    DIFFERENTTHAN   reduce using rule 118 (altexp -> empty .)
    AND             reduce using rule 118 (altexp -> empty .)
    OR              reduce using rule 118 (altexp -> empty .)
    SEMICOLON       reduce using rule 118 (altexp -> empty .)
    CLOSEPAREN      reduce using rule 118 (altexp -> empty .)
    COMMA           reduce using rule 118 (altexp -> empty .)


state 159

    (120) termino -> factor alttermino .

    SUM             reduce using rule 120 (termino -> factor alttermino .)
    SUBTRACT        reduce using rule 120 (termino -> factor alttermino .)
    SAMEAS          reduce using rule 120 (termino -> factor alttermino .)
    BIGGERTHAN      reduce using rule 120 (termino -> factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 120 (termino -> factor alttermino .)
    SMALLTHAN       reduce using rule 120 (termino -> factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 120 (termino -> factor alttermino .)
    DIFFERENTTHAN   reduce using rule 120 (termino -> factor alttermino .)
    AND             reduce using rule 120 (termino -> factor alttermino .)
    OR              reduce using rule 120 (termino -> factor alttermino .)
    SEMICOLON       reduce using rule 120 (termino -> factor alttermino .)
    CLOSEPAREN      reduce using rule 120 (termino -> factor alttermino .)
    COMMA           reduce using rule 120 (termino -> factor alttermino .)


state 160

    (121) alttermino -> TIMES . save_op factor alttermino
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 186

state 161

    (122) alttermino -> DIV . save_op factor alttermino
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 187

state 162

    (123) alttermino -> empty .

    SUM             reduce using rule 123 (alttermino -> empty .)
    SUBTRACT        reduce using rule 123 (alttermino -> empty .)
    SAMEAS          reduce using rule 123 (alttermino -> empty .)
    BIGGERTHAN      reduce using rule 123 (alttermino -> empty .)
    BIGGEREQUALSTHAN reduce using rule 123 (alttermino -> empty .)
    SMALLTHAN       reduce using rule 123 (alttermino -> empty .)
    SMALLEQUALSTHAN reduce using rule 123 (alttermino -> empty .)
    DIFFERENTTHAN   reduce using rule 123 (alttermino -> empty .)
    AND             reduce using rule 123 (alttermino -> empty .)
    OR              reduce using rule 123 (alttermino -> empty .)
    SEMICOLON       reduce using rule 123 (alttermino -> empty .)
    CLOSEPAREN      reduce using rule 123 (alttermino -> empty .)
    COMMA           reduce using rule 123 (alttermino -> empty .)


state 163

    (129) factor -> OPENPAREN save_op . expresion CLOSEPAREN save_op
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 188
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 164

    (87) varcall -> varcte save_const .

    TIMES           reduce using rule 87 (varcall -> varcte save_const .)
    DIV             reduce using rule 87 (varcall -> varcte save_const .)
    SUM             reduce using rule 87 (varcall -> varcte save_const .)
    SUBTRACT        reduce using rule 87 (varcall -> varcte save_const .)
    SAMEAS          reduce using rule 87 (varcall -> varcte save_const .)
    BIGGERTHAN      reduce using rule 87 (varcall -> varcte save_const .)
    BIGGEREQUALSTHAN reduce using rule 87 (varcall -> varcte save_const .)
    SMALLTHAN       reduce using rule 87 (varcall -> varcte save_const .)
    SMALLEQUALSTHAN reduce using rule 87 (varcall -> varcte save_const .)
    DIFFERENTTHAN   reduce using rule 87 (varcall -> varcte save_const .)
    AND             reduce using rule 87 (varcall -> varcte save_const .)
    OR              reduce using rule 87 (varcall -> varcte save_const .)
    SEMICOLON       reduce using rule 87 (varcall -> varcte save_const .)
    CLOSEPAREN      reduce using rule 87 (varcall -> varcte save_const .)
    COMMA           reduce using rule 87 (varcall -> varcte save_const .)


state 165

    (88) varcall -> varcomplicated save_comp .

    TIMES           reduce using rule 88 (varcall -> varcomplicated save_comp .)
    DIV             reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SUM             reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SUBTRACT        reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SAMEAS          reduce using rule 88 (varcall -> varcomplicated save_comp .)
    BIGGERTHAN      reduce using rule 88 (varcall -> varcomplicated save_comp .)
    BIGGEREQUALSTHAN reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SMALLTHAN       reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SMALLEQUALSTHAN reduce using rule 88 (varcall -> varcomplicated save_comp .)
    DIFFERENTTHAN   reduce using rule 88 (varcall -> varcomplicated save_comp .)
    AND             reduce using rule 88 (varcall -> varcomplicated save_comp .)
    OR              reduce using rule 88 (varcall -> varcomplicated save_comp .)
    SEMICOLON       reduce using rule 88 (varcall -> varcomplicated save_comp .)
    CLOSEPAREN      reduce using rule 88 (varcall -> varcomplicated save_comp .)
    COMMA           reduce using rule 88 (varcall -> varcomplicated save_comp .)


state 166

    (96) varcomp1 -> ID varcomp2 .

    TIMES           reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    DIV             reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SUM             reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SUBTRACT        reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SAMEAS          reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    BIGGERTHAN      reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    BIGGEREQUALSTHAN reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SMALLTHAN       reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SMALLEQUALSTHAN reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    DIFFERENTTHAN   reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    AND             reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    OR              reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    SEMICOLON       reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    CLOSEPAREN      reduce using rule 96 (varcomp1 -> ID varcomp2 .)
    COMMA           reduce using rule 96 (varcomp1 -> ID varcomp2 .)


state 167

    (97) varcomp2 -> DOT . varcomp3
    (99) varcomp3 -> . varcomp1
    (100) varcomp3 -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 126

    varcomp3                       shift and go to state 189
    varcomp1                       shift and go to state 190
    callfunc                       shift and go to state 191

state 168

    (98) varcomp2 -> empty .

    TIMES           reduce using rule 98 (varcomp2 -> empty .)
    DIV             reduce using rule 98 (varcomp2 -> empty .)
    SUM             reduce using rule 98 (varcomp2 -> empty .)
    SUBTRACT        reduce using rule 98 (varcomp2 -> empty .)
    SAMEAS          reduce using rule 98 (varcomp2 -> empty .)
    BIGGERTHAN      reduce using rule 98 (varcomp2 -> empty .)
    BIGGEREQUALSTHAN reduce using rule 98 (varcomp2 -> empty .)
    SMALLTHAN       reduce using rule 98 (varcomp2 -> empty .)
    SMALLEQUALSTHAN reduce using rule 98 (varcomp2 -> empty .)
    DIFFERENTTHAN   reduce using rule 98 (varcomp2 -> empty .)
    AND             reduce using rule 98 (varcomp2 -> empty .)
    OR              reduce using rule 98 (varcomp2 -> empty .)
    SEMICOLON       reduce using rule 98 (varcomp2 -> empty .)
    CLOSEPAREN      reduce using rule 98 (varcomp2 -> empty .)
    COMMA           reduce using rule 98 (varcomp2 -> empty .)


state 169

    (82) while -> WHILE add_stack_jump OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 192
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 170

    (17) alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .

    CLASS           reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    VAR             reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    FUNC            reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    MAIN            reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)


state 171

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst . store_params CLOSEPAREN OPENCURLY alt2const
    (50) store_params -> .

    CLOSEPAREN      reduce using rule 50 (store_params -> .)

    store_params                   shift and go to state 193

state 172

    (21) altconst -> params .

    CLOSEPAREN      reduce using rule 21 (altconst -> params .)


state 173

    (22) altconst -> empty .

    CLOSEPAREN      reduce using rule 22 (altconst -> empty .)


state 174

    (34) dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .

    COMMA           reduce using rule 34 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)
    TWODOTS         reduce using rule 34 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)


state 175

    (53) altparams -> COMMA ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 194


state 176

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY . alt3func
    (46) alt3func -> . var alt3func
    (47) alt3func -> . estatuto alt3func
    (48) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 198
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt3func                       shift and go to state 195
    var                            shift and go to state 196
    estatuto                       shift and go to state 197
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 177

    (138) assign -> ID save_comp EQUALS save_op . expresion SEMICOLON
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 199
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 178

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN . altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (57) altcall -> . expresion generate_param_quad alt2call
    (58) altcall -> . empty
    (103) expresion -> . exp altexpresion
    (142) empty -> .
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 142 (empty -> .)
    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    altcall                        shift and go to state 200
    expresion                      shift and go to state 201
    empty                          shift and go to state 202
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 179

    (131) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (135) add_gotof -> .

    OPENCURLY       reduce using rule 135 (add_gotof -> .)

    add_gotof                      shift and go to state 203

state 180

    (126) write -> OUTPUT save_op OPENPAREN expresion . altwrite
    (127) altwrite -> . COMMA save_op expresion altwrite
    (128) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 205
    CLOSEPAREN      shift and go to state 206

    altwrite                       shift and go to state 204

state 181

    (125) read -> INPUT save_op OPENPAREN ID . save_comp CLOSEPAREN SEMICOLON
    (102) save_comp -> .

    CLOSEPAREN      reduce using rule 102 (save_comp -> .)

    save_comp                      shift and go to state 207

state 182

    (139) return -> RETURN expresion generate_quad_ret SEMICOLON . add_return_exists
    (141) add_return_exists -> .

    CLOSECURLY      reduce using rule 141 (add_return_exists -> .)
    VAR             reduce using rule 141 (add_return_exists -> .)
    ID              reduce using rule 141 (add_return_exists -> .)
    IF              reduce using rule 141 (add_return_exists -> .)
    OUTPUT          reduce using rule 141 (add_return_exists -> .)
    INPUT           reduce using rule 141 (add_return_exists -> .)
    RETURN          reduce using rule 141 (add_return_exists -> .)
    WHILE           reduce using rule 141 (add_return_exists -> .)

    add_return_exists              shift and go to state 208

state 183

    (104) altexpresion -> altexpresion2 save_op . exp
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    exp                            shift and go to state 209
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 184

    (116) altexp -> SUM save_op . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    termino                        shift and go to state 210
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 185

    (117) altexp -> SUBTRACT save_op . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    termino                        shift and go to state 211
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 186

    (121) alttermino -> TIMES save_op . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    factor                         shift and go to state 212
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 187

    (122) alttermino -> DIV save_op . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    factor                         shift and go to state 213
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 188

    (129) factor -> OPENPAREN save_op expresion . CLOSEPAREN save_op

    CLOSEPAREN      shift and go to state 214


state 189

    (97) varcomp2 -> DOT varcomp3 .

    TIMES           reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    DIV             reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SUM             reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SUBTRACT        reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SAMEAS          reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    BIGGERTHAN      reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    BIGGEREQUALSTHAN reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SMALLTHAN       reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SMALLEQUALSTHAN reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    DIFFERENTTHAN   reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    AND             reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    OR              reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    SEMICOLON       reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    CLOSEPAREN      reduce using rule 97 (varcomp2 -> DOT varcomp3 .)
    COMMA           reduce using rule 97 (varcomp2 -> DOT varcomp3 .)


state 190

    (99) varcomp3 -> varcomp1 .

    TIMES           reduce using rule 99 (varcomp3 -> varcomp1 .)
    DIV             reduce using rule 99 (varcomp3 -> varcomp1 .)
    SUM             reduce using rule 99 (varcomp3 -> varcomp1 .)
    SUBTRACT        reduce using rule 99 (varcomp3 -> varcomp1 .)
    SAMEAS          reduce using rule 99 (varcomp3 -> varcomp1 .)
    BIGGERTHAN      reduce using rule 99 (varcomp3 -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 99 (varcomp3 -> varcomp1 .)
    SMALLTHAN       reduce using rule 99 (varcomp3 -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 99 (varcomp3 -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 99 (varcomp3 -> varcomp1 .)
    AND             reduce using rule 99 (varcomp3 -> varcomp1 .)
    OR              reduce using rule 99 (varcomp3 -> varcomp1 .)
    SEMICOLON       reduce using rule 99 (varcomp3 -> varcomp1 .)
    CLOSEPAREN      reduce using rule 99 (varcomp3 -> varcomp1 .)
    COMMA           reduce using rule 99 (varcomp3 -> varcomp1 .)


state 191

    (100) varcomp3 -> callfunc .

    TIMES           reduce using rule 100 (varcomp3 -> callfunc .)
    DIV             reduce using rule 100 (varcomp3 -> callfunc .)
    SUM             reduce using rule 100 (varcomp3 -> callfunc .)
    SUBTRACT        reduce using rule 100 (varcomp3 -> callfunc .)
    SAMEAS          reduce using rule 100 (varcomp3 -> callfunc .)
    BIGGERTHAN      reduce using rule 100 (varcomp3 -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 100 (varcomp3 -> callfunc .)
    SMALLTHAN       reduce using rule 100 (varcomp3 -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 100 (varcomp3 -> callfunc .)
    DIFFERENTTHAN   reduce using rule 100 (varcomp3 -> callfunc .)
    AND             reduce using rule 100 (varcomp3 -> callfunc .)
    OR              reduce using rule 100 (varcomp3 -> callfunc .)
    SEMICOLON       reduce using rule 100 (varcomp3 -> callfunc .)
    CLOSEPAREN      reduce using rule 100 (varcomp3 -> callfunc .)
    COMMA           reduce using rule 100 (varcomp3 -> callfunc .)


state 192

    (82) while -> WHILE add_stack_jump OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    CLOSEPAREN      shift and go to state 215


state 193

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params . CLOSEPAREN OPENCURLY alt2const

    CLOSEPAREN      shift and go to state 216


state 194

    (53) altparams -> COMMA ID TWODOTS . type save_params altparams
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING
    (70) type -> . ID
    (71) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 217

state 195

    (41) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .

    CLASS           reduce using rule 41 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    VAR             reduce using rule 41 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    FUNC            reduce using rule 41 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    MAIN            reduce using rule 41 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    CONSTRUCTOR     reduce using rule 41 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)


state 196

    (46) alt3func -> var . alt3func
    (46) alt3func -> . var alt3func
    (47) alt3func -> . estatuto alt3func
    (48) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 198
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 196
    alt3func                       shift and go to state 218
    estatuto                       shift and go to state 197
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 197

    (47) alt3func -> estatuto . alt3func
    (46) alt3func -> . var alt3func
    (47) alt3func -> . estatuto alt3func
    (48) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 198
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 197
    alt3func                       shift and go to state 219
    var                            shift and go to state 196
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 198

    (48) alt3func -> CLOSECURLY . remove_function_scope
    (51) remove_function_scope -> .

    CLASS           reduce using rule 51 (remove_function_scope -> .)
    VAR             reduce using rule 51 (remove_function_scope -> .)
    FUNC            reduce using rule 51 (remove_function_scope -> .)
    MAIN            reduce using rule 51 (remove_function_scope -> .)
    CONSTRUCTOR     reduce using rule 51 (remove_function_scope -> .)

    remove_function_scope          shift and go to state 220

state 199

    (138) assign -> ID save_comp EQUALS save_op expresion . SEMICOLON

    SEMICOLON       shift and go to state 221


state 200

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall . check_params CLOSEPAREN end_false_stack generate_gosub
    (64) check_params -> .

    CLOSEPAREN      reduce using rule 64 (check_params -> .)

    check_params                   shift and go to state 222

state 201

    (57) altcall -> expresion . generate_param_quad alt2call
    (65) generate_param_quad -> .

    COMMA           reduce using rule 65 (generate_param_quad -> .)
    CLOSEPAREN      reduce using rule 65 (generate_param_quad -> .)

    generate_param_quad            shift and go to state 223

state 202

    (58) altcall -> empty .

    CLOSEPAREN      reduce using rule 58 (altcall -> empty .)


state 203

    (131) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition add_end_if
    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 224


state 204

    (126) write -> OUTPUT save_op OPENPAREN expresion altwrite .

    CLOSECURLY      reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    VAR             reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    ID              reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    IF              reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    OUTPUT          reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    INPUT           reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    RETURN          reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    WHILE           reduce using rule 126 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)


state 205

    (127) altwrite -> COMMA . save_op expresion altwrite
    (124) save_op -> .

    OPENPAREN       reduce using rule 124 (save_op -> .)
    TRUE            reduce using rule 124 (save_op -> .)
    FALSE           reduce using rule 124 (save_op -> .)
    CTEFLOAT        reduce using rule 124 (save_op -> .)
    CTESTRING       reduce using rule 124 (save_op -> .)
    CTEINT          reduce using rule 124 (save_op -> .)
    ID              reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 225

state 206

    (128) altwrite -> CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 226


state 207

    (125) read -> INPUT save_op OPENPAREN ID save_comp . CLOSEPAREN SEMICOLON

    CLOSEPAREN      shift and go to state 227


state 208

    (139) return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .

    CLOSECURLY      reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    VAR             reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    ID              reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    IF              reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    OUTPUT          reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    INPUT           reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    RETURN          reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    WHILE           reduce using rule 139 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)


state 209

    (104) altexpresion -> altexpresion2 save_op exp .

    SEMICOLON       reduce using rule 104 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEPAREN      reduce using rule 104 (altexpresion -> altexpresion2 save_op exp .)
    COMMA           reduce using rule 104 (altexpresion -> altexpresion2 save_op exp .)


state 210

    (116) altexp -> SUM save_op termino . altexp
    (116) altexp -> . SUM save_op termino altexp
    (117) altexp -> . SUBTRACT save_op termino altexp
    (118) altexp -> . empty
    (142) empty -> .

    SUM             shift and go to state 156
    SUBTRACT        shift and go to state 157
    SAMEAS          reduce using rule 142 (empty -> .)
    BIGGERTHAN      reduce using rule 142 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 142 (empty -> .)
    SMALLTHAN       reduce using rule 142 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 142 (empty -> .)
    DIFFERENTTHAN   reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    altexp                         shift and go to state 228
    empty                          shift and go to state 158

state 211

    (117) altexp -> SUBTRACT save_op termino . altexp
    (116) altexp -> . SUM save_op termino altexp
    (117) altexp -> . SUBTRACT save_op termino altexp
    (118) altexp -> . empty
    (142) empty -> .

    SUM             shift and go to state 156
    SUBTRACT        shift and go to state 157
    SAMEAS          reduce using rule 142 (empty -> .)
    BIGGERTHAN      reduce using rule 142 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 142 (empty -> .)
    SMALLTHAN       reduce using rule 142 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 142 (empty -> .)
    DIFFERENTTHAN   reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    altexp                         shift and go to state 229
    empty                          shift and go to state 158

state 212

    (121) alttermino -> TIMES save_op factor . alttermino
    (121) alttermino -> . TIMES save_op factor alttermino
    (122) alttermino -> . DIV save_op factor alttermino
    (123) alttermino -> . empty
    (142) empty -> .

    TIMES           shift and go to state 160
    DIV             shift and go to state 161
    SUM             reduce using rule 142 (empty -> .)
    SUBTRACT        reduce using rule 142 (empty -> .)
    SAMEAS          reduce using rule 142 (empty -> .)
    BIGGERTHAN      reduce using rule 142 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 142 (empty -> .)
    SMALLTHAN       reduce using rule 142 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 142 (empty -> .)
    DIFFERENTTHAN   reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    alttermino                     shift and go to state 230
    empty                          shift and go to state 162

state 213

    (122) alttermino -> DIV save_op factor . alttermino
    (121) alttermino -> . TIMES save_op factor alttermino
    (122) alttermino -> . DIV save_op factor alttermino
    (123) alttermino -> . empty
    (142) empty -> .

    TIMES           shift and go to state 160
    DIV             shift and go to state 161
    SUM             reduce using rule 142 (empty -> .)
    SUBTRACT        reduce using rule 142 (empty -> .)
    SAMEAS          reduce using rule 142 (empty -> .)
    BIGGERTHAN      reduce using rule 142 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 142 (empty -> .)
    SMALLTHAN       reduce using rule 142 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 142 (empty -> .)
    DIFFERENTTHAN   reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    SEMICOLON       reduce using rule 142 (empty -> .)
    CLOSEPAREN      reduce using rule 142 (empty -> .)
    COMMA           reduce using rule 142 (empty -> .)

    alttermino                     shift and go to state 231
    empty                          shift and go to state 162

state 214

    (129) factor -> OPENPAREN save_op expresion CLOSEPAREN . save_op
    (124) save_op -> .

    TIMES           reduce using rule 124 (save_op -> .)
    DIV             reduce using rule 124 (save_op -> .)
    SUM             reduce using rule 124 (save_op -> .)
    SUBTRACT        reduce using rule 124 (save_op -> .)
    SAMEAS          reduce using rule 124 (save_op -> .)
    BIGGERTHAN      reduce using rule 124 (save_op -> .)
    BIGGEREQUALSTHAN reduce using rule 124 (save_op -> .)
    SMALLTHAN       reduce using rule 124 (save_op -> .)
    SMALLEQUALSTHAN reduce using rule 124 (save_op -> .)
    DIFFERENTTHAN   reduce using rule 124 (save_op -> .)
    AND             reduce using rule 124 (save_op -> .)
    OR              reduce using rule 124 (save_op -> .)
    SEMICOLON       reduce using rule 124 (save_op -> .)
    CLOSEPAREN      reduce using rule 124 (save_op -> .)
    COMMA           reduce using rule 124 (save_op -> .)

    save_op                        shift and go to state 232

state 215

    (82) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altwhile end_while
    (135) add_gotof -> .

    OPENCURLY       reduce using rule 135 (add_gotof -> .)

    add_gotof                      shift and go to state 233

state 216

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN . OPENCURLY alt2const

    OPENCURLY       shift and go to state 234


state 217

    (53) altparams -> COMMA ID TWODOTS type . save_params altparams
    (55) save_params -> .

    COMMA           reduce using rule 55 (save_params -> .)
    CLOSEPAREN      reduce using rule 55 (save_params -> .)

    save_params                    shift and go to state 235

state 218

    (46) alt3func -> var alt3func .

    CLASS           reduce using rule 46 (alt3func -> var alt3func .)
    VAR             reduce using rule 46 (alt3func -> var alt3func .)
    FUNC            reduce using rule 46 (alt3func -> var alt3func .)
    MAIN            reduce using rule 46 (alt3func -> var alt3func .)
    CONSTRUCTOR     reduce using rule 46 (alt3func -> var alt3func .)


state 219

    (47) alt3func -> estatuto alt3func .

    CLASS           reduce using rule 47 (alt3func -> estatuto alt3func .)
    VAR             reduce using rule 47 (alt3func -> estatuto alt3func .)
    FUNC            reduce using rule 47 (alt3func -> estatuto alt3func .)
    MAIN            reduce using rule 47 (alt3func -> estatuto alt3func .)
    CONSTRUCTOR     reduce using rule 47 (alt3func -> estatuto alt3func .)


state 220

    (48) alt3func -> CLOSECURLY remove_function_scope .

    CLASS           reduce using rule 48 (alt3func -> CLOSECURLY remove_function_scope .)
    VAR             reduce using rule 48 (alt3func -> CLOSECURLY remove_function_scope .)
    FUNC            reduce using rule 48 (alt3func -> CLOSECURLY remove_function_scope .)
    MAIN            reduce using rule 48 (alt3func -> CLOSECURLY remove_function_scope .)
    CONSTRUCTOR     reduce using rule 48 (alt3func -> CLOSECURLY remove_function_scope .)


state 221

    (138) assign -> ID save_comp EQUALS save_op expresion SEMICOLON .

    CLOSECURLY      reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    VAR             reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    ID              reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    IF              reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    OUTPUT          reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    INPUT           reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    RETURN          reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    WHILE           reduce using rule 138 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)


state 222

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params . CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      shift and go to state 236


state 223

    (57) altcall -> expresion generate_param_quad . alt2call
    (59) alt2call -> . COMMA altcall
    (60) alt2call -> . empty
    (142) empty -> .

    COMMA           shift and go to state 238
    CLOSEPAREN      reduce using rule 142 (empty -> .)

    alt2call                       shift and go to state 237
    empty                          shift and go to state 239

state 224

    (131) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition add_end_if
    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (133) altcondition -> . estatuto altcondition
    (134) altcondition -> . CLOSECURLY
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 242
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 240
    estatuto                       shift and go to state 241
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 225

    (127) altwrite -> COMMA save_op . expresion altwrite
    (103) expresion -> . exp altexpresion
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    expresion                      shift and go to state 243
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 226

    (128) altwrite -> CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 128 (altwrite -> CLOSEPAREN SEMICOLON .)


state 227

    (125) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 244


state 228

    (116) altexp -> SUM save_op termino altexp .

    SAMEAS          reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    BIGGERTHAN      reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    SMALLTHAN       reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    AND             reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    OR              reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    SEMICOLON       reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    CLOSEPAREN      reduce using rule 116 (altexp -> SUM save_op termino altexp .)
    COMMA           reduce using rule 116 (altexp -> SUM save_op termino altexp .)


state 229

    (117) altexp -> SUBTRACT save_op termino altexp .

    SAMEAS          reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGERTHAN      reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLTHAN       reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    AND             reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    OR              reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    SEMICOLON       reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEPAREN      reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)
    COMMA           reduce using rule 117 (altexp -> SUBTRACT save_op termino altexp .)


state 230

    (121) alttermino -> TIMES save_op factor alttermino .

    SUM             reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    SUBTRACT        reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    SAMEAS          reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    SMALLTHAN       reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    AND             reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    OR              reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    SEMICOLON       reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)
    COMMA           reduce using rule 121 (alttermino -> TIMES save_op factor alttermino .)


state 231

    (122) alttermino -> DIV save_op factor alttermino .

    SUM             reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    SUBTRACT        reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    SAMEAS          reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    SMALLTHAN       reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    AND             reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    OR              reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    SEMICOLON       reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)
    COMMA           reduce using rule 122 (alttermino -> DIV save_op factor alttermino .)


state 232

    (129) factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .

    TIMES           reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIV             reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUM             reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUBTRACT        reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SAMEAS          reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGERTHAN      reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGEREQUALSTHAN reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLTHAN       reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLEQUALSTHAN reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIFFERENTTHAN   reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    AND             reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    OR              reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SEMICOLON       reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEPAREN      reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    COMMA           reduce using rule 129 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)


state 233

    (82) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altwhile end_while

    OPENCURLY       shift and go to state 245


state 234

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 249
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt2const                      shift and go to state 246
    var                            shift and go to state 247
    estatuto                       shift and go to state 248
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 235

    (53) altparams -> COMMA ID TWODOTS type save_params . altparams
    (53) altparams -> . COMMA ID TWODOTS type save_params altparams
    (54) altparams -> . empty
    (142) empty -> .

    COMMA           shift and go to state 133
    CLOSEPAREN      reduce using rule 142 (empty -> .)

    altparams                      shift and go to state 250
    empty                          shift and go to state 134

state 236

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN . end_false_stack generate_gosub
    (62) end_false_stack -> .

    SEMICOLON       reduce using rule 62 (end_false_stack -> .)
    TIMES           reduce using rule 62 (end_false_stack -> .)
    DIV             reduce using rule 62 (end_false_stack -> .)
    SUM             reduce using rule 62 (end_false_stack -> .)
    SUBTRACT        reduce using rule 62 (end_false_stack -> .)
    SAMEAS          reduce using rule 62 (end_false_stack -> .)
    BIGGERTHAN      reduce using rule 62 (end_false_stack -> .)
    BIGGEREQUALSTHAN reduce using rule 62 (end_false_stack -> .)
    SMALLTHAN       reduce using rule 62 (end_false_stack -> .)
    SMALLEQUALSTHAN reduce using rule 62 (end_false_stack -> .)
    DIFFERENTTHAN   reduce using rule 62 (end_false_stack -> .)
    AND             reduce using rule 62 (end_false_stack -> .)
    OR              reduce using rule 62 (end_false_stack -> .)
    CLOSEPAREN      reduce using rule 62 (end_false_stack -> .)
    COMMA           reduce using rule 62 (end_false_stack -> .)

    end_false_stack                shift and go to state 251

state 237

    (57) altcall -> expresion generate_param_quad alt2call .

    CLOSEPAREN      reduce using rule 57 (altcall -> expresion generate_param_quad alt2call .)


state 238

    (59) alt2call -> COMMA . altcall
    (57) altcall -> . expresion generate_param_quad alt2call
    (58) altcall -> . empty
    (103) expresion -> . exp altexpresion
    (142) empty -> .
    (114) exp -> . termino
    (115) exp -> . termino altexp
    (119) termino -> . factor
    (120) termino -> . factor alttermino
    (129) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (130) factor -> . varcall
    (87) varcall -> . varcte save_const
    (88) varcall -> . varcomplicated save_comp
    (89) varcte -> . TRUE
    (90) varcte -> . FALSE
    (91) varcte -> . CTEFLOAT
    (92) varcte -> . CTESTRING
    (93) varcte -> . CTEINT
    (94) varcomplicated -> . varcomp1
    (95) varcomplicated -> . callfunc
    (96) varcomp1 -> . ID varcomp2
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 142 (empty -> .)
    OPENPAREN       shift and go to state 115
    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    CTEFLOAT        shift and go to state 121
    CTESTRING       shift and go to state 122
    CTEINT          shift and go to state 123
    ID              shift and go to state 126

    altcall                        shift and go to state 252
    expresion                      shift and go to state 201
    empty                          shift and go to state 202
    exp                            shift and go to state 112
    termino                        shift and go to state 113
    factor                         shift and go to state 114
    varcall                        shift and go to state 116
    varcte                         shift and go to state 117
    varcomplicated                 shift and go to state 118
    varcomp1                       shift and go to state 124
    callfunc                       shift and go to state 125

state 239

    (60) alt2call -> empty .

    CLOSEPAREN      reduce using rule 60 (alt2call -> empty .)


state 240

    (131) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . add_end_if
    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . ELSE generate_goto OPENCURLY altcondition add_end_if
    (136) add_end_if -> .

    ELSE            shift and go to state 254
    CLOSECURLY      reduce using rule 136 (add_end_if -> .)
    VAR             reduce using rule 136 (add_end_if -> .)
    ID              reduce using rule 136 (add_end_if -> .)
    IF              reduce using rule 136 (add_end_if -> .)
    OUTPUT          reduce using rule 136 (add_end_if -> .)
    INPUT           reduce using rule 136 (add_end_if -> .)
    RETURN          reduce using rule 136 (add_end_if -> .)
    WHILE           reduce using rule 136 (add_end_if -> .)

    add_end_if                     shift and go to state 253

state 241

    (133) altcondition -> estatuto . altcondition
    (133) altcondition -> . estatuto altcondition
    (134) altcondition -> . CLOSECURLY
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 242
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 241
    altcondition                   shift and go to state 255
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 242

    (134) altcondition -> CLOSECURLY .

    ELSE            reduce using rule 134 (altcondition -> CLOSECURLY .)
    CLOSECURLY      reduce using rule 134 (altcondition -> CLOSECURLY .)
    VAR             reduce using rule 134 (altcondition -> CLOSECURLY .)
    ID              reduce using rule 134 (altcondition -> CLOSECURLY .)
    IF              reduce using rule 134 (altcondition -> CLOSECURLY .)
    OUTPUT          reduce using rule 134 (altcondition -> CLOSECURLY .)
    INPUT           reduce using rule 134 (altcondition -> CLOSECURLY .)
    RETURN          reduce using rule 134 (altcondition -> CLOSECURLY .)
    WHILE           reduce using rule 134 (altcondition -> CLOSECURLY .)


state 243

    (127) altwrite -> COMMA save_op expresion . altwrite
    (127) altwrite -> . COMMA save_op expresion altwrite
    (128) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 205
    CLOSEPAREN      shift and go to state 206

    altwrite                       shift and go to state 256

state 244

    (125) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 125 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)


state 245

    (82) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altwhile end_while
    (83) altwhile -> . estatuto altwhile
    (84) altwhile -> . CLOSECURLY
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 259
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altwhile                       shift and go to state 257
    estatuto                       shift and go to state 258
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 246

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .

    CLOSECURLY      reduce using rule 20 (constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .)


state 247

    (23) alt2const -> var . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 249
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 247
    alt2const                      shift and go to state 260
    estatuto                       shift and go to state 248
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 248

    (24) alt2const -> estatuto . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 249
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 248
    alt2const                      shift and go to state 261
    var                            shift and go to state 247
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 249

    (25) alt2const -> CLOSECURLY .

    CLOSECURLY      reduce using rule 25 (alt2const -> CLOSECURLY .)


state 250

    (53) altparams -> COMMA ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 53 (altparams -> COMMA ID TWODOTS type save_params altparams .)


state 251

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack . generate_gosub
    (63) generate_gosub -> .

    SEMICOLON       reduce using rule 63 (generate_gosub -> .)
    TIMES           reduce using rule 63 (generate_gosub -> .)
    DIV             reduce using rule 63 (generate_gosub -> .)
    SUM             reduce using rule 63 (generate_gosub -> .)
    SUBTRACT        reduce using rule 63 (generate_gosub -> .)
    SAMEAS          reduce using rule 63 (generate_gosub -> .)
    BIGGERTHAN      reduce using rule 63 (generate_gosub -> .)
    BIGGEREQUALSTHAN reduce using rule 63 (generate_gosub -> .)
    SMALLTHAN       reduce using rule 63 (generate_gosub -> .)
    SMALLEQUALSTHAN reduce using rule 63 (generate_gosub -> .)
    DIFFERENTTHAN   reduce using rule 63 (generate_gosub -> .)
    AND             reduce using rule 63 (generate_gosub -> .)
    OR              reduce using rule 63 (generate_gosub -> .)
    CLOSEPAREN      reduce using rule 63 (generate_gosub -> .)
    COMMA           reduce using rule 63 (generate_gosub -> .)

    generate_gosub                 shift and go to state 262

state 252

    (59) alt2call -> COMMA altcall .

    CLOSEPAREN      reduce using rule 59 (alt2call -> COMMA altcall .)


state 253

    (131) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 131 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)


state 254

    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE . generate_goto OPENCURLY altcondition add_end_if
    (137) generate_goto -> .

    OPENCURLY       reduce using rule 137 (generate_goto -> .)

    generate_goto                  shift and go to state 263

state 255

    (133) altcondition -> estatuto altcondition .

    ELSE            reduce using rule 133 (altcondition -> estatuto altcondition .)
    CLOSECURLY      reduce using rule 133 (altcondition -> estatuto altcondition .)
    VAR             reduce using rule 133 (altcondition -> estatuto altcondition .)
    ID              reduce using rule 133 (altcondition -> estatuto altcondition .)
    IF              reduce using rule 133 (altcondition -> estatuto altcondition .)
    OUTPUT          reduce using rule 133 (altcondition -> estatuto altcondition .)
    INPUT           reduce using rule 133 (altcondition -> estatuto altcondition .)
    RETURN          reduce using rule 133 (altcondition -> estatuto altcondition .)
    WHILE           reduce using rule 133 (altcondition -> estatuto altcondition .)


state 256

    (127) altwrite -> COMMA save_op expresion altwrite .

    CLOSECURLY      reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    VAR             reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    ID              reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    IF              reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    OUTPUT          reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    INPUT           reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    RETURN          reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)
    WHILE           reduce using rule 127 (altwrite -> COMMA save_op expresion altwrite .)


state 257

    (82) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile . end_while
    (86) end_while -> .

    CLOSECURLY      reduce using rule 86 (end_while -> .)
    VAR             reduce using rule 86 (end_while -> .)
    ID              reduce using rule 86 (end_while -> .)
    IF              reduce using rule 86 (end_while -> .)
    OUTPUT          reduce using rule 86 (end_while -> .)
    INPUT           reduce using rule 86 (end_while -> .)
    RETURN          reduce using rule 86 (end_while -> .)
    WHILE           reduce using rule 86 (end_while -> .)

    end_while                      shift and go to state 264

state 258

    (83) altwhile -> estatuto . altwhile
    (83) altwhile -> . estatuto altwhile
    (84) altwhile -> . CLOSECURLY
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 259
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 258
    altwhile                       shift and go to state 265
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 259

    (84) altwhile -> CLOSECURLY .

    CLOSECURLY      reduce using rule 84 (altwhile -> CLOSECURLY .)
    VAR             reduce using rule 84 (altwhile -> CLOSECURLY .)
    ID              reduce using rule 84 (altwhile -> CLOSECURLY .)
    IF              reduce using rule 84 (altwhile -> CLOSECURLY .)
    OUTPUT          reduce using rule 84 (altwhile -> CLOSECURLY .)
    INPUT           reduce using rule 84 (altwhile -> CLOSECURLY .)
    RETURN          reduce using rule 84 (altwhile -> CLOSECURLY .)
    WHILE           reduce using rule 84 (altwhile -> CLOSECURLY .)


state 260

    (23) alt2const -> var alt2const .

    CLOSECURLY      reduce using rule 23 (alt2const -> var alt2const .)


state 261

    (24) alt2const -> estatuto alt2const .

    CLOSECURLY      reduce using rule 24 (alt2const -> estatuto alt2const .)


state 262

    (56) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .

    SEMICOLON       reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    TIMES           reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIV             reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUM             reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUBTRACT        reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SAMEAS          reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGERTHAN      reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGEREQUALSTHAN reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLTHAN       reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLEQUALSTHAN reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIFFERENTTHAN   reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    AND             reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    OR              reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEPAREN      reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    COMMA           reduce using rule 56 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)


state 263

    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto . OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 266


state 264

    (82) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .

    CLOSECURLY      reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    VAR             reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    ID              reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    IF              reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    OUTPUT          reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    INPUT           reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    RETURN          reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    WHILE           reduce using rule 82 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)


state 265

    (83) altwhile -> estatuto altwhile .

    CLOSECURLY      reduce using rule 83 (altwhile -> estatuto altwhile .)
    VAR             reduce using rule 83 (altwhile -> estatuto altwhile .)
    ID              reduce using rule 83 (altwhile -> estatuto altwhile .)
    IF              reduce using rule 83 (altwhile -> estatuto altwhile .)
    OUTPUT          reduce using rule 83 (altwhile -> estatuto altwhile .)
    INPUT           reduce using rule 83 (altwhile -> estatuto altwhile .)
    RETURN          reduce using rule 83 (altwhile -> estatuto altwhile .)
    WHILE           reduce using rule 83 (altwhile -> estatuto altwhile .)


state 266

    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY . altcondition add_end_if
    (133) altcondition -> . estatuto altcondition
    (134) altcondition -> . CLOSECURLY
    (72) estatuto -> . assign empty_pv
    (73) estatuto -> . condition empty_pv
    (74) estatuto -> . write empty_pv
    (75) estatuto -> . read empty_pv
    (76) estatuto -> . return empty_pv
    (77) estatuto -> . voidcall empty_pv
    (78) estatuto -> . while empty_pv
    (138) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (131) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (132) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (126) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (125) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (139) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (79) voidcall -> . callfunc SEMICOLON
    (80) voidcall -> . ID DOT voidcall
    (82) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (56) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 242
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 267
    estatuto                       shift and go to state 241
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 267

    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition . add_end_if
    (136) add_end_if -> .

    CLOSECURLY      reduce using rule 136 (add_end_if -> .)
    VAR             reduce using rule 136 (add_end_if -> .)
    ID              reduce using rule 136 (add_end_if -> .)
    IF              reduce using rule 136 (add_end_if -> .)
    OUTPUT          reduce using rule 136 (add_end_if -> .)
    INPUT           reduce using rule 136 (add_end_if -> .)
    RETURN          reduce using rule 136 (add_end_if -> .)
    WHILE           reduce using rule 136 (add_end_if -> .)

    add_end_if                     shift and go to state 268

state 268

    (132) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 132 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 113 resolved using rule (exp -> termino)
WARNING: rejected rule (empty -> <empty>) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (termino -> factor)
WARNING: rejected rule (empty -> <empty>) in state 114
