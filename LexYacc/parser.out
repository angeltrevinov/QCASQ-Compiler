Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID save_program SEMICOLON altprogram
Rule 2     altprogram -> class altprogram
Rule 3     altprogram -> var altprogram
Rule 4     altprogram -> function altprogram
Rule 5     altprogram -> main remove_class_scope
Rule 6     main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
Rule 7     altmain -> var altmain
Rule 8     altmain -> estatuto altmain
Rule 9     altmain -> CLOSECURLY
Rule 10    class -> CLASS ID altclass save_class OPENCURLY alt2class
Rule 11    altclass -> TWODOTS ID
Rule 12    altclass -> empty
Rule 13    alt2class -> var alt2class
Rule 14    alt2class -> function alt2class
Rule 15    alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope
Rule 16    constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
Rule 17    altconst -> params
Rule 18    altconst -> empty
Rule 19    alt2const -> var alt2const
Rule 20    alt2const -> estatuto alt2const
Rule 21    alt2const -> CLOSECURLY
Rule 22    var -> VAR listids TWODOTS type save_vars SEMICOLON
Rule 23    listids -> ID save_var_name dec_array empty_dim_stack listidsalty
Rule 24    listidsalty -> COMMA listids
Rule 25    listidsalty -> empty
Rule 26    dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2
Rule 27    dec_array -> empty
Rule 28    dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET
Rule 29    dec_array2 -> empty
Rule 30    empty_dim_stack -> <empty>
Rule 31    array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2
Rule 32    array -> empty
Rule 33    array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv
Rule 34    array2 -> empty
Rule 35    function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
Rule 36    altfunc -> params
Rule 37    altfunc -> empty
Rule 38    alt2func -> TWODOTS type
Rule 39    alt2func -> empty
Rule 40    alt3func -> var alt3func
Rule 41    alt3func -> estatuto alt3func
Rule 42    alt3func -> CLOSECURLY remove_function_scope
Rule 43    params -> ID TWODOTS type save_params altparams
Rule 44    altparams -> COMMA ID TWODOTS type save_params altparams
Rule 45    altparams -> empty
Rule 46    callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
Rule 47    altcall -> expresion generate_param_quad alt2call
Rule 48    altcall -> empty
Rule 49    alt2call -> COMMA altcall
Rule 50    alt2call -> empty
Rule 51    type -> INT
Rule 52    type -> FLOAT
Rule 53    type -> STRING
Rule 54    type -> ID
Rule 55    type -> BOOL
Rule 56    estatuto -> assign empty_pv
Rule 57    estatuto -> condition empty_pv
Rule 58    estatuto -> write empty_pv
Rule 59    estatuto -> read empty_pv
Rule 60    estatuto -> return empty_pv
Rule 61    estatuto -> voidcall empty_pv
Rule 62    estatuto -> while empty_pv
Rule 63    voidcall -> callfunc SEMICOLON
Rule 64    voidcall -> ID DOT voidcall
Rule 65    while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
Rule 66    altwhile -> estatuto altwhile
Rule 67    altwhile -> CLOSECURLY
Rule 68    varcall -> varcte save_const
Rule 69    varcall -> varcomplicated save_comp
Rule 70    varcte -> TRUE
Rule 71    varcte -> FALSE
Rule 72    varcte -> CTEFLOAT
Rule 73    varcte -> CTESTRING
Rule 74    varcte -> CTEINT
Rule 75    varcomplicated -> varcomp1
Rule 76    varcomplicated -> callfunc
Rule 77    varcomp1 -> ID varcomp2
Rule 78    varcomp2 -> DOT varcomp3
Rule 79    varcomp2 -> array empty
Rule 80    varcomp3 -> varcomp1
Rule 81    varcomp3 -> callfunc
Rule 82    expresion -> exp altexpresion
Rule 83    altexpresion -> altexpresion2 save_op exp
Rule 84    altexpresion -> empty
Rule 85    altexpresion2 -> SAMEAS
Rule 86    altexpresion2 -> BIGGERTHAN
Rule 87    altexpresion2 -> BIGGEREQUALSTHAN
Rule 88    altexpresion2 -> SMALLTHAN
Rule 89    altexpresion2 -> SMALLEQUALSTHAN
Rule 90    altexpresion2 -> DIFFERENTTHAN
Rule 91    altexpresion2 -> AND
Rule 92    altexpresion2 -> OR
Rule 93    exp -> termino
Rule 94    exp -> termino altexp
Rule 95    altexp -> SUM save_op termino altexp
Rule 96    altexp -> SUBTRACT save_op termino altexp
Rule 97    altexp -> empty
Rule 98    termino -> factor
Rule 99    termino -> factor alttermino
Rule 100   alttermino -> TIMES save_op factor alttermino
Rule 101   alttermino -> DIV save_op factor alttermino
Rule 102   alttermino -> empty
Rule 103   read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
Rule 104   write -> OUTPUT save_op OPENPAREN expresion altwrite
Rule 105   altwrite -> COMMA save_op expresion altwrite
Rule 106   altwrite -> CLOSEPAREN SEMICOLON
Rule 107   factor -> OPENPAREN save_op expresion CLOSEPAREN save_op
Rule 108   factor -> varcall
Rule 109   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
Rule 110   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
Rule 111   altcondition -> estatuto altcondition
Rule 112   altcondition -> CLOSECURLY
Rule 113   assign -> ID array save_comp EQUALS save_op expresion SEMICOLON
Rule 114   return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists
Rule 115   empty -> <empty>
Rule 116   save_program -> <empty>
Rule 117   save_main -> <empty>
Rule 118   save_class -> <empty>
Rule 119   remove_class_scope -> <empty>
Rule 120   save_constructor -> <empty>
Rule 121   save_vars -> <empty>
Rule 122   save_var_name -> <empty>
Rule 123   save_function -> <empty>
Rule 124   store_params -> <empty>
Rule 125   remove_function_scope -> <empty>
Rule 126   save_params -> <empty>
Rule 127   add_false_stack -> <empty>
Rule 128   end_false_stack -> <empty>
Rule 129   generate_gosub -> <empty>
Rule 130   check_params -> <empty>
Rule 131   generate_param_quad -> <empty>
Rule 132   check_exists_func -> <empty>
Rule 133   empty_pv -> <empty>
Rule 134   add_stack_jump -> <empty>
Rule 135   end_while -> <empty>
Rule 136   save_const -> <empty>
Rule 137   save_comp -> <empty>
Rule 138   save_op -> <empty>
Rule 139   add_gotof -> <empty>
Rule 140   add_end_if -> <empty>
Rule 141   generate_goto -> <empty>
Rule 142   generate_quad_ret -> <empty>
Rule 143   add_return_exists -> <empty>

Terminals, with rules where they appear

AND                  : 91
BIGGEREQUALSTHAN     : 87
BIGGERTHAN           : 86
BOOL                 : 55
CLASS                : 10
CLOSEBRACKET         : 26 28 31 33
CLOSECURLY           : 9 15 21 42 67 112
CLOSEPAREN           : 6 16 35 46 65 103 106 107 109 110
COMMA                : 24 44 49 105
CONSTRUCTOR          : 16
CTEFLOAT             : 72
CTEINT               : 26 28 74
CTESTRING            : 73
DIFFERENTTHAN        : 90
DIV                  : 101
DOT                  : 64 78
ELSE                 : 110
EQUALS               : 113
FALSE                : 71
FLOAT                : 52
FUNC                 : 35
ID                   : 1 10 11 23 35 43 44 46 54 64 77 103 113
IF                   : 109 110
INPUT                : 103
INT                  : 51
MAIN                 : 6
OPENBRACKET          : 26 28 31 33
OPENCURLY            : 6 10 16 35 65 109 110 110
OPENPAREN            : 6 16 35 46 65 103 104 107 109 110
OR                   : 92
OUTPUT               : 104
PROGRAM              : 1
RETURN               : 114
SAMEAS               : 85
SEMICOLON            : 1 15 22 63 103 106 113 114
SMALLEQUALSTHAN      : 89
SMALLTHAN            : 88
STRING               : 53
SUBTRACT             : 96
SUM                  : 95
TIMES                : 100
TRUE                 : 70
TWODOTS              : 11 22 38 43 44
VAR                  : 22
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

add_end_if           : 109 110
add_false_stack      : 46
add_gotof            : 65 109 110
add_return_exists    : 114
add_stack_jump       : 65
alt2call             : 47
alt2class            : 10 13 14
alt2const            : 16 19 20
alt2func             : 35
alt3func             : 35 40 41
altcall              : 46 49
altclass             : 10
altcondition         : 109 110 110 111
altconst             : 16
altexp               : 94 95 96
altexpresion         : 82
altexpresion2        : 83
altfunc              : 35
altmain              : 6 7 8
altparams            : 43 44
altprogram           : 1 2 3 4
alttermino           : 99 100 101
altwhile             : 65 66
altwrite             : 104 105
array                : 79 113
array2               : 31
assign               : 56
callfunc             : 63 76 81
check_exists_func    : 46
check_params         : 46
class                : 2
condition            : 57
constructor          : 15
dec_array            : 23
dec_array2           : 26
empty                : 12 18 25 27 29 32 34 37 39 45 48 50 79 84 97 102
empty_dim_stack      : 23
empty_pv             : 31 33 56 57 58 59 60 61 62
end_false_stack      : 46
end_while            : 65
estatuto             : 8 20 41 66 111
exp                  : 82 83
expresion            : 31 33 47 65 104 105 107 109 110 113 114
factor               : 98 99 100 101
function             : 4 14
generate_gosub       : 46
generate_goto        : 110
generate_param_quad  : 47
generate_quad_ret    : 114
listids              : 22 24
listidsalty          : 23
main                 : 5
params               : 17 36
program              : 0
read                 : 59
remove_class_scope   : 5 15
remove_function_scope : 42
return               : 60
save_class           : 10
save_comp            : 69 103 113
save_const           : 68
save_constructor     : 16
save_function        : 35
save_main            : 6
save_op              : 83 95 96 100 101 103 104 105 107 107 113
save_params          : 43 44
save_program         : 1
save_var_name        : 23
save_vars            : 22
store_params         : 16 35
termino              : 93 94 95 96
type                 : 22 38 43 44
var                  : 3 7 13 19 40
varcall              : 108
varcomp1             : 75 80
varcomp2             : 77
varcomp3             : 78
varcomplicated       : 69
varcte               : 68
voidcall             : 61 64
while                : 62
write                : 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID save_program SEMICOLON altprogram

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID save_program SEMICOLON altprogram

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . save_program SEMICOLON altprogram
    (116) save_program -> .

    SEMICOLON       reduce using rule 116 (save_program -> .)

    save_program                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID save_program . SEMICOLON altprogram

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID save_program SEMICOLON . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    altprogram                     shift and go to state 6
    class                          shift and go to state 7
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 6

    (1) program -> PROGRAM ID save_program SEMICOLON altprogram .

    $end            reduce using rule 1 (program -> PROGRAM ID save_program SEMICOLON altprogram .)


state 7

    (2) altprogram -> class . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    class                          shift and go to state 7
    altprogram                     shift and go to state 15
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 8

    (3) altprogram -> var . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    var                            shift and go to state 8
    altprogram                     shift and go to state 16
    class                          shift and go to state 7
    function                       shift and go to state 9
    main                           shift and go to state 10

state 9

    (4) altprogram -> function . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (10) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (6) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    function                       shift and go to state 9
    altprogram                     shift and go to state 17
    class                          shift and go to state 7
    var                            shift and go to state 8
    main                           shift and go to state 10

state 10

    (5) altprogram -> main . remove_class_scope
    (119) remove_class_scope -> .

    $end            reduce using rule 119 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 18

state 11

    (10) class -> CLASS . ID altclass save_class OPENCURLY alt2class

    ID              shift and go to state 19


state 12

    (22) var -> VAR . listids TWODOTS type save_vars SEMICOLON
    (23) listids -> . ID save_var_name dec_array empty_dim_stack listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 20

state 13

    (35) function -> FUNC . ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    ID              shift and go to state 22


state 14

    (6) main -> MAIN . save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
    (117) save_main -> .

    OPENPAREN       reduce using rule 117 (save_main -> .)

    save_main                      shift and go to state 23

state 15

    (2) altprogram -> class altprogram .

    $end            reduce using rule 2 (altprogram -> class altprogram .)


state 16

    (3) altprogram -> var altprogram .

    $end            reduce using rule 3 (altprogram -> var altprogram .)


state 17

    (4) altprogram -> function altprogram .

    $end            reduce using rule 4 (altprogram -> function altprogram .)


state 18

    (5) altprogram -> main remove_class_scope .

    $end            reduce using rule 5 (altprogram -> main remove_class_scope .)


state 19

    (10) class -> CLASS ID . altclass save_class OPENCURLY alt2class
    (11) altclass -> . TWODOTS ID
    (12) altclass -> . empty
    (115) empty -> .

    TWODOTS         shift and go to state 25
    OPENCURLY       reduce using rule 115 (empty -> .)

    altclass                       shift and go to state 24
    empty                          shift and go to state 26

state 20

    (22) var -> VAR listids . TWODOTS type save_vars SEMICOLON

    TWODOTS         shift and go to state 27


state 21

    (23) listids -> ID . save_var_name dec_array empty_dim_stack listidsalty
    (122) save_var_name -> .

    OPENBRACKET     reduce using rule 122 (save_var_name -> .)
    COMMA           reduce using rule 122 (save_var_name -> .)
    TWODOTS         reduce using rule 122 (save_var_name -> .)

    save_var_name                  shift and go to state 28

state 22

    (35) function -> FUNC ID . OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    OPENPAREN       shift and go to state 29


state 23

    (6) main -> MAIN save_main . OPENPAREN CLOSEPAREN OPENCURLY altmain

    OPENPAREN       shift and go to state 30


state 24

    (10) class -> CLASS ID altclass . save_class OPENCURLY alt2class
    (118) save_class -> .

    OPENCURLY       reduce using rule 118 (save_class -> .)

    save_class                     shift and go to state 31

state 25

    (11) altclass -> TWODOTS . ID

    ID              shift and go to state 32


state 26

    (12) altclass -> empty .

    OPENCURLY       reduce using rule 12 (altclass -> empty .)


state 27

    (22) var -> VAR listids TWODOTS . type save_vars SEMICOLON
    (51) type -> . INT
    (52) type -> . FLOAT
    (53) type -> . STRING
    (54) type -> . ID
    (55) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 33

state 28

    (23) listids -> ID save_var_name . dec_array empty_dim_stack listidsalty
    (26) dec_array -> . OPENBRACKET CTEINT CLOSEBRACKET dec_array2
    (27) dec_array -> . empty
    (115) empty -> .

    OPENBRACKET     shift and go to state 40
    COMMA           reduce using rule 115 (empty -> .)
    TWODOTS         reduce using rule 115 (empty -> .)

    dec_array                      shift and go to state 39
    empty                          shift and go to state 41

state 29

    (35) function -> FUNC ID OPENPAREN . altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (36) altfunc -> . params
    (37) altfunc -> . empty
    (43) params -> . ID TWODOTS type save_params altparams
    (115) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 115 (empty -> .)

    altfunc                        shift and go to state 43
    params                         shift and go to state 44
    empty                          shift and go to state 45

state 30

    (6) main -> MAIN save_main OPENPAREN . CLOSEPAREN OPENCURLY altmain

    CLOSEPAREN      shift and go to state 46


state 31

    (10) class -> CLASS ID altclass save_class . OPENCURLY alt2class

    OPENCURLY       shift and go to state 47


state 32

    (11) altclass -> TWODOTS ID .

    OPENCURLY       reduce using rule 11 (altclass -> TWODOTS ID .)


state 33

    (22) var -> VAR listids TWODOTS type . save_vars SEMICOLON
    (121) save_vars -> .

    SEMICOLON       reduce using rule 121 (save_vars -> .)

    save_vars                      shift and go to state 48

state 34

    (51) type -> INT .

    SEMICOLON       reduce using rule 51 (type -> INT .)
    COMMA           reduce using rule 51 (type -> INT .)
    CLOSEPAREN      reduce using rule 51 (type -> INT .)
    OPENCURLY       reduce using rule 51 (type -> INT .)


state 35

    (52) type -> FLOAT .

    SEMICOLON       reduce using rule 52 (type -> FLOAT .)
    COMMA           reduce using rule 52 (type -> FLOAT .)
    CLOSEPAREN      reduce using rule 52 (type -> FLOAT .)
    OPENCURLY       reduce using rule 52 (type -> FLOAT .)


state 36

    (53) type -> STRING .

    SEMICOLON       reduce using rule 53 (type -> STRING .)
    COMMA           reduce using rule 53 (type -> STRING .)
    CLOSEPAREN      reduce using rule 53 (type -> STRING .)
    OPENCURLY       reduce using rule 53 (type -> STRING .)


state 37

    (54) type -> ID .

    SEMICOLON       reduce using rule 54 (type -> ID .)
    COMMA           reduce using rule 54 (type -> ID .)
    CLOSEPAREN      reduce using rule 54 (type -> ID .)
    OPENCURLY       reduce using rule 54 (type -> ID .)


state 38

    (55) type -> BOOL .

    SEMICOLON       reduce using rule 55 (type -> BOOL .)
    COMMA           reduce using rule 55 (type -> BOOL .)
    CLOSEPAREN      reduce using rule 55 (type -> BOOL .)
    OPENCURLY       reduce using rule 55 (type -> BOOL .)


state 39

    (23) listids -> ID save_var_name dec_array . empty_dim_stack listidsalty
    (30) empty_dim_stack -> .

    COMMA           reduce using rule 30 (empty_dim_stack -> .)
    TWODOTS         reduce using rule 30 (empty_dim_stack -> .)

    empty_dim_stack                shift and go to state 49

state 40

    (26) dec_array -> OPENBRACKET . CTEINT CLOSEBRACKET dec_array2

    CTEINT          shift and go to state 50


state 41

    (27) dec_array -> empty .

    COMMA           reduce using rule 27 (dec_array -> empty .)
    TWODOTS         reduce using rule 27 (dec_array -> empty .)


state 42

    (43) params -> ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 51


state 43

    (35) function -> FUNC ID OPENPAREN altfunc . CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    CLOSEPAREN      shift and go to state 52


state 44

    (36) altfunc -> params .

    CLOSEPAREN      reduce using rule 36 (altfunc -> params .)


state 45

    (37) altfunc -> empty .

    CLOSEPAREN      reduce using rule 37 (altfunc -> empty .)


state 46

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN . OPENCURLY altmain

    OPENCURLY       shift and go to state 53


state 47

    (10) class -> CLASS ID altclass save_class OPENCURLY . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 58

    alt2class                      shift and go to state 54
    var                            shift and go to state 55
    function                       shift and go to state 56
    constructor                    shift and go to state 57

state 48

    (22) var -> VAR listids TWODOTS type save_vars . SEMICOLON

    SEMICOLON       shift and go to state 59


state 49

    (23) listids -> ID save_var_name dec_array empty_dim_stack . listidsalty
    (24) listidsalty -> . COMMA listids
    (25) listidsalty -> . empty
    (115) empty -> .

    COMMA           shift and go to state 61
    TWODOTS         reduce using rule 115 (empty -> .)

    listidsalty                    shift and go to state 60
    empty                          shift and go to state 62

state 50

    (26) dec_array -> OPENBRACKET CTEINT . CLOSEBRACKET dec_array2

    CLOSEBRACKET    shift and go to state 63


state 51

    (43) params -> ID TWODOTS . type save_params altparams
    (51) type -> . INT
    (52) type -> . FLOAT
    (53) type -> . STRING
    (54) type -> . ID
    (55) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 64

state 52

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN . alt2func save_function store_params OPENCURLY alt3func
    (38) alt2func -> . TWODOTS type
    (39) alt2func -> . empty
    (115) empty -> .

    TWODOTS         shift and go to state 66
    OPENCURLY       reduce using rule 115 (empty -> .)

    alt2func                       shift and go to state 65
    empty                          shift and go to state 67

state 53

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altmain                        shift and go to state 68
    var                            shift and go to state 69
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 54

    (10) class -> CLASS ID altclass save_class OPENCURLY alt2class .

    CLASS           reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    VAR             reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    FUNC            reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    MAIN            reduce using rule 10 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)


state 55

    (13) alt2class -> var . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 58

    var                            shift and go to state 55
    alt2class                      shift and go to state 86
    function                       shift and go to state 56
    constructor                    shift and go to state 57

state 56

    (14) alt2class -> function . alt2class
    (13) alt2class -> . var alt2class
    (14) alt2class -> . function alt2class
    (15) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (35) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (16) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 58

    function                       shift and go to state 56
    alt2class                      shift and go to state 87
    var                            shift and go to state 55
    constructor                    shift and go to state 57

state 57

    (15) alt2class -> constructor . CLOSECURLY SEMICOLON remove_class_scope

    CLOSECURLY      shift and go to state 88


state 58

    (16) constructor -> CONSTRUCTOR . save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
    (120) save_constructor -> .

    OPENPAREN       reduce using rule 120 (save_constructor -> .)

    save_constructor               shift and go to state 89

state 59

    (22) var -> VAR listids TWODOTS type save_vars SEMICOLON .

    CLASS           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    VAR             reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    FUNC            reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    MAIN            reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CONSTRUCTOR     reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CLOSECURLY      reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    ID              reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    IF              reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    OUTPUT          reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    INPUT           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    RETURN          reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    WHILE           reduce using rule 22 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)


state 60

    (23) listids -> ID save_var_name dec_array empty_dim_stack listidsalty .

    TWODOTS         reduce using rule 23 (listids -> ID save_var_name dec_array empty_dim_stack listidsalty .)


state 61

    (24) listidsalty -> COMMA . listids
    (23) listids -> . ID save_var_name dec_array empty_dim_stack listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 90

state 62

    (25) listidsalty -> empty .

    TWODOTS         reduce using rule 25 (listidsalty -> empty .)


state 63

    (26) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET . dec_array2
    (28) dec_array2 -> . OPENBRACKET CTEINT CLOSEBRACKET
    (29) dec_array2 -> . empty
    (115) empty -> .

    OPENBRACKET     shift and go to state 91
    COMMA           reduce using rule 115 (empty -> .)
    TWODOTS         reduce using rule 115 (empty -> .)

    dec_array2                     shift and go to state 92
    empty                          shift and go to state 93

state 64

    (43) params -> ID TWODOTS type . save_params altparams
    (126) save_params -> .

    COMMA           reduce using rule 126 (save_params -> .)
    CLOSEPAREN      reduce using rule 126 (save_params -> .)

    save_params                    shift and go to state 94

state 65

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func . save_function store_params OPENCURLY alt3func
    (123) save_function -> .

    OPENCURLY       reduce using rule 123 (save_function -> .)

    save_function                  shift and go to state 95

state 66

    (38) alt2func -> TWODOTS . type
    (51) type -> . INT
    (52) type -> . FLOAT
    (53) type -> . STRING
    (54) type -> . ID
    (55) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 96

state 67

    (39) alt2func -> empty .

    OPENCURLY       reduce using rule 39 (alt2func -> empty .)


state 68

    (6) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .

    $end            reduce using rule 6 (main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .)


state 69

    (7) altmain -> var . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 69
    altmain                        shift and go to state 97
    estatuto                       shift and go to state 70
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 70

    (8) altmain -> estatuto . altmain
    (7) altmain -> . var altmain
    (8) altmain -> . estatuto altmain
    (9) altmain -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 71
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 70
    altmain                        shift and go to state 98
    var                            shift and go to state 69
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 71

    (9) altmain -> CLOSECURLY .

    $end            reduce using rule 9 (altmain -> CLOSECURLY .)


state 72

    (56) estatuto -> assign . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 99

state 73

    (57) estatuto -> condition . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 100

state 74

    (58) estatuto -> write . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 101

state 75

    (59) estatuto -> read . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 102

state 76

    (60) estatuto -> return . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 103

state 77

    (61) estatuto -> voidcall . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 104

state 78

    (62) estatuto -> while . empty_pv
    (133) empty_pv -> .

    CLOSECURLY      reduce using rule 133 (empty_pv -> .)
    VAR             reduce using rule 133 (empty_pv -> .)
    ID              reduce using rule 133 (empty_pv -> .)
    IF              reduce using rule 133 (empty_pv -> .)
    OUTPUT          reduce using rule 133 (empty_pv -> .)
    INPUT           reduce using rule 133 (empty_pv -> .)
    RETURN          reduce using rule 133 (empty_pv -> .)
    WHILE           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 105

state 79

    (113) assign -> ID . array save_comp EQUALS save_op expresion SEMICOLON
    (64) voidcall -> ID . DOT voidcall
    (46) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (31) array -> . OPENBRACKET expresion CLOSEBRACKET empty_pv array2
    (32) array -> . empty
    (132) check_exists_func -> .
    (115) empty -> .

    DOT             shift and go to state 107
    OPENBRACKET     shift and go to state 109
    OPENPAREN       reduce using rule 132 (check_exists_func -> .)
    EQUALS          reduce using rule 115 (empty -> .)

    array                          shift and go to state 106
    check_exists_func              shift and go to state 108
    empty                          shift and go to state 110

state 80

    (109) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENPAREN       shift and go to state 111


state 81

    (104) write -> OUTPUT . save_op OPENPAREN expresion altwrite
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 112

state 82

    (103) read -> INPUT . save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 113

state 83

    (114) return -> RETURN . expresion generate_quad_ret SEMICOLON add_return_exists
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 84

    (63) voidcall -> callfunc . SEMICOLON

    SEMICOLON       shift and go to state 130


state 85

    (65) while -> WHILE . add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (134) add_stack_jump -> .

    OPENPAREN       reduce using rule 134 (add_stack_jump -> .)

    add_stack_jump                 shift and go to state 131

state 86

    (13) alt2class -> var alt2class .

    CLASS           reduce using rule 13 (alt2class -> var alt2class .)
    VAR             reduce using rule 13 (alt2class -> var alt2class .)
    FUNC            reduce using rule 13 (alt2class -> var alt2class .)
    MAIN            reduce using rule 13 (alt2class -> var alt2class .)


state 87

    (14) alt2class -> function alt2class .

    CLASS           reduce using rule 14 (alt2class -> function alt2class .)
    VAR             reduce using rule 14 (alt2class -> function alt2class .)
    FUNC            reduce using rule 14 (alt2class -> function alt2class .)
    MAIN            reduce using rule 14 (alt2class -> function alt2class .)


state 88

    (15) alt2class -> constructor CLOSECURLY . SEMICOLON remove_class_scope

    SEMICOLON       shift and go to state 132


state 89

    (16) constructor -> CONSTRUCTOR save_constructor . OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    OPENPAREN       shift and go to state 133


state 90

    (24) listidsalty -> COMMA listids .

    TWODOTS         reduce using rule 24 (listidsalty -> COMMA listids .)


state 91

    (28) dec_array2 -> OPENBRACKET . CTEINT CLOSEBRACKET

    CTEINT          shift and go to state 134


state 92

    (26) dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .

    COMMA           reduce using rule 26 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)
    TWODOTS         reduce using rule 26 (dec_array -> OPENBRACKET CTEINT CLOSEBRACKET dec_array2 .)


state 93

    (29) dec_array2 -> empty .

    COMMA           reduce using rule 29 (dec_array2 -> empty .)
    TWODOTS         reduce using rule 29 (dec_array2 -> empty .)


state 94

    (43) params -> ID TWODOTS type save_params . altparams
    (44) altparams -> . COMMA ID TWODOTS type save_params altparams
    (45) altparams -> . empty
    (115) empty -> .

    COMMA           shift and go to state 136
    CLOSEPAREN      reduce using rule 115 (empty -> .)

    altparams                      shift and go to state 135
    empty                          shift and go to state 137

state 95

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function . store_params OPENCURLY alt3func
    (124) store_params -> .

    OPENCURLY       reduce using rule 124 (store_params -> .)

    store_params                   shift and go to state 138

state 96

    (38) alt2func -> TWODOTS type .

    OPENCURLY       reduce using rule 38 (alt2func -> TWODOTS type .)


state 97

    (7) altmain -> var altmain .

    $end            reduce using rule 7 (altmain -> var altmain .)


state 98

    (8) altmain -> estatuto altmain .

    $end            reduce using rule 8 (altmain -> estatuto altmain .)


state 99

    (56) estatuto -> assign empty_pv .

    CLOSECURLY      reduce using rule 56 (estatuto -> assign empty_pv .)
    VAR             reduce using rule 56 (estatuto -> assign empty_pv .)
    ID              reduce using rule 56 (estatuto -> assign empty_pv .)
    IF              reduce using rule 56 (estatuto -> assign empty_pv .)
    OUTPUT          reduce using rule 56 (estatuto -> assign empty_pv .)
    INPUT           reduce using rule 56 (estatuto -> assign empty_pv .)
    RETURN          reduce using rule 56 (estatuto -> assign empty_pv .)
    WHILE           reduce using rule 56 (estatuto -> assign empty_pv .)


state 100

    (57) estatuto -> condition empty_pv .

    CLOSECURLY      reduce using rule 57 (estatuto -> condition empty_pv .)
    VAR             reduce using rule 57 (estatuto -> condition empty_pv .)
    ID              reduce using rule 57 (estatuto -> condition empty_pv .)
    IF              reduce using rule 57 (estatuto -> condition empty_pv .)
    OUTPUT          reduce using rule 57 (estatuto -> condition empty_pv .)
    INPUT           reduce using rule 57 (estatuto -> condition empty_pv .)
    RETURN          reduce using rule 57 (estatuto -> condition empty_pv .)
    WHILE           reduce using rule 57 (estatuto -> condition empty_pv .)


state 101

    (58) estatuto -> write empty_pv .

    CLOSECURLY      reduce using rule 58 (estatuto -> write empty_pv .)
    VAR             reduce using rule 58 (estatuto -> write empty_pv .)
    ID              reduce using rule 58 (estatuto -> write empty_pv .)
    IF              reduce using rule 58 (estatuto -> write empty_pv .)
    OUTPUT          reduce using rule 58 (estatuto -> write empty_pv .)
    INPUT           reduce using rule 58 (estatuto -> write empty_pv .)
    RETURN          reduce using rule 58 (estatuto -> write empty_pv .)
    WHILE           reduce using rule 58 (estatuto -> write empty_pv .)


state 102

    (59) estatuto -> read empty_pv .

    CLOSECURLY      reduce using rule 59 (estatuto -> read empty_pv .)
    VAR             reduce using rule 59 (estatuto -> read empty_pv .)
    ID              reduce using rule 59 (estatuto -> read empty_pv .)
    IF              reduce using rule 59 (estatuto -> read empty_pv .)
    OUTPUT          reduce using rule 59 (estatuto -> read empty_pv .)
    INPUT           reduce using rule 59 (estatuto -> read empty_pv .)
    RETURN          reduce using rule 59 (estatuto -> read empty_pv .)
    WHILE           reduce using rule 59 (estatuto -> read empty_pv .)


state 103

    (60) estatuto -> return empty_pv .

    CLOSECURLY      reduce using rule 60 (estatuto -> return empty_pv .)
    VAR             reduce using rule 60 (estatuto -> return empty_pv .)
    ID              reduce using rule 60 (estatuto -> return empty_pv .)
    IF              reduce using rule 60 (estatuto -> return empty_pv .)
    OUTPUT          reduce using rule 60 (estatuto -> return empty_pv .)
    INPUT           reduce using rule 60 (estatuto -> return empty_pv .)
    RETURN          reduce using rule 60 (estatuto -> return empty_pv .)
    WHILE           reduce using rule 60 (estatuto -> return empty_pv .)


state 104

    (61) estatuto -> voidcall empty_pv .

    CLOSECURLY      reduce using rule 61 (estatuto -> voidcall empty_pv .)
    VAR             reduce using rule 61 (estatuto -> voidcall empty_pv .)
    ID              reduce using rule 61 (estatuto -> voidcall empty_pv .)
    IF              reduce using rule 61 (estatuto -> voidcall empty_pv .)
    OUTPUT          reduce using rule 61 (estatuto -> voidcall empty_pv .)
    INPUT           reduce using rule 61 (estatuto -> voidcall empty_pv .)
    RETURN          reduce using rule 61 (estatuto -> voidcall empty_pv .)
    WHILE           reduce using rule 61 (estatuto -> voidcall empty_pv .)


state 105

    (62) estatuto -> while empty_pv .

    CLOSECURLY      reduce using rule 62 (estatuto -> while empty_pv .)
    VAR             reduce using rule 62 (estatuto -> while empty_pv .)
    ID              reduce using rule 62 (estatuto -> while empty_pv .)
    IF              reduce using rule 62 (estatuto -> while empty_pv .)
    OUTPUT          reduce using rule 62 (estatuto -> while empty_pv .)
    INPUT           reduce using rule 62 (estatuto -> while empty_pv .)
    RETURN          reduce using rule 62 (estatuto -> while empty_pv .)
    WHILE           reduce using rule 62 (estatuto -> while empty_pv .)


state 106

    (113) assign -> ID array . save_comp EQUALS save_op expresion SEMICOLON
    (137) save_comp -> .

    EQUALS          reduce using rule 137 (save_comp -> .)

    save_comp                      shift and go to state 139

state 107

    (64) voidcall -> ID DOT . voidcall
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 140

    voidcall                       shift and go to state 141
    callfunc                       shift and go to state 84

state 108

    (46) callfunc -> ID check_exists_func . add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (127) add_false_stack -> .

    OPENPAREN       reduce using rule 127 (add_false_stack -> .)

    add_false_stack                shift and go to state 142

state 109

    (31) array -> OPENBRACKET . expresion CLOSEBRACKET empty_pv array2
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 143
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 110

    (32) array -> empty .

    EQUALS          reduce using rule 32 (array -> empty .)
    TIMES           reduce using rule 32 (array -> empty .)
    DIV             reduce using rule 32 (array -> empty .)
    SUM             reduce using rule 32 (array -> empty .)
    SUBTRACT        reduce using rule 32 (array -> empty .)
    SAMEAS          reduce using rule 32 (array -> empty .)
    BIGGERTHAN      reduce using rule 32 (array -> empty .)
    BIGGEREQUALSTHAN reduce using rule 32 (array -> empty .)
    SMALLTHAN       reduce using rule 32 (array -> empty .)
    SMALLEQUALSTHAN reduce using rule 32 (array -> empty .)
    DIFFERENTTHAN   reduce using rule 32 (array -> empty .)
    AND             reduce using rule 32 (array -> empty .)
    OR              reduce using rule 32 (array -> empty .)
    SEMICOLON       reduce using rule 32 (array -> empty .)
    CLOSEBRACKET    reduce using rule 32 (array -> empty .)
    CLOSEPAREN      reduce using rule 32 (array -> empty .)
    COMMA           reduce using rule 32 (array -> empty .)


state 111

    (109) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 144
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 112

    (104) write -> OUTPUT save_op . OPENPAREN expresion altwrite

    OPENPAREN       shift and go to state 145


state 113

    (103) read -> INPUT save_op . OPENPAREN ID save_comp CLOSEPAREN SEMICOLON

    OPENPAREN       shift and go to state 146


state 114

    (114) return -> RETURN expresion . generate_quad_ret SEMICOLON add_return_exists
    (142) generate_quad_ret -> .

    SEMICOLON       reduce using rule 142 (generate_quad_ret -> .)

    generate_quad_ret              shift and go to state 147

state 115

    (82) expresion -> exp . altexpresion
    (83) altexpresion -> . altexpresion2 save_op exp
    (84) altexpresion -> . empty
    (85) altexpresion2 -> . SAMEAS
    (86) altexpresion2 -> . BIGGERTHAN
    (87) altexpresion2 -> . BIGGEREQUALSTHAN
    (88) altexpresion2 -> . SMALLTHAN
    (89) altexpresion2 -> . SMALLEQUALSTHAN
    (90) altexpresion2 -> . DIFFERENTTHAN
    (91) altexpresion2 -> . AND
    (92) altexpresion2 -> . OR
    (115) empty -> .

    SAMEAS          shift and go to state 151
    BIGGERTHAN      shift and go to state 152
    BIGGEREQUALSTHAN shift and go to state 153
    SMALLTHAN       shift and go to state 154
    SMALLEQUALSTHAN shift and go to state 155
    DIFFERENTTHAN   shift and go to state 156
    AND             shift and go to state 157
    OR              shift and go to state 158
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    altexpresion                   shift and go to state 148
    altexpresion2                  shift and go to state 149
    empty                          shift and go to state 150

state 116

    (93) exp -> termino .
    (94) exp -> termino . altexp
    (95) altexp -> . SUM save_op termino altexp
    (96) altexp -> . SUBTRACT save_op termino altexp
    (97) altexp -> . empty
    (115) empty -> .

  ! reduce/reduce conflict for SAMEAS resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for AND resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for OR resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 93 (exp -> termino .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (exp -> termino .)
    SAMEAS          reduce using rule 93 (exp -> termino .)
    BIGGERTHAN      reduce using rule 93 (exp -> termino .)
    BIGGEREQUALSTHAN reduce using rule 93 (exp -> termino .)
    SMALLTHAN       reduce using rule 93 (exp -> termino .)
    SMALLEQUALSTHAN reduce using rule 93 (exp -> termino .)
    DIFFERENTTHAN   reduce using rule 93 (exp -> termino .)
    AND             reduce using rule 93 (exp -> termino .)
    OR              reduce using rule 93 (exp -> termino .)
    SEMICOLON       reduce using rule 93 (exp -> termino .)
    CLOSEBRACKET    reduce using rule 93 (exp -> termino .)
    CLOSEPAREN      reduce using rule 93 (exp -> termino .)
    COMMA           reduce using rule 93 (exp -> termino .)
    SUM             shift and go to state 160
    SUBTRACT        shift and go to state 161

  ! SAMEAS          [ reduce using rule 115 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 115 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 115 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 115 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 115 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 115 (empty -> .) ]
  ! AND             [ reduce using rule 115 (empty -> .) ]
  ! OR              [ reduce using rule 115 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 115 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 115 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 115 (empty -> .) ]
  ! COMMA           [ reduce using rule 115 (empty -> .) ]

    altexp                         shift and go to state 159
    empty                          shift and go to state 162

state 117

    (98) termino -> factor .
    (99) termino -> factor . alttermino
    (100) alttermino -> . TIMES save_op factor alttermino
    (101) alttermino -> . DIV save_op factor alttermino
    (102) alttermino -> . empty
    (115) empty -> .

  ! reduce/reduce conflict for SUM resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for SUBTRACT resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for SAMEAS resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 98 (termino -> factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 98 (termino -> factor .)
    SUM             reduce using rule 98 (termino -> factor .)
    SUBTRACT        reduce using rule 98 (termino -> factor .)
    SAMEAS          reduce using rule 98 (termino -> factor .)
    BIGGERTHAN      reduce using rule 98 (termino -> factor .)
    BIGGEREQUALSTHAN reduce using rule 98 (termino -> factor .)
    SMALLTHAN       reduce using rule 98 (termino -> factor .)
    SMALLEQUALSTHAN reduce using rule 98 (termino -> factor .)
    DIFFERENTTHAN   reduce using rule 98 (termino -> factor .)
    AND             reduce using rule 98 (termino -> factor .)
    OR              reduce using rule 98 (termino -> factor .)
    SEMICOLON       reduce using rule 98 (termino -> factor .)
    CLOSEBRACKET    reduce using rule 98 (termino -> factor .)
    CLOSEPAREN      reduce using rule 98 (termino -> factor .)
    COMMA           reduce using rule 98 (termino -> factor .)
    TIMES           shift and go to state 164
    DIV             shift and go to state 165

  ! SUM             [ reduce using rule 115 (empty -> .) ]
  ! SUBTRACT        [ reduce using rule 115 (empty -> .) ]
  ! SAMEAS          [ reduce using rule 115 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 115 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 115 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 115 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 115 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 115 (empty -> .) ]
  ! AND             [ reduce using rule 115 (empty -> .) ]
  ! OR              [ reduce using rule 115 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 115 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 115 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 115 (empty -> .) ]
  ! COMMA           [ reduce using rule 115 (empty -> .) ]

    alttermino                     shift and go to state 163
    empty                          shift and go to state 166

state 118

    (107) factor -> OPENPAREN . save_op expresion CLOSEPAREN save_op
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 167

state 119

    (108) factor -> varcall .

    TIMES           reduce using rule 108 (factor -> varcall .)
    DIV             reduce using rule 108 (factor -> varcall .)
    SUM             reduce using rule 108 (factor -> varcall .)
    SUBTRACT        reduce using rule 108 (factor -> varcall .)
    SAMEAS          reduce using rule 108 (factor -> varcall .)
    BIGGERTHAN      reduce using rule 108 (factor -> varcall .)
    BIGGEREQUALSTHAN reduce using rule 108 (factor -> varcall .)
    SMALLTHAN       reduce using rule 108 (factor -> varcall .)
    SMALLEQUALSTHAN reduce using rule 108 (factor -> varcall .)
    DIFFERENTTHAN   reduce using rule 108 (factor -> varcall .)
    AND             reduce using rule 108 (factor -> varcall .)
    OR              reduce using rule 108 (factor -> varcall .)
    SEMICOLON       reduce using rule 108 (factor -> varcall .)
    CLOSEBRACKET    reduce using rule 108 (factor -> varcall .)
    CLOSEPAREN      reduce using rule 108 (factor -> varcall .)
    COMMA           reduce using rule 108 (factor -> varcall .)


state 120

    (68) varcall -> varcte . save_const
    (136) save_const -> .

    TIMES           reduce using rule 136 (save_const -> .)
    DIV             reduce using rule 136 (save_const -> .)
    SUM             reduce using rule 136 (save_const -> .)
    SUBTRACT        reduce using rule 136 (save_const -> .)
    SAMEAS          reduce using rule 136 (save_const -> .)
    BIGGERTHAN      reduce using rule 136 (save_const -> .)
    BIGGEREQUALSTHAN reduce using rule 136 (save_const -> .)
    SMALLTHAN       reduce using rule 136 (save_const -> .)
    SMALLEQUALSTHAN reduce using rule 136 (save_const -> .)
    DIFFERENTTHAN   reduce using rule 136 (save_const -> .)
    AND             reduce using rule 136 (save_const -> .)
    OR              reduce using rule 136 (save_const -> .)
    SEMICOLON       reduce using rule 136 (save_const -> .)
    CLOSEBRACKET    reduce using rule 136 (save_const -> .)
    CLOSEPAREN      reduce using rule 136 (save_const -> .)
    COMMA           reduce using rule 136 (save_const -> .)

    save_const                     shift and go to state 168

state 121

    (69) varcall -> varcomplicated . save_comp
    (137) save_comp -> .

    TIMES           reduce using rule 137 (save_comp -> .)
    DIV             reduce using rule 137 (save_comp -> .)
    SUM             reduce using rule 137 (save_comp -> .)
    SUBTRACT        reduce using rule 137 (save_comp -> .)
    SAMEAS          reduce using rule 137 (save_comp -> .)
    BIGGERTHAN      reduce using rule 137 (save_comp -> .)
    BIGGEREQUALSTHAN reduce using rule 137 (save_comp -> .)
    SMALLTHAN       reduce using rule 137 (save_comp -> .)
    SMALLEQUALSTHAN reduce using rule 137 (save_comp -> .)
    DIFFERENTTHAN   reduce using rule 137 (save_comp -> .)
    AND             reduce using rule 137 (save_comp -> .)
    OR              reduce using rule 137 (save_comp -> .)
    SEMICOLON       reduce using rule 137 (save_comp -> .)
    CLOSEBRACKET    reduce using rule 137 (save_comp -> .)
    CLOSEPAREN      reduce using rule 137 (save_comp -> .)
    COMMA           reduce using rule 137 (save_comp -> .)

    save_comp                      shift and go to state 169

state 122

    (70) varcte -> TRUE .

    TIMES           reduce using rule 70 (varcte -> TRUE .)
    DIV             reduce using rule 70 (varcte -> TRUE .)
    SUM             reduce using rule 70 (varcte -> TRUE .)
    SUBTRACT        reduce using rule 70 (varcte -> TRUE .)
    SAMEAS          reduce using rule 70 (varcte -> TRUE .)
    BIGGERTHAN      reduce using rule 70 (varcte -> TRUE .)
    BIGGEREQUALSTHAN reduce using rule 70 (varcte -> TRUE .)
    SMALLTHAN       reduce using rule 70 (varcte -> TRUE .)
    SMALLEQUALSTHAN reduce using rule 70 (varcte -> TRUE .)
    DIFFERENTTHAN   reduce using rule 70 (varcte -> TRUE .)
    AND             reduce using rule 70 (varcte -> TRUE .)
    OR              reduce using rule 70 (varcte -> TRUE .)
    SEMICOLON       reduce using rule 70 (varcte -> TRUE .)
    CLOSEBRACKET    reduce using rule 70 (varcte -> TRUE .)
    CLOSEPAREN      reduce using rule 70 (varcte -> TRUE .)
    COMMA           reduce using rule 70 (varcte -> TRUE .)


state 123

    (71) varcte -> FALSE .

    TIMES           reduce using rule 71 (varcte -> FALSE .)
    DIV             reduce using rule 71 (varcte -> FALSE .)
    SUM             reduce using rule 71 (varcte -> FALSE .)
    SUBTRACT        reduce using rule 71 (varcte -> FALSE .)
    SAMEAS          reduce using rule 71 (varcte -> FALSE .)
    BIGGERTHAN      reduce using rule 71 (varcte -> FALSE .)
    BIGGEREQUALSTHAN reduce using rule 71 (varcte -> FALSE .)
    SMALLTHAN       reduce using rule 71 (varcte -> FALSE .)
    SMALLEQUALSTHAN reduce using rule 71 (varcte -> FALSE .)
    DIFFERENTTHAN   reduce using rule 71 (varcte -> FALSE .)
    AND             reduce using rule 71 (varcte -> FALSE .)
    OR              reduce using rule 71 (varcte -> FALSE .)
    SEMICOLON       reduce using rule 71 (varcte -> FALSE .)
    CLOSEBRACKET    reduce using rule 71 (varcte -> FALSE .)
    CLOSEPAREN      reduce using rule 71 (varcte -> FALSE .)
    COMMA           reduce using rule 71 (varcte -> FALSE .)


state 124

    (72) varcte -> CTEFLOAT .

    TIMES           reduce using rule 72 (varcte -> CTEFLOAT .)
    DIV             reduce using rule 72 (varcte -> CTEFLOAT .)
    SUM             reduce using rule 72 (varcte -> CTEFLOAT .)
    SUBTRACT        reduce using rule 72 (varcte -> CTEFLOAT .)
    SAMEAS          reduce using rule 72 (varcte -> CTEFLOAT .)
    BIGGERTHAN      reduce using rule 72 (varcte -> CTEFLOAT .)
    BIGGEREQUALSTHAN reduce using rule 72 (varcte -> CTEFLOAT .)
    SMALLTHAN       reduce using rule 72 (varcte -> CTEFLOAT .)
    SMALLEQUALSTHAN reduce using rule 72 (varcte -> CTEFLOAT .)
    DIFFERENTTHAN   reduce using rule 72 (varcte -> CTEFLOAT .)
    AND             reduce using rule 72 (varcte -> CTEFLOAT .)
    OR              reduce using rule 72 (varcte -> CTEFLOAT .)
    SEMICOLON       reduce using rule 72 (varcte -> CTEFLOAT .)
    CLOSEBRACKET    reduce using rule 72 (varcte -> CTEFLOAT .)
    CLOSEPAREN      reduce using rule 72 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 72 (varcte -> CTEFLOAT .)


state 125

    (73) varcte -> CTESTRING .

    TIMES           reduce using rule 73 (varcte -> CTESTRING .)
    DIV             reduce using rule 73 (varcte -> CTESTRING .)
    SUM             reduce using rule 73 (varcte -> CTESTRING .)
    SUBTRACT        reduce using rule 73 (varcte -> CTESTRING .)
    SAMEAS          reduce using rule 73 (varcte -> CTESTRING .)
    BIGGERTHAN      reduce using rule 73 (varcte -> CTESTRING .)
    BIGGEREQUALSTHAN reduce using rule 73 (varcte -> CTESTRING .)
    SMALLTHAN       reduce using rule 73 (varcte -> CTESTRING .)
    SMALLEQUALSTHAN reduce using rule 73 (varcte -> CTESTRING .)
    DIFFERENTTHAN   reduce using rule 73 (varcte -> CTESTRING .)
    AND             reduce using rule 73 (varcte -> CTESTRING .)
    OR              reduce using rule 73 (varcte -> CTESTRING .)
    SEMICOLON       reduce using rule 73 (varcte -> CTESTRING .)
    CLOSEBRACKET    reduce using rule 73 (varcte -> CTESTRING .)
    CLOSEPAREN      reduce using rule 73 (varcte -> CTESTRING .)
    COMMA           reduce using rule 73 (varcte -> CTESTRING .)


state 126

    (74) varcte -> CTEINT .

    TIMES           reduce using rule 74 (varcte -> CTEINT .)
    DIV             reduce using rule 74 (varcte -> CTEINT .)
    SUM             reduce using rule 74 (varcte -> CTEINT .)
    SUBTRACT        reduce using rule 74 (varcte -> CTEINT .)
    SAMEAS          reduce using rule 74 (varcte -> CTEINT .)
    BIGGERTHAN      reduce using rule 74 (varcte -> CTEINT .)
    BIGGEREQUALSTHAN reduce using rule 74 (varcte -> CTEINT .)
    SMALLTHAN       reduce using rule 74 (varcte -> CTEINT .)
    SMALLEQUALSTHAN reduce using rule 74 (varcte -> CTEINT .)
    DIFFERENTTHAN   reduce using rule 74 (varcte -> CTEINT .)
    AND             reduce using rule 74 (varcte -> CTEINT .)
    OR              reduce using rule 74 (varcte -> CTEINT .)
    SEMICOLON       reduce using rule 74 (varcte -> CTEINT .)
    CLOSEBRACKET    reduce using rule 74 (varcte -> CTEINT .)
    CLOSEPAREN      reduce using rule 74 (varcte -> CTEINT .)
    COMMA           reduce using rule 74 (varcte -> CTEINT .)


state 127

    (75) varcomplicated -> varcomp1 .

    TIMES           reduce using rule 75 (varcomplicated -> varcomp1 .)
    DIV             reduce using rule 75 (varcomplicated -> varcomp1 .)
    SUM             reduce using rule 75 (varcomplicated -> varcomp1 .)
    SUBTRACT        reduce using rule 75 (varcomplicated -> varcomp1 .)
    SAMEAS          reduce using rule 75 (varcomplicated -> varcomp1 .)
    BIGGERTHAN      reduce using rule 75 (varcomplicated -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 75 (varcomplicated -> varcomp1 .)
    SMALLTHAN       reduce using rule 75 (varcomplicated -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 75 (varcomplicated -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 75 (varcomplicated -> varcomp1 .)
    AND             reduce using rule 75 (varcomplicated -> varcomp1 .)
    OR              reduce using rule 75 (varcomplicated -> varcomp1 .)
    SEMICOLON       reduce using rule 75 (varcomplicated -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 75 (varcomplicated -> varcomp1 .)
    CLOSEPAREN      reduce using rule 75 (varcomplicated -> varcomp1 .)
    COMMA           reduce using rule 75 (varcomplicated -> varcomp1 .)


state 128

    (76) varcomplicated -> callfunc .

    TIMES           reduce using rule 76 (varcomplicated -> callfunc .)
    DIV             reduce using rule 76 (varcomplicated -> callfunc .)
    SUM             reduce using rule 76 (varcomplicated -> callfunc .)
    SUBTRACT        reduce using rule 76 (varcomplicated -> callfunc .)
    SAMEAS          reduce using rule 76 (varcomplicated -> callfunc .)
    BIGGERTHAN      reduce using rule 76 (varcomplicated -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 76 (varcomplicated -> callfunc .)
    SMALLTHAN       reduce using rule 76 (varcomplicated -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 76 (varcomplicated -> callfunc .)
    DIFFERENTTHAN   reduce using rule 76 (varcomplicated -> callfunc .)
    AND             reduce using rule 76 (varcomplicated -> callfunc .)
    OR              reduce using rule 76 (varcomplicated -> callfunc .)
    SEMICOLON       reduce using rule 76 (varcomplicated -> callfunc .)
    CLOSEBRACKET    reduce using rule 76 (varcomplicated -> callfunc .)
    CLOSEPAREN      reduce using rule 76 (varcomplicated -> callfunc .)
    COMMA           reduce using rule 76 (varcomplicated -> callfunc .)


state 129

    (77) varcomp1 -> ID . varcomp2
    (46) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (78) varcomp2 -> . DOT varcomp3
    (79) varcomp2 -> . array empty
    (132) check_exists_func -> .
    (31) array -> . OPENBRACKET expresion CLOSEBRACKET empty_pv array2
    (32) array -> . empty
    (115) empty -> .

    DOT             shift and go to state 171
    OPENPAREN       reduce using rule 132 (check_exists_func -> .)
    OPENBRACKET     shift and go to state 109
    TIMES           reduce using rule 115 (empty -> .)
    DIV             reduce using rule 115 (empty -> .)
    SUM             reduce using rule 115 (empty -> .)
    SUBTRACT        reduce using rule 115 (empty -> .)
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    varcomp2                       shift and go to state 170
    check_exists_func              shift and go to state 108
    array                          shift and go to state 172
    empty                          shift and go to state 110

state 130

    (63) voidcall -> callfunc SEMICOLON .

    CLOSECURLY      reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    VAR             reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    ID              reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    IF              reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    OUTPUT          reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    INPUT           reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    RETURN          reduce using rule 63 (voidcall -> callfunc SEMICOLON .)
    WHILE           reduce using rule 63 (voidcall -> callfunc SEMICOLON .)


state 131

    (65) while -> WHILE add_stack_jump . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    OPENPAREN       shift and go to state 173


state 132

    (15) alt2class -> constructor CLOSECURLY SEMICOLON . remove_class_scope
    (119) remove_class_scope -> .

    CLASS           reduce using rule 119 (remove_class_scope -> .)
    VAR             reduce using rule 119 (remove_class_scope -> .)
    FUNC            reduce using rule 119 (remove_class_scope -> .)
    MAIN            reduce using rule 119 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 174

state 133

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN . altconst store_params CLOSEPAREN OPENCURLY alt2const
    (17) altconst -> . params
    (18) altconst -> . empty
    (43) params -> . ID TWODOTS type save_params altparams
    (115) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 115 (empty -> .)

    altconst                       shift and go to state 175
    params                         shift and go to state 176
    empty                          shift and go to state 177

state 134

    (28) dec_array2 -> OPENBRACKET CTEINT . CLOSEBRACKET

    CLOSEBRACKET    shift and go to state 178


state 135

    (43) params -> ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 43 (params -> ID TWODOTS type save_params altparams .)


state 136

    (44) altparams -> COMMA . ID TWODOTS type save_params altparams

    ID              shift and go to state 179


state 137

    (45) altparams -> empty .

    CLOSEPAREN      reduce using rule 45 (altparams -> empty .)


state 138

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params . OPENCURLY alt3func

    OPENCURLY       shift and go to state 180


state 139

    (113) assign -> ID array save_comp . EQUALS save_op expresion SEMICOLON

    EQUALS          shift and go to state 181


state 140

    (64) voidcall -> ID . DOT voidcall
    (46) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (132) check_exists_func -> .

    DOT             shift and go to state 107
    OPENPAREN       reduce using rule 132 (check_exists_func -> .)

    check_exists_func              shift and go to state 108

state 141

    (64) voidcall -> ID DOT voidcall .

    CLOSECURLY      reduce using rule 64 (voidcall -> ID DOT voidcall .)
    VAR             reduce using rule 64 (voidcall -> ID DOT voidcall .)
    ID              reduce using rule 64 (voidcall -> ID DOT voidcall .)
    IF              reduce using rule 64 (voidcall -> ID DOT voidcall .)
    OUTPUT          reduce using rule 64 (voidcall -> ID DOT voidcall .)
    INPUT           reduce using rule 64 (voidcall -> ID DOT voidcall .)
    RETURN          reduce using rule 64 (voidcall -> ID DOT voidcall .)
    WHILE           reduce using rule 64 (voidcall -> ID DOT voidcall .)


state 142

    (46) callfunc -> ID check_exists_func add_false_stack . OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 182


state 143

    (31) array -> OPENBRACKET expresion . CLOSEBRACKET empty_pv array2

    CLOSEBRACKET    shift and go to state 183


state 144

    (109) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    CLOSEPAREN      shift and go to state 184


state 145

    (104) write -> OUTPUT save_op OPENPAREN . expresion altwrite
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 185
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 146

    (103) read -> INPUT save_op OPENPAREN . ID save_comp CLOSEPAREN SEMICOLON

    ID              shift and go to state 186


state 147

    (114) return -> RETURN expresion generate_quad_ret . SEMICOLON add_return_exists

    SEMICOLON       shift and go to state 187


state 148

    (82) expresion -> exp altexpresion .

    SEMICOLON       reduce using rule 82 (expresion -> exp altexpresion .)
    CLOSEBRACKET    reduce using rule 82 (expresion -> exp altexpresion .)
    CLOSEPAREN      reduce using rule 82 (expresion -> exp altexpresion .)
    COMMA           reduce using rule 82 (expresion -> exp altexpresion .)


state 149

    (83) altexpresion -> altexpresion2 . save_op exp
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 188

state 150

    (84) altexpresion -> empty .

    SEMICOLON       reduce using rule 84 (altexpresion -> empty .)
    CLOSEBRACKET    reduce using rule 84 (altexpresion -> empty .)
    CLOSEPAREN      reduce using rule 84 (altexpresion -> empty .)
    COMMA           reduce using rule 84 (altexpresion -> empty .)


state 151

    (85) altexpresion2 -> SAMEAS .

    OPENPAREN       reduce using rule 85 (altexpresion2 -> SAMEAS .)
    TRUE            reduce using rule 85 (altexpresion2 -> SAMEAS .)
    FALSE           reduce using rule 85 (altexpresion2 -> SAMEAS .)
    CTEFLOAT        reduce using rule 85 (altexpresion2 -> SAMEAS .)
    CTESTRING       reduce using rule 85 (altexpresion2 -> SAMEAS .)
    CTEINT          reduce using rule 85 (altexpresion2 -> SAMEAS .)
    ID              reduce using rule 85 (altexpresion2 -> SAMEAS .)


state 152

    (86) altexpresion2 -> BIGGERTHAN .

    OPENPAREN       reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    TRUE            reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    FALSE           reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    CTEFLOAT        reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    CTESTRING       reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    CTEINT          reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)
    ID              reduce using rule 86 (altexpresion2 -> BIGGERTHAN .)


state 153

    (87) altexpresion2 -> BIGGEREQUALSTHAN .

    OPENPAREN       reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    TRUE            reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    FALSE           reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEFLOAT        reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTESTRING       reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEINT          reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)
    ID              reduce using rule 87 (altexpresion2 -> BIGGEREQUALSTHAN .)


state 154

    (88) altexpresion2 -> SMALLTHAN .

    OPENPAREN       reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    TRUE            reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    FALSE           reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    CTEFLOAT        reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    CTESTRING       reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    CTEINT          reduce using rule 88 (altexpresion2 -> SMALLTHAN .)
    ID              reduce using rule 88 (altexpresion2 -> SMALLTHAN .)


state 155

    (89) altexpresion2 -> SMALLEQUALSTHAN .

    OPENPAREN       reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    TRUE            reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    FALSE           reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEFLOAT        reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTESTRING       reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEINT          reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)
    ID              reduce using rule 89 (altexpresion2 -> SMALLEQUALSTHAN .)


state 156

    (90) altexpresion2 -> DIFFERENTTHAN .

    OPENPAREN       reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    TRUE            reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    FALSE           reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    CTEFLOAT        reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    CTESTRING       reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    CTEINT          reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)
    ID              reduce using rule 90 (altexpresion2 -> DIFFERENTTHAN .)


state 157

    (91) altexpresion2 -> AND .

    OPENPAREN       reduce using rule 91 (altexpresion2 -> AND .)
    TRUE            reduce using rule 91 (altexpresion2 -> AND .)
    FALSE           reduce using rule 91 (altexpresion2 -> AND .)
    CTEFLOAT        reduce using rule 91 (altexpresion2 -> AND .)
    CTESTRING       reduce using rule 91 (altexpresion2 -> AND .)
    CTEINT          reduce using rule 91 (altexpresion2 -> AND .)
    ID              reduce using rule 91 (altexpresion2 -> AND .)


state 158

    (92) altexpresion2 -> OR .

    OPENPAREN       reduce using rule 92 (altexpresion2 -> OR .)
    TRUE            reduce using rule 92 (altexpresion2 -> OR .)
    FALSE           reduce using rule 92 (altexpresion2 -> OR .)
    CTEFLOAT        reduce using rule 92 (altexpresion2 -> OR .)
    CTESTRING       reduce using rule 92 (altexpresion2 -> OR .)
    CTEINT          reduce using rule 92 (altexpresion2 -> OR .)
    ID              reduce using rule 92 (altexpresion2 -> OR .)


state 159

    (94) exp -> termino altexp .

    SAMEAS          reduce using rule 94 (exp -> termino altexp .)
    BIGGERTHAN      reduce using rule 94 (exp -> termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 94 (exp -> termino altexp .)
    SMALLTHAN       reduce using rule 94 (exp -> termino altexp .)
    SMALLEQUALSTHAN reduce using rule 94 (exp -> termino altexp .)
    DIFFERENTTHAN   reduce using rule 94 (exp -> termino altexp .)
    AND             reduce using rule 94 (exp -> termino altexp .)
    OR              reduce using rule 94 (exp -> termino altexp .)
    SEMICOLON       reduce using rule 94 (exp -> termino altexp .)
    CLOSEBRACKET    reduce using rule 94 (exp -> termino altexp .)
    CLOSEPAREN      reduce using rule 94 (exp -> termino altexp .)
    COMMA           reduce using rule 94 (exp -> termino altexp .)


state 160

    (95) altexp -> SUM . save_op termino altexp
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 189

state 161

    (96) altexp -> SUBTRACT . save_op termino altexp
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 190

state 162

    (97) altexp -> empty .

    SAMEAS          reduce using rule 97 (altexp -> empty .)
    BIGGERTHAN      reduce using rule 97 (altexp -> empty .)
    BIGGEREQUALSTHAN reduce using rule 97 (altexp -> empty .)
    SMALLTHAN       reduce using rule 97 (altexp -> empty .)
    SMALLEQUALSTHAN reduce using rule 97 (altexp -> empty .)
    DIFFERENTTHAN   reduce using rule 97 (altexp -> empty .)
    AND             reduce using rule 97 (altexp -> empty .)
    OR              reduce using rule 97 (altexp -> empty .)
    SEMICOLON       reduce using rule 97 (altexp -> empty .)
    CLOSEBRACKET    reduce using rule 97 (altexp -> empty .)
    CLOSEPAREN      reduce using rule 97 (altexp -> empty .)
    COMMA           reduce using rule 97 (altexp -> empty .)


state 163

    (99) termino -> factor alttermino .

    SUM             reduce using rule 99 (termino -> factor alttermino .)
    SUBTRACT        reduce using rule 99 (termino -> factor alttermino .)
    SAMEAS          reduce using rule 99 (termino -> factor alttermino .)
    BIGGERTHAN      reduce using rule 99 (termino -> factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 99 (termino -> factor alttermino .)
    SMALLTHAN       reduce using rule 99 (termino -> factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 99 (termino -> factor alttermino .)
    DIFFERENTTHAN   reduce using rule 99 (termino -> factor alttermino .)
    AND             reduce using rule 99 (termino -> factor alttermino .)
    OR              reduce using rule 99 (termino -> factor alttermino .)
    SEMICOLON       reduce using rule 99 (termino -> factor alttermino .)
    CLOSEBRACKET    reduce using rule 99 (termino -> factor alttermino .)
    CLOSEPAREN      reduce using rule 99 (termino -> factor alttermino .)
    COMMA           reduce using rule 99 (termino -> factor alttermino .)


state 164

    (100) alttermino -> TIMES . save_op factor alttermino
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 191

state 165

    (101) alttermino -> DIV . save_op factor alttermino
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 192

state 166

    (102) alttermino -> empty .

    SUM             reduce using rule 102 (alttermino -> empty .)
    SUBTRACT        reduce using rule 102 (alttermino -> empty .)
    SAMEAS          reduce using rule 102 (alttermino -> empty .)
    BIGGERTHAN      reduce using rule 102 (alttermino -> empty .)
    BIGGEREQUALSTHAN reduce using rule 102 (alttermino -> empty .)
    SMALLTHAN       reduce using rule 102 (alttermino -> empty .)
    SMALLEQUALSTHAN reduce using rule 102 (alttermino -> empty .)
    DIFFERENTTHAN   reduce using rule 102 (alttermino -> empty .)
    AND             reduce using rule 102 (alttermino -> empty .)
    OR              reduce using rule 102 (alttermino -> empty .)
    SEMICOLON       reduce using rule 102 (alttermino -> empty .)
    CLOSEBRACKET    reduce using rule 102 (alttermino -> empty .)
    CLOSEPAREN      reduce using rule 102 (alttermino -> empty .)
    COMMA           reduce using rule 102 (alttermino -> empty .)


state 167

    (107) factor -> OPENPAREN save_op . expresion CLOSEPAREN save_op
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 193
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 168

    (68) varcall -> varcte save_const .

    TIMES           reduce using rule 68 (varcall -> varcte save_const .)
    DIV             reduce using rule 68 (varcall -> varcte save_const .)
    SUM             reduce using rule 68 (varcall -> varcte save_const .)
    SUBTRACT        reduce using rule 68 (varcall -> varcte save_const .)
    SAMEAS          reduce using rule 68 (varcall -> varcte save_const .)
    BIGGERTHAN      reduce using rule 68 (varcall -> varcte save_const .)
    BIGGEREQUALSTHAN reduce using rule 68 (varcall -> varcte save_const .)
    SMALLTHAN       reduce using rule 68 (varcall -> varcte save_const .)
    SMALLEQUALSTHAN reduce using rule 68 (varcall -> varcte save_const .)
    DIFFERENTTHAN   reduce using rule 68 (varcall -> varcte save_const .)
    AND             reduce using rule 68 (varcall -> varcte save_const .)
    OR              reduce using rule 68 (varcall -> varcte save_const .)
    SEMICOLON       reduce using rule 68 (varcall -> varcte save_const .)
    CLOSEBRACKET    reduce using rule 68 (varcall -> varcte save_const .)
    CLOSEPAREN      reduce using rule 68 (varcall -> varcte save_const .)
    COMMA           reduce using rule 68 (varcall -> varcte save_const .)


state 169

    (69) varcall -> varcomplicated save_comp .

    TIMES           reduce using rule 69 (varcall -> varcomplicated save_comp .)
    DIV             reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SUM             reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SUBTRACT        reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SAMEAS          reduce using rule 69 (varcall -> varcomplicated save_comp .)
    BIGGERTHAN      reduce using rule 69 (varcall -> varcomplicated save_comp .)
    BIGGEREQUALSTHAN reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SMALLTHAN       reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SMALLEQUALSTHAN reduce using rule 69 (varcall -> varcomplicated save_comp .)
    DIFFERENTTHAN   reduce using rule 69 (varcall -> varcomplicated save_comp .)
    AND             reduce using rule 69 (varcall -> varcomplicated save_comp .)
    OR              reduce using rule 69 (varcall -> varcomplicated save_comp .)
    SEMICOLON       reduce using rule 69 (varcall -> varcomplicated save_comp .)
    CLOSEBRACKET    reduce using rule 69 (varcall -> varcomplicated save_comp .)
    CLOSEPAREN      reduce using rule 69 (varcall -> varcomplicated save_comp .)
    COMMA           reduce using rule 69 (varcall -> varcomplicated save_comp .)


state 170

    (77) varcomp1 -> ID varcomp2 .

    TIMES           reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    DIV             reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SUM             reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SUBTRACT        reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SAMEAS          reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    BIGGERTHAN      reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    BIGGEREQUALSTHAN reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SMALLTHAN       reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SMALLEQUALSTHAN reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    DIFFERENTTHAN   reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    AND             reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    OR              reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    SEMICOLON       reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    CLOSEBRACKET    reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    CLOSEPAREN      reduce using rule 77 (varcomp1 -> ID varcomp2 .)
    COMMA           reduce using rule 77 (varcomp1 -> ID varcomp2 .)


state 171

    (78) varcomp2 -> DOT . varcomp3
    (80) varcomp3 -> . varcomp1
    (81) varcomp3 -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 129

    varcomp3                       shift and go to state 194
    varcomp1                       shift and go to state 195
    callfunc                       shift and go to state 196

state 172

    (79) varcomp2 -> array . empty
    (115) empty -> .

    TIMES           reduce using rule 115 (empty -> .)
    DIV             reduce using rule 115 (empty -> .)
    SUM             reduce using rule 115 (empty -> .)
    SUBTRACT        reduce using rule 115 (empty -> .)
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    empty                          shift and go to state 197

state 173

    (65) while -> WHILE add_stack_jump OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 198
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 174

    (15) alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .

    CLASS           reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    VAR             reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    FUNC            reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    MAIN            reduce using rule 15 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)


state 175

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst . store_params CLOSEPAREN OPENCURLY alt2const
    (124) store_params -> .

    CLOSEPAREN      reduce using rule 124 (store_params -> .)

    store_params                   shift and go to state 199

state 176

    (17) altconst -> params .

    CLOSEPAREN      reduce using rule 17 (altconst -> params .)


state 177

    (18) altconst -> empty .

    CLOSEPAREN      reduce using rule 18 (altconst -> empty .)


state 178

    (28) dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .

    COMMA           reduce using rule 28 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)
    TWODOTS         reduce using rule 28 (dec_array2 -> OPENBRACKET CTEINT CLOSEBRACKET .)


state 179

    (44) altparams -> COMMA ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 200


state 180

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY . alt3func
    (40) alt3func -> . var alt3func
    (41) alt3func -> . estatuto alt3func
    (42) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 204
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt3func                       shift and go to state 201
    var                            shift and go to state 202
    estatuto                       shift and go to state 203
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 181

    (113) assign -> ID array save_comp EQUALS . save_op expresion SEMICOLON
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 205

state 182

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN . altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (47) altcall -> . expresion generate_param_quad alt2call
    (48) altcall -> . empty
    (82) expresion -> . exp altexpresion
    (115) empty -> .
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 115 (empty -> .)
    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    altcall                        shift and go to state 206
    expresion                      shift and go to state 207
    empty                          shift and go to state 208
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 183

    (31) array -> OPENBRACKET expresion CLOSEBRACKET . empty_pv array2
    (133) empty_pv -> .

    OPENBRACKET     reduce using rule 133 (empty_pv -> .)
    EQUALS          reduce using rule 133 (empty_pv -> .)
    TIMES           reduce using rule 133 (empty_pv -> .)
    DIV             reduce using rule 133 (empty_pv -> .)
    SUM             reduce using rule 133 (empty_pv -> .)
    SUBTRACT        reduce using rule 133 (empty_pv -> .)
    SAMEAS          reduce using rule 133 (empty_pv -> .)
    BIGGERTHAN      reduce using rule 133 (empty_pv -> .)
    BIGGEREQUALSTHAN reduce using rule 133 (empty_pv -> .)
    SMALLTHAN       reduce using rule 133 (empty_pv -> .)
    SMALLEQUALSTHAN reduce using rule 133 (empty_pv -> .)
    DIFFERENTTHAN   reduce using rule 133 (empty_pv -> .)
    AND             reduce using rule 133 (empty_pv -> .)
    OR              reduce using rule 133 (empty_pv -> .)
    SEMICOLON       reduce using rule 133 (empty_pv -> .)
    CLOSEBRACKET    reduce using rule 133 (empty_pv -> .)
    CLOSEPAREN      reduce using rule 133 (empty_pv -> .)
    COMMA           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 209

state 184

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (139) add_gotof -> .

    OPENCURLY       reduce using rule 139 (add_gotof -> .)

    add_gotof                      shift and go to state 210

state 185

    (104) write -> OUTPUT save_op OPENPAREN expresion . altwrite
    (105) altwrite -> . COMMA save_op expresion altwrite
    (106) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 212
    CLOSEPAREN      shift and go to state 213

    altwrite                       shift and go to state 211

state 186

    (103) read -> INPUT save_op OPENPAREN ID . save_comp CLOSEPAREN SEMICOLON
    (137) save_comp -> .

    CLOSEPAREN      reduce using rule 137 (save_comp -> .)

    save_comp                      shift and go to state 214

state 187

    (114) return -> RETURN expresion generate_quad_ret SEMICOLON . add_return_exists
    (143) add_return_exists -> .

    CLOSECURLY      reduce using rule 143 (add_return_exists -> .)
    VAR             reduce using rule 143 (add_return_exists -> .)
    ID              reduce using rule 143 (add_return_exists -> .)
    IF              reduce using rule 143 (add_return_exists -> .)
    OUTPUT          reduce using rule 143 (add_return_exists -> .)
    INPUT           reduce using rule 143 (add_return_exists -> .)
    RETURN          reduce using rule 143 (add_return_exists -> .)
    WHILE           reduce using rule 143 (add_return_exists -> .)

    add_return_exists              shift and go to state 215

state 188

    (83) altexpresion -> altexpresion2 save_op . exp
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    exp                            shift and go to state 216
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 189

    (95) altexp -> SUM save_op . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    termino                        shift and go to state 217
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 190

    (96) altexp -> SUBTRACT save_op . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    termino                        shift and go to state 218
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 191

    (100) alttermino -> TIMES save_op . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    factor                         shift and go to state 219
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 192

    (101) alttermino -> DIV save_op . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    factor                         shift and go to state 220
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 193

    (107) factor -> OPENPAREN save_op expresion . CLOSEPAREN save_op

    CLOSEPAREN      shift and go to state 221


state 194

    (78) varcomp2 -> DOT varcomp3 .

    TIMES           reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    DIV             reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SUM             reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SUBTRACT        reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SAMEAS          reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    BIGGERTHAN      reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    BIGGEREQUALSTHAN reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SMALLTHAN       reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SMALLEQUALSTHAN reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    DIFFERENTTHAN   reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    AND             reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    OR              reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    SEMICOLON       reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    CLOSEBRACKET    reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    CLOSEPAREN      reduce using rule 78 (varcomp2 -> DOT varcomp3 .)
    COMMA           reduce using rule 78 (varcomp2 -> DOT varcomp3 .)


state 195

    (80) varcomp3 -> varcomp1 .

    TIMES           reduce using rule 80 (varcomp3 -> varcomp1 .)
    DIV             reduce using rule 80 (varcomp3 -> varcomp1 .)
    SUM             reduce using rule 80 (varcomp3 -> varcomp1 .)
    SUBTRACT        reduce using rule 80 (varcomp3 -> varcomp1 .)
    SAMEAS          reduce using rule 80 (varcomp3 -> varcomp1 .)
    BIGGERTHAN      reduce using rule 80 (varcomp3 -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 80 (varcomp3 -> varcomp1 .)
    SMALLTHAN       reduce using rule 80 (varcomp3 -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 80 (varcomp3 -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 80 (varcomp3 -> varcomp1 .)
    AND             reduce using rule 80 (varcomp3 -> varcomp1 .)
    OR              reduce using rule 80 (varcomp3 -> varcomp1 .)
    SEMICOLON       reduce using rule 80 (varcomp3 -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 80 (varcomp3 -> varcomp1 .)
    CLOSEPAREN      reduce using rule 80 (varcomp3 -> varcomp1 .)
    COMMA           reduce using rule 80 (varcomp3 -> varcomp1 .)


state 196

    (81) varcomp3 -> callfunc .

    TIMES           reduce using rule 81 (varcomp3 -> callfunc .)
    DIV             reduce using rule 81 (varcomp3 -> callfunc .)
    SUM             reduce using rule 81 (varcomp3 -> callfunc .)
    SUBTRACT        reduce using rule 81 (varcomp3 -> callfunc .)
    SAMEAS          reduce using rule 81 (varcomp3 -> callfunc .)
    BIGGERTHAN      reduce using rule 81 (varcomp3 -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 81 (varcomp3 -> callfunc .)
    SMALLTHAN       reduce using rule 81 (varcomp3 -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 81 (varcomp3 -> callfunc .)
    DIFFERENTTHAN   reduce using rule 81 (varcomp3 -> callfunc .)
    AND             reduce using rule 81 (varcomp3 -> callfunc .)
    OR              reduce using rule 81 (varcomp3 -> callfunc .)
    SEMICOLON       reduce using rule 81 (varcomp3 -> callfunc .)
    CLOSEBRACKET    reduce using rule 81 (varcomp3 -> callfunc .)
    CLOSEPAREN      reduce using rule 81 (varcomp3 -> callfunc .)
    COMMA           reduce using rule 81 (varcomp3 -> callfunc .)


state 197

    (79) varcomp2 -> array empty .

    TIMES           reduce using rule 79 (varcomp2 -> array empty .)
    DIV             reduce using rule 79 (varcomp2 -> array empty .)
    SUM             reduce using rule 79 (varcomp2 -> array empty .)
    SUBTRACT        reduce using rule 79 (varcomp2 -> array empty .)
    SAMEAS          reduce using rule 79 (varcomp2 -> array empty .)
    BIGGERTHAN      reduce using rule 79 (varcomp2 -> array empty .)
    BIGGEREQUALSTHAN reduce using rule 79 (varcomp2 -> array empty .)
    SMALLTHAN       reduce using rule 79 (varcomp2 -> array empty .)
    SMALLEQUALSTHAN reduce using rule 79 (varcomp2 -> array empty .)
    DIFFERENTTHAN   reduce using rule 79 (varcomp2 -> array empty .)
    AND             reduce using rule 79 (varcomp2 -> array empty .)
    OR              reduce using rule 79 (varcomp2 -> array empty .)
    SEMICOLON       reduce using rule 79 (varcomp2 -> array empty .)
    CLOSEBRACKET    reduce using rule 79 (varcomp2 -> array empty .)
    CLOSEPAREN      reduce using rule 79 (varcomp2 -> array empty .)
    COMMA           reduce using rule 79 (varcomp2 -> array empty .)


state 198

    (65) while -> WHILE add_stack_jump OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    CLOSEPAREN      shift and go to state 222


state 199

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params . CLOSEPAREN OPENCURLY alt2const

    CLOSEPAREN      shift and go to state 223


state 200

    (44) altparams -> COMMA ID TWODOTS . type save_params altparams
    (51) type -> . INT
    (52) type -> . FLOAT
    (53) type -> . STRING
    (54) type -> . ID
    (55) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 224

state 201

    (35) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .

    CLASS           reduce using rule 35 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    VAR             reduce using rule 35 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    FUNC            reduce using rule 35 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    MAIN            reduce using rule 35 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    CONSTRUCTOR     reduce using rule 35 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)


state 202

    (40) alt3func -> var . alt3func
    (40) alt3func -> . var alt3func
    (41) alt3func -> . estatuto alt3func
    (42) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 204
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 202
    alt3func                       shift and go to state 225
    estatuto                       shift and go to state 203
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 203

    (41) alt3func -> estatuto . alt3func
    (40) alt3func -> . var alt3func
    (41) alt3func -> . estatuto alt3func
    (42) alt3func -> . CLOSECURLY remove_function_scope
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 204
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 203
    alt3func                       shift and go to state 226
    var                            shift and go to state 202
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 204

    (42) alt3func -> CLOSECURLY . remove_function_scope
    (125) remove_function_scope -> .

    CLASS           reduce using rule 125 (remove_function_scope -> .)
    VAR             reduce using rule 125 (remove_function_scope -> .)
    FUNC            reduce using rule 125 (remove_function_scope -> .)
    MAIN            reduce using rule 125 (remove_function_scope -> .)
    CONSTRUCTOR     reduce using rule 125 (remove_function_scope -> .)

    remove_function_scope          shift and go to state 227

state 205

    (113) assign -> ID array save_comp EQUALS save_op . expresion SEMICOLON
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 228
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 206

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall . check_params CLOSEPAREN end_false_stack generate_gosub
    (130) check_params -> .

    CLOSEPAREN      reduce using rule 130 (check_params -> .)

    check_params                   shift and go to state 229

state 207

    (47) altcall -> expresion . generate_param_quad alt2call
    (131) generate_param_quad -> .

    COMMA           reduce using rule 131 (generate_param_quad -> .)
    CLOSEPAREN      reduce using rule 131 (generate_param_quad -> .)

    generate_param_quad            shift and go to state 230

state 208

    (48) altcall -> empty .

    CLOSEPAREN      reduce using rule 48 (altcall -> empty .)


state 209

    (31) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv . array2
    (33) array2 -> . OPENBRACKET expresion CLOSEBRACKET empty_pv
    (34) array2 -> . empty
    (115) empty -> .

    OPENBRACKET     shift and go to state 231
    EQUALS          reduce using rule 115 (empty -> .)
    TIMES           reduce using rule 115 (empty -> .)
    DIV             reduce using rule 115 (empty -> .)
    SUM             reduce using rule 115 (empty -> .)
    SUBTRACT        reduce using rule 115 (empty -> .)
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    array2                         shift and go to state 232
    empty                          shift and go to state 233

state 210

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition add_end_if
    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 234


state 211

    (104) write -> OUTPUT save_op OPENPAREN expresion altwrite .

    CLOSECURLY      reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    VAR             reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    ID              reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    IF              reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    OUTPUT          reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    INPUT           reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    RETURN          reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    WHILE           reduce using rule 104 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)


state 212

    (105) altwrite -> COMMA . save_op expresion altwrite
    (138) save_op -> .

    OPENPAREN       reduce using rule 138 (save_op -> .)
    TRUE            reduce using rule 138 (save_op -> .)
    FALSE           reduce using rule 138 (save_op -> .)
    CTEFLOAT        reduce using rule 138 (save_op -> .)
    CTESTRING       reduce using rule 138 (save_op -> .)
    CTEINT          reduce using rule 138 (save_op -> .)
    ID              reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 235

state 213

    (106) altwrite -> CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 236


state 214

    (103) read -> INPUT save_op OPENPAREN ID save_comp . CLOSEPAREN SEMICOLON

    CLOSEPAREN      shift and go to state 237


state 215

    (114) return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .

    CLOSECURLY      reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    VAR             reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    ID              reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    IF              reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    OUTPUT          reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    INPUT           reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    RETURN          reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    WHILE           reduce using rule 114 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)


state 216

    (83) altexpresion -> altexpresion2 save_op exp .

    SEMICOLON       reduce using rule 83 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEBRACKET    reduce using rule 83 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEPAREN      reduce using rule 83 (altexpresion -> altexpresion2 save_op exp .)
    COMMA           reduce using rule 83 (altexpresion -> altexpresion2 save_op exp .)


state 217

    (95) altexp -> SUM save_op termino . altexp
    (95) altexp -> . SUM save_op termino altexp
    (96) altexp -> . SUBTRACT save_op termino altexp
    (97) altexp -> . empty
    (115) empty -> .

    SUM             shift and go to state 160
    SUBTRACT        shift and go to state 161
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    altexp                         shift and go to state 238
    empty                          shift and go to state 162

state 218

    (96) altexp -> SUBTRACT save_op termino . altexp
    (95) altexp -> . SUM save_op termino altexp
    (96) altexp -> . SUBTRACT save_op termino altexp
    (97) altexp -> . empty
    (115) empty -> .

    SUM             shift and go to state 160
    SUBTRACT        shift and go to state 161
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    altexp                         shift and go to state 239
    empty                          shift and go to state 162

state 219

    (100) alttermino -> TIMES save_op factor . alttermino
    (100) alttermino -> . TIMES save_op factor alttermino
    (101) alttermino -> . DIV save_op factor alttermino
    (102) alttermino -> . empty
    (115) empty -> .

    TIMES           shift and go to state 164
    DIV             shift and go to state 165
    SUM             reduce using rule 115 (empty -> .)
    SUBTRACT        reduce using rule 115 (empty -> .)
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    alttermino                     shift and go to state 240
    empty                          shift and go to state 166

state 220

    (101) alttermino -> DIV save_op factor . alttermino
    (100) alttermino -> . TIMES save_op factor alttermino
    (101) alttermino -> . DIV save_op factor alttermino
    (102) alttermino -> . empty
    (115) empty -> .

    TIMES           shift and go to state 164
    DIV             shift and go to state 165
    SUM             reduce using rule 115 (empty -> .)
    SUBTRACT        reduce using rule 115 (empty -> .)
    SAMEAS          reduce using rule 115 (empty -> .)
    BIGGERTHAN      reduce using rule 115 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 115 (empty -> .)
    SMALLTHAN       reduce using rule 115 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 115 (empty -> .)
    DIFFERENTTHAN   reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    CLOSEBRACKET    reduce using rule 115 (empty -> .)
    CLOSEPAREN      reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    alttermino                     shift and go to state 241
    empty                          shift and go to state 166

state 221

    (107) factor -> OPENPAREN save_op expresion CLOSEPAREN . save_op
    (138) save_op -> .

    TIMES           reduce using rule 138 (save_op -> .)
    DIV             reduce using rule 138 (save_op -> .)
    SUM             reduce using rule 138 (save_op -> .)
    SUBTRACT        reduce using rule 138 (save_op -> .)
    SAMEAS          reduce using rule 138 (save_op -> .)
    BIGGERTHAN      reduce using rule 138 (save_op -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (save_op -> .)
    SMALLTHAN       reduce using rule 138 (save_op -> .)
    SMALLEQUALSTHAN reduce using rule 138 (save_op -> .)
    DIFFERENTTHAN   reduce using rule 138 (save_op -> .)
    AND             reduce using rule 138 (save_op -> .)
    OR              reduce using rule 138 (save_op -> .)
    SEMICOLON       reduce using rule 138 (save_op -> .)
    CLOSEBRACKET    reduce using rule 138 (save_op -> .)
    CLOSEPAREN      reduce using rule 138 (save_op -> .)
    COMMA           reduce using rule 138 (save_op -> .)

    save_op                        shift and go to state 242

state 222

    (65) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altwhile end_while
    (139) add_gotof -> .

    OPENCURLY       reduce using rule 139 (add_gotof -> .)

    add_gotof                      shift and go to state 243

state 223

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN . OPENCURLY alt2const

    OPENCURLY       shift and go to state 244


state 224

    (44) altparams -> COMMA ID TWODOTS type . save_params altparams
    (126) save_params -> .

    COMMA           reduce using rule 126 (save_params -> .)
    CLOSEPAREN      reduce using rule 126 (save_params -> .)

    save_params                    shift and go to state 245

state 225

    (40) alt3func -> var alt3func .

    CLASS           reduce using rule 40 (alt3func -> var alt3func .)
    VAR             reduce using rule 40 (alt3func -> var alt3func .)
    FUNC            reduce using rule 40 (alt3func -> var alt3func .)
    MAIN            reduce using rule 40 (alt3func -> var alt3func .)
    CONSTRUCTOR     reduce using rule 40 (alt3func -> var alt3func .)


state 226

    (41) alt3func -> estatuto alt3func .

    CLASS           reduce using rule 41 (alt3func -> estatuto alt3func .)
    VAR             reduce using rule 41 (alt3func -> estatuto alt3func .)
    FUNC            reduce using rule 41 (alt3func -> estatuto alt3func .)
    MAIN            reduce using rule 41 (alt3func -> estatuto alt3func .)
    CONSTRUCTOR     reduce using rule 41 (alt3func -> estatuto alt3func .)


state 227

    (42) alt3func -> CLOSECURLY remove_function_scope .

    CLASS           reduce using rule 42 (alt3func -> CLOSECURLY remove_function_scope .)
    VAR             reduce using rule 42 (alt3func -> CLOSECURLY remove_function_scope .)
    FUNC            reduce using rule 42 (alt3func -> CLOSECURLY remove_function_scope .)
    MAIN            reduce using rule 42 (alt3func -> CLOSECURLY remove_function_scope .)
    CONSTRUCTOR     reduce using rule 42 (alt3func -> CLOSECURLY remove_function_scope .)


state 228

    (113) assign -> ID array save_comp EQUALS save_op expresion . SEMICOLON

    SEMICOLON       shift and go to state 246


state 229

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params . CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      shift and go to state 247


state 230

    (47) altcall -> expresion generate_param_quad . alt2call
    (49) alt2call -> . COMMA altcall
    (50) alt2call -> . empty
    (115) empty -> .

    COMMA           shift and go to state 249
    CLOSEPAREN      reduce using rule 115 (empty -> .)

    alt2call                       shift and go to state 248
    empty                          shift and go to state 250

state 231

    (33) array2 -> OPENBRACKET . expresion CLOSEBRACKET empty_pv
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 251
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 232

    (31) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .

    EQUALS          reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    TIMES           reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    DIV             reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SUM             reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SUBTRACT        reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SAMEAS          reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    BIGGERTHAN      reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    BIGGEREQUALSTHAN reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SMALLTHAN       reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SMALLEQUALSTHAN reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    DIFFERENTTHAN   reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    AND             reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    OR              reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    SEMICOLON       reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    CLOSEBRACKET    reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    CLOSEPAREN      reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    COMMA           reduce using rule 31 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)


state 233

    (34) array2 -> empty .

    EQUALS          reduce using rule 34 (array2 -> empty .)
    TIMES           reduce using rule 34 (array2 -> empty .)
    DIV             reduce using rule 34 (array2 -> empty .)
    SUM             reduce using rule 34 (array2 -> empty .)
    SUBTRACT        reduce using rule 34 (array2 -> empty .)
    SAMEAS          reduce using rule 34 (array2 -> empty .)
    BIGGERTHAN      reduce using rule 34 (array2 -> empty .)
    BIGGEREQUALSTHAN reduce using rule 34 (array2 -> empty .)
    SMALLTHAN       reduce using rule 34 (array2 -> empty .)
    SMALLEQUALSTHAN reduce using rule 34 (array2 -> empty .)
    DIFFERENTTHAN   reduce using rule 34 (array2 -> empty .)
    AND             reduce using rule 34 (array2 -> empty .)
    OR              reduce using rule 34 (array2 -> empty .)
    SEMICOLON       reduce using rule 34 (array2 -> empty .)
    CLOSEBRACKET    reduce using rule 34 (array2 -> empty .)
    CLOSEPAREN      reduce using rule 34 (array2 -> empty .)
    COMMA           reduce using rule 34 (array2 -> empty .)


state 234

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition add_end_if
    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (111) altcondition -> . estatuto altcondition
    (112) altcondition -> . CLOSECURLY
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 254
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 252
    estatuto                       shift and go to state 253
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 235

    (105) altwrite -> COMMA save_op . expresion altwrite
    (82) expresion -> . exp altexpresion
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    expresion                      shift and go to state 255
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 236

    (106) altwrite -> CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 106 (altwrite -> CLOSEPAREN SEMICOLON .)


state 237

    (103) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 256


state 238

    (95) altexp -> SUM save_op termino altexp .

    SAMEAS          reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    BIGGERTHAN      reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    SMALLTHAN       reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    AND             reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    OR              reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    SEMICOLON       reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    CLOSEPAREN      reduce using rule 95 (altexp -> SUM save_op termino altexp .)
    COMMA           reduce using rule 95 (altexp -> SUM save_op termino altexp .)


state 239

    (96) altexp -> SUBTRACT save_op termino altexp .

    SAMEAS          reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGERTHAN      reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLTHAN       reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    AND             reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    OR              reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    SEMICOLON       reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEPAREN      reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)
    COMMA           reduce using rule 96 (altexp -> SUBTRACT save_op termino altexp .)


state 240

    (100) alttermino -> TIMES save_op factor alttermino .

    SUM             reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    SUBTRACT        reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    SAMEAS          reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    SMALLTHAN       reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    AND             reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    OR              reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    SEMICOLON       reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)
    COMMA           reduce using rule 100 (alttermino -> TIMES save_op factor alttermino .)


state 241

    (101) alttermino -> DIV save_op factor alttermino .

    SUM             reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    SUBTRACT        reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    SAMEAS          reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    SMALLTHAN       reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    AND             reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    OR              reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    SEMICOLON       reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)
    COMMA           reduce using rule 101 (alttermino -> DIV save_op factor alttermino .)


state 242

    (107) factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .

    TIMES           reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIV             reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUM             reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUBTRACT        reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SAMEAS          reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGERTHAN      reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGEREQUALSTHAN reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLTHAN       reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLEQUALSTHAN reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIFFERENTTHAN   reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    AND             reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    OR              reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SEMICOLON       reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEBRACKET    reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEPAREN      reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    COMMA           reduce using rule 107 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)


state 243

    (65) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altwhile end_while

    OPENCURLY       shift and go to state 257


state 244

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 261
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    alt2const                      shift and go to state 258
    var                            shift and go to state 259
    estatuto                       shift and go to state 260
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 245

    (44) altparams -> COMMA ID TWODOTS type save_params . altparams
    (44) altparams -> . COMMA ID TWODOTS type save_params altparams
    (45) altparams -> . empty
    (115) empty -> .

    COMMA           shift and go to state 136
    CLOSEPAREN      reduce using rule 115 (empty -> .)

    altparams                      shift and go to state 262
    empty                          shift and go to state 137

state 246

    (113) assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .

    CLOSECURLY      reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    VAR             reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    ID              reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    IF              reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    OUTPUT          reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    INPUT           reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    RETURN          reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)
    WHILE           reduce using rule 113 (assign -> ID array save_comp EQUALS save_op expresion SEMICOLON .)


state 247

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN . end_false_stack generate_gosub
    (128) end_false_stack -> .

    SEMICOLON       reduce using rule 128 (end_false_stack -> .)
    TIMES           reduce using rule 128 (end_false_stack -> .)
    DIV             reduce using rule 128 (end_false_stack -> .)
    SUM             reduce using rule 128 (end_false_stack -> .)
    SUBTRACT        reduce using rule 128 (end_false_stack -> .)
    SAMEAS          reduce using rule 128 (end_false_stack -> .)
    BIGGERTHAN      reduce using rule 128 (end_false_stack -> .)
    BIGGEREQUALSTHAN reduce using rule 128 (end_false_stack -> .)
    SMALLTHAN       reduce using rule 128 (end_false_stack -> .)
    SMALLEQUALSTHAN reduce using rule 128 (end_false_stack -> .)
    DIFFERENTTHAN   reduce using rule 128 (end_false_stack -> .)
    AND             reduce using rule 128 (end_false_stack -> .)
    OR              reduce using rule 128 (end_false_stack -> .)
    CLOSEBRACKET    reduce using rule 128 (end_false_stack -> .)
    CLOSEPAREN      reduce using rule 128 (end_false_stack -> .)
    COMMA           reduce using rule 128 (end_false_stack -> .)

    end_false_stack                shift and go to state 263

state 248

    (47) altcall -> expresion generate_param_quad alt2call .

    CLOSEPAREN      reduce using rule 47 (altcall -> expresion generate_param_quad alt2call .)


state 249

    (49) alt2call -> COMMA . altcall
    (47) altcall -> . expresion generate_param_quad alt2call
    (48) altcall -> . empty
    (82) expresion -> . exp altexpresion
    (115) empty -> .
    (93) exp -> . termino
    (94) exp -> . termino altexp
    (98) termino -> . factor
    (99) termino -> . factor alttermino
    (107) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (108) factor -> . varcall
    (68) varcall -> . varcte save_const
    (69) varcall -> . varcomplicated save_comp
    (70) varcte -> . TRUE
    (71) varcte -> . FALSE
    (72) varcte -> . CTEFLOAT
    (73) varcte -> . CTESTRING
    (74) varcte -> . CTEINT
    (75) varcomplicated -> . varcomp1
    (76) varcomplicated -> . callfunc
    (77) varcomp1 -> . ID varcomp2
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 115 (empty -> .)
    OPENPAREN       shift and go to state 118
    TRUE            shift and go to state 122
    FALSE           shift and go to state 123
    CTEFLOAT        shift and go to state 124
    CTESTRING       shift and go to state 125
    CTEINT          shift and go to state 126
    ID              shift and go to state 129

    altcall                        shift and go to state 264
    expresion                      shift and go to state 207
    empty                          shift and go to state 208
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    varcall                        shift and go to state 119
    varcte                         shift and go to state 120
    varcomplicated                 shift and go to state 121
    varcomp1                       shift and go to state 127
    callfunc                       shift and go to state 128

state 250

    (50) alt2call -> empty .

    CLOSEPAREN      reduce using rule 50 (alt2call -> empty .)


state 251

    (33) array2 -> OPENBRACKET expresion . CLOSEBRACKET empty_pv

    CLOSEBRACKET    shift and go to state 265


state 252

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . add_end_if
    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . ELSE generate_goto OPENCURLY altcondition add_end_if
    (140) add_end_if -> .

    ELSE            shift and go to state 267
    CLOSECURLY      reduce using rule 140 (add_end_if -> .)
    VAR             reduce using rule 140 (add_end_if -> .)
    ID              reduce using rule 140 (add_end_if -> .)
    IF              reduce using rule 140 (add_end_if -> .)
    OUTPUT          reduce using rule 140 (add_end_if -> .)
    INPUT           reduce using rule 140 (add_end_if -> .)
    RETURN          reduce using rule 140 (add_end_if -> .)
    WHILE           reduce using rule 140 (add_end_if -> .)

    add_end_if                     shift and go to state 266

state 253

    (111) altcondition -> estatuto . altcondition
    (111) altcondition -> . estatuto altcondition
    (112) altcondition -> . CLOSECURLY
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 254
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 253
    altcondition                   shift and go to state 268
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 254

    (112) altcondition -> CLOSECURLY .

    ELSE            reduce using rule 112 (altcondition -> CLOSECURLY .)
    CLOSECURLY      reduce using rule 112 (altcondition -> CLOSECURLY .)
    VAR             reduce using rule 112 (altcondition -> CLOSECURLY .)
    ID              reduce using rule 112 (altcondition -> CLOSECURLY .)
    IF              reduce using rule 112 (altcondition -> CLOSECURLY .)
    OUTPUT          reduce using rule 112 (altcondition -> CLOSECURLY .)
    INPUT           reduce using rule 112 (altcondition -> CLOSECURLY .)
    RETURN          reduce using rule 112 (altcondition -> CLOSECURLY .)
    WHILE           reduce using rule 112 (altcondition -> CLOSECURLY .)


state 255

    (105) altwrite -> COMMA save_op expresion . altwrite
    (105) altwrite -> . COMMA save_op expresion altwrite
    (106) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 212
    CLOSEPAREN      shift and go to state 213

    altwrite                       shift and go to state 269

state 256

    (103) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 103 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)


state 257

    (65) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altwhile end_while
    (66) altwhile -> . estatuto altwhile
    (67) altwhile -> . CLOSECURLY
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 272
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altwhile                       shift and go to state 270
    estatuto                       shift and go to state 271
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 258

    (16) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .

    CLOSECURLY      reduce using rule 16 (constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .)


state 259

    (19) alt2const -> var . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 261
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    var                            shift and go to state 259
    alt2const                      shift and go to state 273
    estatuto                       shift and go to state 260
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 260

    (20) alt2const -> estatuto . alt2const
    (19) alt2const -> . var alt2const
    (20) alt2const -> . estatuto alt2const
    (21) alt2const -> . CLOSECURLY
    (22) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 261
    VAR             shift and go to state 12
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 260
    alt2const                      shift and go to state 274
    var                            shift and go to state 259
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 261

    (21) alt2const -> CLOSECURLY .

    CLOSECURLY      reduce using rule 21 (alt2const -> CLOSECURLY .)


state 262

    (44) altparams -> COMMA ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 44 (altparams -> COMMA ID TWODOTS type save_params altparams .)


state 263

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack . generate_gosub
    (129) generate_gosub -> .

    SEMICOLON       reduce using rule 129 (generate_gosub -> .)
    TIMES           reduce using rule 129 (generate_gosub -> .)
    DIV             reduce using rule 129 (generate_gosub -> .)
    SUM             reduce using rule 129 (generate_gosub -> .)
    SUBTRACT        reduce using rule 129 (generate_gosub -> .)
    SAMEAS          reduce using rule 129 (generate_gosub -> .)
    BIGGERTHAN      reduce using rule 129 (generate_gosub -> .)
    BIGGEREQUALSTHAN reduce using rule 129 (generate_gosub -> .)
    SMALLTHAN       reduce using rule 129 (generate_gosub -> .)
    SMALLEQUALSTHAN reduce using rule 129 (generate_gosub -> .)
    DIFFERENTTHAN   reduce using rule 129 (generate_gosub -> .)
    AND             reduce using rule 129 (generate_gosub -> .)
    OR              reduce using rule 129 (generate_gosub -> .)
    CLOSEBRACKET    reduce using rule 129 (generate_gosub -> .)
    CLOSEPAREN      reduce using rule 129 (generate_gosub -> .)
    COMMA           reduce using rule 129 (generate_gosub -> .)

    generate_gosub                 shift and go to state 275

state 264

    (49) alt2call -> COMMA altcall .

    CLOSEPAREN      reduce using rule 49 (alt2call -> COMMA altcall .)


state 265

    (33) array2 -> OPENBRACKET expresion CLOSEBRACKET . empty_pv
    (133) empty_pv -> .

    EQUALS          reduce using rule 133 (empty_pv -> .)
    TIMES           reduce using rule 133 (empty_pv -> .)
    DIV             reduce using rule 133 (empty_pv -> .)
    SUM             reduce using rule 133 (empty_pv -> .)
    SUBTRACT        reduce using rule 133 (empty_pv -> .)
    SAMEAS          reduce using rule 133 (empty_pv -> .)
    BIGGERTHAN      reduce using rule 133 (empty_pv -> .)
    BIGGEREQUALSTHAN reduce using rule 133 (empty_pv -> .)
    SMALLTHAN       reduce using rule 133 (empty_pv -> .)
    SMALLEQUALSTHAN reduce using rule 133 (empty_pv -> .)
    DIFFERENTTHAN   reduce using rule 133 (empty_pv -> .)
    AND             reduce using rule 133 (empty_pv -> .)
    OR              reduce using rule 133 (empty_pv -> .)
    SEMICOLON       reduce using rule 133 (empty_pv -> .)
    CLOSEBRACKET    reduce using rule 133 (empty_pv -> .)
    CLOSEPAREN      reduce using rule 133 (empty_pv -> .)
    COMMA           reduce using rule 133 (empty_pv -> .)

    empty_pv                       shift and go to state 276

state 266

    (109) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 109 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)


state 267

    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE . generate_goto OPENCURLY altcondition add_end_if
    (141) generate_goto -> .

    OPENCURLY       reduce using rule 141 (generate_goto -> .)

    generate_goto                  shift and go to state 277

state 268

    (111) altcondition -> estatuto altcondition .

    ELSE            reduce using rule 111 (altcondition -> estatuto altcondition .)
    CLOSECURLY      reduce using rule 111 (altcondition -> estatuto altcondition .)
    VAR             reduce using rule 111 (altcondition -> estatuto altcondition .)
    ID              reduce using rule 111 (altcondition -> estatuto altcondition .)
    IF              reduce using rule 111 (altcondition -> estatuto altcondition .)
    OUTPUT          reduce using rule 111 (altcondition -> estatuto altcondition .)
    INPUT           reduce using rule 111 (altcondition -> estatuto altcondition .)
    RETURN          reduce using rule 111 (altcondition -> estatuto altcondition .)
    WHILE           reduce using rule 111 (altcondition -> estatuto altcondition .)


state 269

    (105) altwrite -> COMMA save_op expresion altwrite .

    CLOSECURLY      reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    VAR             reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    ID              reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    IF              reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    OUTPUT          reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    INPUT           reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    RETURN          reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)
    WHILE           reduce using rule 105 (altwrite -> COMMA save_op expresion altwrite .)


state 270

    (65) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile . end_while
    (135) end_while -> .

    CLOSECURLY      reduce using rule 135 (end_while -> .)
    VAR             reduce using rule 135 (end_while -> .)
    ID              reduce using rule 135 (end_while -> .)
    IF              reduce using rule 135 (end_while -> .)
    OUTPUT          reduce using rule 135 (end_while -> .)
    INPUT           reduce using rule 135 (end_while -> .)
    RETURN          reduce using rule 135 (end_while -> .)
    WHILE           reduce using rule 135 (end_while -> .)

    end_while                      shift and go to state 278

state 271

    (66) altwhile -> estatuto . altwhile
    (66) altwhile -> . estatuto altwhile
    (67) altwhile -> . CLOSECURLY
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 272
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    estatuto                       shift and go to state 271
    altwhile                       shift and go to state 279
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 272

    (67) altwhile -> CLOSECURLY .

    CLOSECURLY      reduce using rule 67 (altwhile -> CLOSECURLY .)
    VAR             reduce using rule 67 (altwhile -> CLOSECURLY .)
    ID              reduce using rule 67 (altwhile -> CLOSECURLY .)
    IF              reduce using rule 67 (altwhile -> CLOSECURLY .)
    OUTPUT          reduce using rule 67 (altwhile -> CLOSECURLY .)
    INPUT           reduce using rule 67 (altwhile -> CLOSECURLY .)
    RETURN          reduce using rule 67 (altwhile -> CLOSECURLY .)
    WHILE           reduce using rule 67 (altwhile -> CLOSECURLY .)


state 273

    (19) alt2const -> var alt2const .

    CLOSECURLY      reduce using rule 19 (alt2const -> var alt2const .)


state 274

    (20) alt2const -> estatuto alt2const .

    CLOSECURLY      reduce using rule 20 (alt2const -> estatuto alt2const .)


state 275

    (46) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .

    SEMICOLON       reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    TIMES           reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIV             reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUM             reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUBTRACT        reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SAMEAS          reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGERTHAN      reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGEREQUALSTHAN reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLTHAN       reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLEQUALSTHAN reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIFFERENTTHAN   reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    AND             reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    OR              reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEBRACKET    reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEPAREN      reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    COMMA           reduce using rule 46 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)


state 276

    (33) array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .

    EQUALS          reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    TIMES           reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    DIV             reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SUM             reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SUBTRACT        reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SAMEAS          reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    BIGGERTHAN      reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    BIGGEREQUALSTHAN reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SMALLTHAN       reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SMALLEQUALSTHAN reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    DIFFERENTTHAN   reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    AND             reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    OR              reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    SEMICOLON       reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    CLOSEBRACKET    reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    CLOSEPAREN      reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    COMMA           reduce using rule 33 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)


state 277

    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto . OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 280


state 278

    (65) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .

    CLOSECURLY      reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    VAR             reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    ID              reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    IF              reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    OUTPUT          reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    INPUT           reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    RETURN          reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    WHILE           reduce using rule 65 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)


state 279

    (66) altwhile -> estatuto altwhile .

    CLOSECURLY      reduce using rule 66 (altwhile -> estatuto altwhile .)
    VAR             reduce using rule 66 (altwhile -> estatuto altwhile .)
    ID              reduce using rule 66 (altwhile -> estatuto altwhile .)
    IF              reduce using rule 66 (altwhile -> estatuto altwhile .)
    OUTPUT          reduce using rule 66 (altwhile -> estatuto altwhile .)
    INPUT           reduce using rule 66 (altwhile -> estatuto altwhile .)
    RETURN          reduce using rule 66 (altwhile -> estatuto altwhile .)
    WHILE           reduce using rule 66 (altwhile -> estatuto altwhile .)


state 280

    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY . altcondition add_end_if
    (111) altcondition -> . estatuto altcondition
    (112) altcondition -> . CLOSECURLY
    (56) estatuto -> . assign empty_pv
    (57) estatuto -> . condition empty_pv
    (58) estatuto -> . write empty_pv
    (59) estatuto -> . read empty_pv
    (60) estatuto -> . return empty_pv
    (61) estatuto -> . voidcall empty_pv
    (62) estatuto -> . while empty_pv
    (113) assign -> . ID array save_comp EQUALS save_op expresion SEMICOLON
    (109) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (110) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (104) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (103) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (114) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (63) voidcall -> . callfunc SEMICOLON
    (64) voidcall -> . ID DOT voidcall
    (65) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (46) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 254
    ID              shift and go to state 79
    IF              shift and go to state 80
    OUTPUT          shift and go to state 81
    INPUT           shift and go to state 82
    RETURN          shift and go to state 83
    WHILE           shift and go to state 85

    altcondition                   shift and go to state 281
    estatuto                       shift and go to state 253
    assign                         shift and go to state 72
    condition                      shift and go to state 73
    write                          shift and go to state 74
    read                           shift and go to state 75
    return                         shift and go to state 76
    voidcall                       shift and go to state 77
    while                          shift and go to state 78
    callfunc                       shift and go to state 84

state 281

    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition . add_end_if
    (140) add_end_if -> .

    CLOSECURLY      reduce using rule 140 (add_end_if -> .)
    VAR             reduce using rule 140 (add_end_if -> .)
    ID              reduce using rule 140 (add_end_if -> .)
    IF              reduce using rule 140 (add_end_if -> .)
    OUTPUT          reduce using rule 140 (add_end_if -> .)
    INPUT           reduce using rule 140 (add_end_if -> .)
    RETURN          reduce using rule 140 (add_end_if -> .)
    WHILE           reduce using rule 140 (add_end_if -> .)

    add_end_if                     shift and go to state 282

state 282

    (110) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 110 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 116 resolved using rule (exp -> termino)
WARNING: rejected rule (empty -> <empty>) in state 116
WARNING: reduce/reduce conflict in state 117 resolved using rule (termino -> factor)
WARNING: rejected rule (empty -> <empty>) in state 117
