Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID save_program SEMICOLON altprogram
Rule 2     altprogram -> class altprogram
Rule 3     altprogram -> var altprogram
Rule 4     altprogram -> function altprogram
Rule 5     altprogram -> main remove_class_scope
Rule 6     save_program -> <empty>
Rule 7     main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
Rule 8     altmain -> var altmain
Rule 9     altmain -> estatuto altmain
Rule 10    altmain -> CLOSECURLY
Rule 11    save_main -> <empty>
Rule 12    class -> CLASS ID altclass save_class OPENCURLY alt2class
Rule 13    altclass -> TWODOTS ID
Rule 14    altclass -> empty
Rule 15    alt2class -> var alt2class
Rule 16    alt2class -> function alt2class
Rule 17    alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope
Rule 18    save_class -> <empty>
Rule 19    remove_class_scope -> <empty>
Rule 20    constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
Rule 21    altconst -> params
Rule 22    altconst -> empty
Rule 23    alt2const -> var alt2const
Rule 24    alt2const -> estatuto alt2const
Rule 25    alt2const -> CLOSECURLY
Rule 26    save_constructor -> <empty>
Rule 27    var -> VAR listids TWODOTS type save_vars SEMICOLON
Rule 28    save_vars -> <empty>
Rule 29    listids -> ID save_var_name array listidsalty
Rule 30    listidsalty -> COMMA listids
Rule 31    listidsalty -> empty
Rule 32    array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2
Rule 33    array -> empty
Rule 34    array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv
Rule 35    array2 -> empty
Rule 36    save_var_name -> <empty>
Rule 37    function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
Rule 38    altfunc -> params
Rule 39    altfunc -> empty
Rule 40    alt2func -> TWODOTS type
Rule 41    alt2func -> empty
Rule 42    alt3func -> var alt3func
Rule 43    alt3func -> estatuto alt3func
Rule 44    alt3func -> CLOSECURLY remove_function_scope
Rule 45    save_function -> <empty>
Rule 46    store_params -> <empty>
Rule 47    remove_function_scope -> <empty>
Rule 48    params -> ID TWODOTS type save_params altparams
Rule 49    altparams -> COMMA ID TWODOTS type save_params altparams
Rule 50    altparams -> empty
Rule 51    save_params -> <empty>
Rule 52    callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
Rule 53    altcall -> expresion generate_param_quad alt2call
Rule 54    altcall -> empty
Rule 55    alt2call -> COMMA altcall
Rule 56    alt2call -> empty
Rule 57    add_false_stack -> <empty>
Rule 58    end_false_stack -> <empty>
Rule 59    generate_gosub -> <empty>
Rule 60    check_params -> <empty>
Rule 61    generate_param_quad -> <empty>
Rule 62    check_exists_func -> <empty>
Rule 63    type -> INT
Rule 64    type -> FLOAT
Rule 65    type -> STRING
Rule 66    type -> ID
Rule 67    type -> BOOL
Rule 68    estatuto -> assign empty_pv
Rule 69    estatuto -> condition empty_pv
Rule 70    estatuto -> write empty_pv
Rule 71    estatuto -> read empty_pv
Rule 72    estatuto -> return empty_pv
Rule 73    estatuto -> voidcall empty_pv
Rule 74    estatuto -> while empty_pv
Rule 75    voidcall -> callfunc SEMICOLON
Rule 76    voidcall -> ID DOT voidcall
Rule 77    empty_pv -> <empty>
Rule 78    while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
Rule 79    altwhile -> estatuto altwhile
Rule 80    altwhile -> CLOSECURLY
Rule 81    add_stack_jump -> <empty>
Rule 82    end_while -> <empty>
Rule 83    varcall -> varcte save_const
Rule 84    varcall -> varcomplicated save_comp
Rule 85    varcte -> TRUE
Rule 86    varcte -> FALSE
Rule 87    varcte -> CTEFLOAT
Rule 88    varcte -> CTESTRING
Rule 89    varcte -> CTEINT
Rule 90    varcomplicated -> varcomp1
Rule 91    varcomplicated -> callfunc
Rule 92    varcomp1 -> ID varcomp2
Rule 93    varcomp2 -> DOT varcomp3
Rule 94    varcomp2 -> empty
Rule 95    varcomp3 -> varcomp1
Rule 96    varcomp3 -> callfunc
Rule 97    save_const -> <empty>
Rule 98    save_comp -> <empty>
Rule 99    expresion -> exp altexpresion
Rule 100   altexpresion -> altexpresion2 save_op exp
Rule 101   altexpresion -> empty
Rule 102   altexpresion2 -> SAMEAS
Rule 103   altexpresion2 -> BIGGERTHAN
Rule 104   altexpresion2 -> BIGGEREQUALSTHAN
Rule 105   altexpresion2 -> SMALLTHAN
Rule 106   altexpresion2 -> SMALLEQUALSTHAN
Rule 107   altexpresion2 -> DIFFERENTTHAN
Rule 108   altexpresion2 -> AND
Rule 109   altexpresion2 -> OR
Rule 110   exp -> termino
Rule 111   exp -> termino altexp
Rule 112   altexp -> SUM save_op termino altexp
Rule 113   altexp -> SUBTRACT save_op termino altexp
Rule 114   altexp -> empty
Rule 115   termino -> factor
Rule 116   termino -> factor alttermino
Rule 117   alttermino -> TIMES save_op factor alttermino
Rule 118   alttermino -> DIV save_op factor alttermino
Rule 119   alttermino -> empty
Rule 120   save_op -> <empty>
Rule 121   read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
Rule 122   write -> OUTPUT save_op OPENPAREN expresion altwrite
Rule 123   altwrite -> COMMA save_op expresion altwrite
Rule 124   altwrite -> CLOSEPAREN SEMICOLON
Rule 125   factor -> OPENPAREN save_op expresion CLOSEPAREN save_op
Rule 126   factor -> varcall
Rule 127   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
Rule 128   condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
Rule 129   altcondition -> estatuto altcondition
Rule 130   altcondition -> CLOSECURLY
Rule 131   add_gotof -> <empty>
Rule 132   add_end_if -> <empty>
Rule 133   generate_goto -> <empty>
Rule 134   assign -> ID save_comp EQUALS save_op expresion SEMICOLON
Rule 135   return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists
Rule 136   generate_quad_ret -> <empty>
Rule 137   add_return_exists -> <empty>
Rule 138   empty -> <empty>

Terminals, with rules where they appear

AND                  : 108
BIGGEREQUALSTHAN     : 104
BIGGERTHAN           : 103
BOOL                 : 67
CLASS                : 12
CLOSEBRACKET         : 32 34
CLOSECURLY           : 10 17 25 44 80 130
CLOSEPAREN           : 7 20 37 52 78 121 124 125 127 128
COMMA                : 30 49 55 123
CONSTRUCTOR          : 20
CTEFLOAT             : 87
CTEINT               : 89
CTESTRING            : 88
DIFFERENTTHAN        : 107
DIV                  : 118
DOT                  : 76 93
ELSE                 : 128
EQUALS               : 134
FALSE                : 86
FLOAT                : 64
FUNC                 : 37
ID                   : 1 12 13 29 37 48 49 52 66 76 92 121 134
IF                   : 127 128
INPUT                : 121
INT                  : 63
MAIN                 : 7
OPENBRACKET          : 32 34
OPENCURLY            : 7 12 20 37 78 127 128 128
OPENPAREN            : 7 20 37 52 78 121 122 125 127 128
OR                   : 109
OUTPUT               : 122
PROGRAM              : 1
RETURN               : 135
SAMEAS               : 102
SEMICOLON            : 1 17 27 75 121 124 134 135
SMALLEQUALSTHAN      : 106
SMALLTHAN            : 105
STRING               : 65
SUBTRACT             : 113
SUM                  : 112
TIMES                : 117
TRUE                 : 85
TWODOTS              : 13 27 40 48 49
VAR                  : 27
WHILE                : 78
error                : 

Nonterminals, with rules where they appear

add_end_if           : 127 128
add_false_stack      : 52
add_gotof            : 78 127 128
add_return_exists    : 135
add_stack_jump       : 78
alt2call             : 53
alt2class            : 12 15 16
alt2const            : 20 23 24
alt2func             : 37
alt3func             : 37 42 43
altcall              : 52 55
altclass             : 12
altcondition         : 127 128 128 129
altconst             : 20
altexp               : 111 112 113
altexpresion         : 99
altexpresion2        : 100
altfunc              : 37
altmain              : 7 8 9
altparams            : 48 49
altprogram           : 1 2 3 4
alttermino           : 116 117 118
altwhile             : 78 79
altwrite             : 122 123
array                : 29
array2               : 32
assign               : 68
callfunc             : 75 91 96
check_exists_func    : 52
check_params         : 52
class                : 2
condition            : 69
constructor          : 17
empty                : 14 22 31 33 35 39 41 50 54 56 94 101 114 119
empty_pv             : 32 34 68 69 70 71 72 73 74
end_false_stack      : 52
end_while            : 78
estatuto             : 9 24 43 79 129
exp                  : 99 100
expresion            : 32 34 53 78 122 123 125 127 128 134 135
factor               : 115 116 117 118
function             : 4 16
generate_gosub       : 52
generate_goto        : 128
generate_param_quad  : 53
generate_quad_ret    : 135
listids              : 27 30
listidsalty          : 29
main                 : 5
params               : 21 38
program              : 0
read                 : 71
remove_class_scope   : 5 17
remove_function_scope : 44
return               : 72
save_class           : 12
save_comp            : 84 121 134
save_const           : 83
save_constructor     : 20
save_function        : 37
save_main            : 7
save_op              : 100 112 113 117 118 121 122 123 125 125 134
save_params          : 48 49
save_program         : 1
save_var_name        : 29
save_vars            : 27
store_params         : 20 37
termino              : 110 111 112 113
type                 : 27 40 48 49
var                  : 3 8 15 23 42
varcall              : 126
varcomp1             : 90 95
varcomp2             : 92
varcomp3             : 93
varcomplicated       : 84
varcte               : 83
voidcall             : 73 76
while                : 74
write                : 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID save_program SEMICOLON altprogram

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID save_program SEMICOLON altprogram

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . save_program SEMICOLON altprogram
    (6) save_program -> .

    SEMICOLON       reduce using rule 6 (save_program -> .)

    save_program                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID save_program . SEMICOLON altprogram

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID save_program SEMICOLON . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    altprogram                     shift and go to state 6
    class                          shift and go to state 7
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 6

    (1) program -> PROGRAM ID save_program SEMICOLON altprogram .

    $end            reduce using rule 1 (program -> PROGRAM ID save_program SEMICOLON altprogram .)


state 7

    (2) altprogram -> class . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    class                          shift and go to state 7
    altprogram                     shift and go to state 15
    var                            shift and go to state 8
    function                       shift and go to state 9
    main                           shift and go to state 10

state 8

    (3) altprogram -> var . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    var                            shift and go to state 8
    altprogram                     shift and go to state 16
    class                          shift and go to state 7
    function                       shift and go to state 9
    main                           shift and go to state 10

state 9

    (4) altprogram -> function . altprogram
    (2) altprogram -> . class altprogram
    (3) altprogram -> . var altprogram
    (4) altprogram -> . function altprogram
    (5) altprogram -> . main remove_class_scope
    (12) class -> . CLASS ID altclass save_class OPENCURLY alt2class
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (7) main -> . MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain

    CLASS           shift and go to state 11
    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    MAIN            shift and go to state 14

    function                       shift and go to state 9
    altprogram                     shift and go to state 17
    class                          shift and go to state 7
    var                            shift and go to state 8
    main                           shift and go to state 10

state 10

    (5) altprogram -> main . remove_class_scope
    (19) remove_class_scope -> .

    $end            reduce using rule 19 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 18

state 11

    (12) class -> CLASS . ID altclass save_class OPENCURLY alt2class

    ID              shift and go to state 19


state 12

    (27) var -> VAR . listids TWODOTS type save_vars SEMICOLON
    (29) listids -> . ID save_var_name array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 20

state 13

    (37) function -> FUNC . ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    ID              shift and go to state 22


state 14

    (7) main -> MAIN . save_main OPENPAREN CLOSEPAREN OPENCURLY altmain
    (11) save_main -> .

    OPENPAREN       reduce using rule 11 (save_main -> .)

    save_main                      shift and go to state 23

state 15

    (2) altprogram -> class altprogram .

    $end            reduce using rule 2 (altprogram -> class altprogram .)


state 16

    (3) altprogram -> var altprogram .

    $end            reduce using rule 3 (altprogram -> var altprogram .)


state 17

    (4) altprogram -> function altprogram .

    $end            reduce using rule 4 (altprogram -> function altprogram .)


state 18

    (5) altprogram -> main remove_class_scope .

    $end            reduce using rule 5 (altprogram -> main remove_class_scope .)


state 19

    (12) class -> CLASS ID . altclass save_class OPENCURLY alt2class
    (13) altclass -> . TWODOTS ID
    (14) altclass -> . empty
    (138) empty -> .

    TWODOTS         shift and go to state 25
    OPENCURLY       reduce using rule 138 (empty -> .)

    altclass                       shift and go to state 24
    empty                          shift and go to state 26

state 20

    (27) var -> VAR listids . TWODOTS type save_vars SEMICOLON

    TWODOTS         shift and go to state 27


state 21

    (29) listids -> ID . save_var_name array listidsalty
    (36) save_var_name -> .

    OPENBRACKET     reduce using rule 36 (save_var_name -> .)
    COMMA           reduce using rule 36 (save_var_name -> .)
    TWODOTS         reduce using rule 36 (save_var_name -> .)

    save_var_name                  shift and go to state 28

state 22

    (37) function -> FUNC ID . OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    OPENPAREN       shift and go to state 29


state 23

    (7) main -> MAIN save_main . OPENPAREN CLOSEPAREN OPENCURLY altmain

    OPENPAREN       shift and go to state 30


state 24

    (12) class -> CLASS ID altclass . save_class OPENCURLY alt2class
    (18) save_class -> .

    OPENCURLY       reduce using rule 18 (save_class -> .)

    save_class                     shift and go to state 31

state 25

    (13) altclass -> TWODOTS . ID

    ID              shift and go to state 32


state 26

    (14) altclass -> empty .

    OPENCURLY       reduce using rule 14 (altclass -> empty .)


state 27

    (27) var -> VAR listids TWODOTS . type save_vars SEMICOLON
    (63) type -> . INT
    (64) type -> . FLOAT
    (65) type -> . STRING
    (66) type -> . ID
    (67) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 33

state 28

    (29) listids -> ID save_var_name . array listidsalty
    (32) array -> . OPENBRACKET expresion CLOSEBRACKET empty_pv array2
    (33) array -> . empty
    (138) empty -> .

    OPENBRACKET     shift and go to state 40
    COMMA           reduce using rule 138 (empty -> .)
    TWODOTS         reduce using rule 138 (empty -> .)

    array                          shift and go to state 39
    empty                          shift and go to state 41

state 29

    (37) function -> FUNC ID OPENPAREN . altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (38) altfunc -> . params
    (39) altfunc -> . empty
    (48) params -> . ID TWODOTS type save_params altparams
    (138) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 138 (empty -> .)

    altfunc                        shift and go to state 43
    params                         shift and go to state 44
    empty                          shift and go to state 45

state 30

    (7) main -> MAIN save_main OPENPAREN . CLOSEPAREN OPENCURLY altmain

    CLOSEPAREN      shift and go to state 46


state 31

    (12) class -> CLASS ID altclass save_class . OPENCURLY alt2class

    OPENCURLY       shift and go to state 47


state 32

    (13) altclass -> TWODOTS ID .

    OPENCURLY       reduce using rule 13 (altclass -> TWODOTS ID .)


state 33

    (27) var -> VAR listids TWODOTS type . save_vars SEMICOLON
    (28) save_vars -> .

    SEMICOLON       reduce using rule 28 (save_vars -> .)

    save_vars                      shift and go to state 48

state 34

    (63) type -> INT .

    SEMICOLON       reduce using rule 63 (type -> INT .)
    COMMA           reduce using rule 63 (type -> INT .)
    CLOSEPAREN      reduce using rule 63 (type -> INT .)
    OPENCURLY       reduce using rule 63 (type -> INT .)


state 35

    (64) type -> FLOAT .

    SEMICOLON       reduce using rule 64 (type -> FLOAT .)
    COMMA           reduce using rule 64 (type -> FLOAT .)
    CLOSEPAREN      reduce using rule 64 (type -> FLOAT .)
    OPENCURLY       reduce using rule 64 (type -> FLOAT .)


state 36

    (65) type -> STRING .

    SEMICOLON       reduce using rule 65 (type -> STRING .)
    COMMA           reduce using rule 65 (type -> STRING .)
    CLOSEPAREN      reduce using rule 65 (type -> STRING .)
    OPENCURLY       reduce using rule 65 (type -> STRING .)


state 37

    (66) type -> ID .

    SEMICOLON       reduce using rule 66 (type -> ID .)
    COMMA           reduce using rule 66 (type -> ID .)
    CLOSEPAREN      reduce using rule 66 (type -> ID .)
    OPENCURLY       reduce using rule 66 (type -> ID .)


state 38

    (67) type -> BOOL .

    SEMICOLON       reduce using rule 67 (type -> BOOL .)
    COMMA           reduce using rule 67 (type -> BOOL .)
    CLOSEPAREN      reduce using rule 67 (type -> BOOL .)
    OPENCURLY       reduce using rule 67 (type -> BOOL .)


state 39

    (29) listids -> ID save_var_name array . listidsalty
    (30) listidsalty -> . COMMA listids
    (31) listidsalty -> . empty
    (138) empty -> .

    COMMA           shift and go to state 50
    TWODOTS         reduce using rule 138 (empty -> .)

    listidsalty                    shift and go to state 49
    empty                          shift and go to state 51

state 40

    (32) array -> OPENBRACKET . expresion CLOSEBRACKET empty_pv array2
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 52
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 41

    (33) array -> empty .

    COMMA           reduce using rule 33 (array -> empty .)
    TWODOTS         reduce using rule 33 (array -> empty .)


state 42

    (48) params -> ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 68


state 43

    (37) function -> FUNC ID OPENPAREN altfunc . CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func

    CLOSEPAREN      shift and go to state 69


state 44

    (38) altfunc -> params .

    CLOSEPAREN      reduce using rule 38 (altfunc -> params .)


state 45

    (39) altfunc -> empty .

    CLOSEPAREN      reduce using rule 39 (altfunc -> empty .)


state 46

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN . OPENCURLY altmain

    OPENCURLY       shift and go to state 70


state 47

    (12) class -> CLASS ID altclass save_class OPENCURLY . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 75

    alt2class                      shift and go to state 71
    var                            shift and go to state 72
    function                       shift and go to state 73
    constructor                    shift and go to state 74

state 48

    (27) var -> VAR listids TWODOTS type save_vars . SEMICOLON

    SEMICOLON       shift and go to state 76


state 49

    (29) listids -> ID save_var_name array listidsalty .

    TWODOTS         reduce using rule 29 (listids -> ID save_var_name array listidsalty .)


state 50

    (30) listidsalty -> COMMA . listids
    (29) listids -> . ID save_var_name array listidsalty

    ID              shift and go to state 21

    listids                        shift and go to state 77

state 51

    (31) listidsalty -> empty .

    TWODOTS         reduce using rule 31 (listidsalty -> empty .)


state 52

    (32) array -> OPENBRACKET expresion . CLOSEBRACKET empty_pv array2

    CLOSEBRACKET    shift and go to state 78


state 53

    (99) expresion -> exp . altexpresion
    (100) altexpresion -> . altexpresion2 save_op exp
    (101) altexpresion -> . empty
    (102) altexpresion2 -> . SAMEAS
    (103) altexpresion2 -> . BIGGERTHAN
    (104) altexpresion2 -> . BIGGEREQUALSTHAN
    (105) altexpresion2 -> . SMALLTHAN
    (106) altexpresion2 -> . SMALLEQUALSTHAN
    (107) altexpresion2 -> . DIFFERENTTHAN
    (108) altexpresion2 -> . AND
    (109) altexpresion2 -> . OR
    (138) empty -> .

    SAMEAS          shift and go to state 82
    BIGGERTHAN      shift and go to state 83
    BIGGEREQUALSTHAN shift and go to state 84
    SMALLTHAN       shift and go to state 85
    SMALLEQUALSTHAN shift and go to state 86
    DIFFERENTTHAN   shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    altexpresion                   shift and go to state 79
    altexpresion2                  shift and go to state 80
    empty                          shift and go to state 81

state 54

    (110) exp -> termino .
    (111) exp -> termino . altexp
    (112) altexp -> . SUM save_op termino altexp
    (113) altexp -> . SUBTRACT save_op termino altexp
    (114) altexp -> . empty
    (138) empty -> .

  ! reduce/reduce conflict for SAMEAS resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for AND resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for OR resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 110 (exp -> termino .)
  ! reduce/reduce conflict for COMMA resolved using rule 110 (exp -> termino .)
    SAMEAS          reduce using rule 110 (exp -> termino .)
    BIGGERTHAN      reduce using rule 110 (exp -> termino .)
    BIGGEREQUALSTHAN reduce using rule 110 (exp -> termino .)
    SMALLTHAN       reduce using rule 110 (exp -> termino .)
    SMALLEQUALSTHAN reduce using rule 110 (exp -> termino .)
    DIFFERENTTHAN   reduce using rule 110 (exp -> termino .)
    AND             reduce using rule 110 (exp -> termino .)
    OR              reduce using rule 110 (exp -> termino .)
    CLOSEBRACKET    reduce using rule 110 (exp -> termino .)
    CLOSEPAREN      reduce using rule 110 (exp -> termino .)
    SEMICOLON       reduce using rule 110 (exp -> termino .)
    COMMA           reduce using rule 110 (exp -> termino .)
    SUM             shift and go to state 91
    SUBTRACT        shift and go to state 92

  ! SAMEAS          [ reduce using rule 138 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 138 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 138 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 138 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 138 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 138 (empty -> .) ]
  ! AND             [ reduce using rule 138 (empty -> .) ]
  ! OR              [ reduce using rule 138 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 138 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 138 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 138 (empty -> .) ]
  ! COMMA           [ reduce using rule 138 (empty -> .) ]

    altexp                         shift and go to state 90
    empty                          shift and go to state 93

state 55

    (115) termino -> factor .
    (116) termino -> factor . alttermino
    (117) alttermino -> . TIMES save_op factor alttermino
    (118) alttermino -> . DIV save_op factor alttermino
    (119) alttermino -> . empty
    (138) empty -> .

  ! reduce/reduce conflict for SUM resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for SUBTRACT resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for SAMEAS resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for BIGGERTHAN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for BIGGEREQUALSTHAN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for SMALLTHAN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for SMALLEQUALSTHAN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for DIFFERENTTHAN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEBRACKET resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for CLOSEPAREN resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 115 (termino -> factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 115 (termino -> factor .)
    SUM             reduce using rule 115 (termino -> factor .)
    SUBTRACT        reduce using rule 115 (termino -> factor .)
    SAMEAS          reduce using rule 115 (termino -> factor .)
    BIGGERTHAN      reduce using rule 115 (termino -> factor .)
    BIGGEREQUALSTHAN reduce using rule 115 (termino -> factor .)
    SMALLTHAN       reduce using rule 115 (termino -> factor .)
    SMALLEQUALSTHAN reduce using rule 115 (termino -> factor .)
    DIFFERENTTHAN   reduce using rule 115 (termino -> factor .)
    AND             reduce using rule 115 (termino -> factor .)
    OR              reduce using rule 115 (termino -> factor .)
    CLOSEBRACKET    reduce using rule 115 (termino -> factor .)
    CLOSEPAREN      reduce using rule 115 (termino -> factor .)
    SEMICOLON       reduce using rule 115 (termino -> factor .)
    COMMA           reduce using rule 115 (termino -> factor .)
    TIMES           shift and go to state 95
    DIV             shift and go to state 96

  ! SUM             [ reduce using rule 138 (empty -> .) ]
  ! SUBTRACT        [ reduce using rule 138 (empty -> .) ]
  ! SAMEAS          [ reduce using rule 138 (empty -> .) ]
  ! BIGGERTHAN      [ reduce using rule 138 (empty -> .) ]
  ! BIGGEREQUALSTHAN [ reduce using rule 138 (empty -> .) ]
  ! SMALLTHAN       [ reduce using rule 138 (empty -> .) ]
  ! SMALLEQUALSTHAN [ reduce using rule 138 (empty -> .) ]
  ! DIFFERENTTHAN   [ reduce using rule 138 (empty -> .) ]
  ! AND             [ reduce using rule 138 (empty -> .) ]
  ! OR              [ reduce using rule 138 (empty -> .) ]
  ! CLOSEBRACKET    [ reduce using rule 138 (empty -> .) ]
  ! CLOSEPAREN      [ reduce using rule 138 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 138 (empty -> .) ]
  ! COMMA           [ reduce using rule 138 (empty -> .) ]

    alttermino                     shift and go to state 94
    empty                          shift and go to state 97

state 56

    (125) factor -> OPENPAREN . save_op expresion CLOSEPAREN save_op
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 98

state 57

    (126) factor -> varcall .

    TIMES           reduce using rule 126 (factor -> varcall .)
    DIV             reduce using rule 126 (factor -> varcall .)
    SUM             reduce using rule 126 (factor -> varcall .)
    SUBTRACT        reduce using rule 126 (factor -> varcall .)
    SAMEAS          reduce using rule 126 (factor -> varcall .)
    BIGGERTHAN      reduce using rule 126 (factor -> varcall .)
    BIGGEREQUALSTHAN reduce using rule 126 (factor -> varcall .)
    SMALLTHAN       reduce using rule 126 (factor -> varcall .)
    SMALLEQUALSTHAN reduce using rule 126 (factor -> varcall .)
    DIFFERENTTHAN   reduce using rule 126 (factor -> varcall .)
    AND             reduce using rule 126 (factor -> varcall .)
    OR              reduce using rule 126 (factor -> varcall .)
    CLOSEBRACKET    reduce using rule 126 (factor -> varcall .)
    CLOSEPAREN      reduce using rule 126 (factor -> varcall .)
    SEMICOLON       reduce using rule 126 (factor -> varcall .)
    COMMA           reduce using rule 126 (factor -> varcall .)


state 58

    (83) varcall -> varcte . save_const
    (97) save_const -> .

    TIMES           reduce using rule 97 (save_const -> .)
    DIV             reduce using rule 97 (save_const -> .)
    SUM             reduce using rule 97 (save_const -> .)
    SUBTRACT        reduce using rule 97 (save_const -> .)
    SAMEAS          reduce using rule 97 (save_const -> .)
    BIGGERTHAN      reduce using rule 97 (save_const -> .)
    BIGGEREQUALSTHAN reduce using rule 97 (save_const -> .)
    SMALLTHAN       reduce using rule 97 (save_const -> .)
    SMALLEQUALSTHAN reduce using rule 97 (save_const -> .)
    DIFFERENTTHAN   reduce using rule 97 (save_const -> .)
    AND             reduce using rule 97 (save_const -> .)
    OR              reduce using rule 97 (save_const -> .)
    CLOSEBRACKET    reduce using rule 97 (save_const -> .)
    CLOSEPAREN      reduce using rule 97 (save_const -> .)
    SEMICOLON       reduce using rule 97 (save_const -> .)
    COMMA           reduce using rule 97 (save_const -> .)

    save_const                     shift and go to state 99

state 59

    (84) varcall -> varcomplicated . save_comp
    (98) save_comp -> .

    TIMES           reduce using rule 98 (save_comp -> .)
    DIV             reduce using rule 98 (save_comp -> .)
    SUM             reduce using rule 98 (save_comp -> .)
    SUBTRACT        reduce using rule 98 (save_comp -> .)
    SAMEAS          reduce using rule 98 (save_comp -> .)
    BIGGERTHAN      reduce using rule 98 (save_comp -> .)
    BIGGEREQUALSTHAN reduce using rule 98 (save_comp -> .)
    SMALLTHAN       reduce using rule 98 (save_comp -> .)
    SMALLEQUALSTHAN reduce using rule 98 (save_comp -> .)
    DIFFERENTTHAN   reduce using rule 98 (save_comp -> .)
    AND             reduce using rule 98 (save_comp -> .)
    OR              reduce using rule 98 (save_comp -> .)
    CLOSEBRACKET    reduce using rule 98 (save_comp -> .)
    CLOSEPAREN      reduce using rule 98 (save_comp -> .)
    SEMICOLON       reduce using rule 98 (save_comp -> .)
    COMMA           reduce using rule 98 (save_comp -> .)

    save_comp                      shift and go to state 100

state 60

    (85) varcte -> TRUE .

    TIMES           reduce using rule 85 (varcte -> TRUE .)
    DIV             reduce using rule 85 (varcte -> TRUE .)
    SUM             reduce using rule 85 (varcte -> TRUE .)
    SUBTRACT        reduce using rule 85 (varcte -> TRUE .)
    SAMEAS          reduce using rule 85 (varcte -> TRUE .)
    BIGGERTHAN      reduce using rule 85 (varcte -> TRUE .)
    BIGGEREQUALSTHAN reduce using rule 85 (varcte -> TRUE .)
    SMALLTHAN       reduce using rule 85 (varcte -> TRUE .)
    SMALLEQUALSTHAN reduce using rule 85 (varcte -> TRUE .)
    DIFFERENTTHAN   reduce using rule 85 (varcte -> TRUE .)
    AND             reduce using rule 85 (varcte -> TRUE .)
    OR              reduce using rule 85 (varcte -> TRUE .)
    CLOSEBRACKET    reduce using rule 85 (varcte -> TRUE .)
    CLOSEPAREN      reduce using rule 85 (varcte -> TRUE .)
    SEMICOLON       reduce using rule 85 (varcte -> TRUE .)
    COMMA           reduce using rule 85 (varcte -> TRUE .)


state 61

    (86) varcte -> FALSE .

    TIMES           reduce using rule 86 (varcte -> FALSE .)
    DIV             reduce using rule 86 (varcte -> FALSE .)
    SUM             reduce using rule 86 (varcte -> FALSE .)
    SUBTRACT        reduce using rule 86 (varcte -> FALSE .)
    SAMEAS          reduce using rule 86 (varcte -> FALSE .)
    BIGGERTHAN      reduce using rule 86 (varcte -> FALSE .)
    BIGGEREQUALSTHAN reduce using rule 86 (varcte -> FALSE .)
    SMALLTHAN       reduce using rule 86 (varcte -> FALSE .)
    SMALLEQUALSTHAN reduce using rule 86 (varcte -> FALSE .)
    DIFFERENTTHAN   reduce using rule 86 (varcte -> FALSE .)
    AND             reduce using rule 86 (varcte -> FALSE .)
    OR              reduce using rule 86 (varcte -> FALSE .)
    CLOSEBRACKET    reduce using rule 86 (varcte -> FALSE .)
    CLOSEPAREN      reduce using rule 86 (varcte -> FALSE .)
    SEMICOLON       reduce using rule 86 (varcte -> FALSE .)
    COMMA           reduce using rule 86 (varcte -> FALSE .)


state 62

    (87) varcte -> CTEFLOAT .

    TIMES           reduce using rule 87 (varcte -> CTEFLOAT .)
    DIV             reduce using rule 87 (varcte -> CTEFLOAT .)
    SUM             reduce using rule 87 (varcte -> CTEFLOAT .)
    SUBTRACT        reduce using rule 87 (varcte -> CTEFLOAT .)
    SAMEAS          reduce using rule 87 (varcte -> CTEFLOAT .)
    BIGGERTHAN      reduce using rule 87 (varcte -> CTEFLOAT .)
    BIGGEREQUALSTHAN reduce using rule 87 (varcte -> CTEFLOAT .)
    SMALLTHAN       reduce using rule 87 (varcte -> CTEFLOAT .)
    SMALLEQUALSTHAN reduce using rule 87 (varcte -> CTEFLOAT .)
    DIFFERENTTHAN   reduce using rule 87 (varcte -> CTEFLOAT .)
    AND             reduce using rule 87 (varcte -> CTEFLOAT .)
    OR              reduce using rule 87 (varcte -> CTEFLOAT .)
    CLOSEBRACKET    reduce using rule 87 (varcte -> CTEFLOAT .)
    CLOSEPAREN      reduce using rule 87 (varcte -> CTEFLOAT .)
    SEMICOLON       reduce using rule 87 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 87 (varcte -> CTEFLOAT .)


state 63

    (88) varcte -> CTESTRING .

    TIMES           reduce using rule 88 (varcte -> CTESTRING .)
    DIV             reduce using rule 88 (varcte -> CTESTRING .)
    SUM             reduce using rule 88 (varcte -> CTESTRING .)
    SUBTRACT        reduce using rule 88 (varcte -> CTESTRING .)
    SAMEAS          reduce using rule 88 (varcte -> CTESTRING .)
    BIGGERTHAN      reduce using rule 88 (varcte -> CTESTRING .)
    BIGGEREQUALSTHAN reduce using rule 88 (varcte -> CTESTRING .)
    SMALLTHAN       reduce using rule 88 (varcte -> CTESTRING .)
    SMALLEQUALSTHAN reduce using rule 88 (varcte -> CTESTRING .)
    DIFFERENTTHAN   reduce using rule 88 (varcte -> CTESTRING .)
    AND             reduce using rule 88 (varcte -> CTESTRING .)
    OR              reduce using rule 88 (varcte -> CTESTRING .)
    CLOSEBRACKET    reduce using rule 88 (varcte -> CTESTRING .)
    CLOSEPAREN      reduce using rule 88 (varcte -> CTESTRING .)
    SEMICOLON       reduce using rule 88 (varcte -> CTESTRING .)
    COMMA           reduce using rule 88 (varcte -> CTESTRING .)


state 64

    (89) varcte -> CTEINT .

    TIMES           reduce using rule 89 (varcte -> CTEINT .)
    DIV             reduce using rule 89 (varcte -> CTEINT .)
    SUM             reduce using rule 89 (varcte -> CTEINT .)
    SUBTRACT        reduce using rule 89 (varcte -> CTEINT .)
    SAMEAS          reduce using rule 89 (varcte -> CTEINT .)
    BIGGERTHAN      reduce using rule 89 (varcte -> CTEINT .)
    BIGGEREQUALSTHAN reduce using rule 89 (varcte -> CTEINT .)
    SMALLTHAN       reduce using rule 89 (varcte -> CTEINT .)
    SMALLEQUALSTHAN reduce using rule 89 (varcte -> CTEINT .)
    DIFFERENTTHAN   reduce using rule 89 (varcte -> CTEINT .)
    AND             reduce using rule 89 (varcte -> CTEINT .)
    OR              reduce using rule 89 (varcte -> CTEINT .)
    CLOSEBRACKET    reduce using rule 89 (varcte -> CTEINT .)
    CLOSEPAREN      reduce using rule 89 (varcte -> CTEINT .)
    SEMICOLON       reduce using rule 89 (varcte -> CTEINT .)
    COMMA           reduce using rule 89 (varcte -> CTEINT .)


state 65

    (90) varcomplicated -> varcomp1 .

    TIMES           reduce using rule 90 (varcomplicated -> varcomp1 .)
    DIV             reduce using rule 90 (varcomplicated -> varcomp1 .)
    SUM             reduce using rule 90 (varcomplicated -> varcomp1 .)
    SUBTRACT        reduce using rule 90 (varcomplicated -> varcomp1 .)
    SAMEAS          reduce using rule 90 (varcomplicated -> varcomp1 .)
    BIGGERTHAN      reduce using rule 90 (varcomplicated -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 90 (varcomplicated -> varcomp1 .)
    SMALLTHAN       reduce using rule 90 (varcomplicated -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 90 (varcomplicated -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 90 (varcomplicated -> varcomp1 .)
    AND             reduce using rule 90 (varcomplicated -> varcomp1 .)
    OR              reduce using rule 90 (varcomplicated -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 90 (varcomplicated -> varcomp1 .)
    CLOSEPAREN      reduce using rule 90 (varcomplicated -> varcomp1 .)
    SEMICOLON       reduce using rule 90 (varcomplicated -> varcomp1 .)
    COMMA           reduce using rule 90 (varcomplicated -> varcomp1 .)


state 66

    (91) varcomplicated -> callfunc .

    TIMES           reduce using rule 91 (varcomplicated -> callfunc .)
    DIV             reduce using rule 91 (varcomplicated -> callfunc .)
    SUM             reduce using rule 91 (varcomplicated -> callfunc .)
    SUBTRACT        reduce using rule 91 (varcomplicated -> callfunc .)
    SAMEAS          reduce using rule 91 (varcomplicated -> callfunc .)
    BIGGERTHAN      reduce using rule 91 (varcomplicated -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 91 (varcomplicated -> callfunc .)
    SMALLTHAN       reduce using rule 91 (varcomplicated -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 91 (varcomplicated -> callfunc .)
    DIFFERENTTHAN   reduce using rule 91 (varcomplicated -> callfunc .)
    AND             reduce using rule 91 (varcomplicated -> callfunc .)
    OR              reduce using rule 91 (varcomplicated -> callfunc .)
    CLOSEBRACKET    reduce using rule 91 (varcomplicated -> callfunc .)
    CLOSEPAREN      reduce using rule 91 (varcomplicated -> callfunc .)
    SEMICOLON       reduce using rule 91 (varcomplicated -> callfunc .)
    COMMA           reduce using rule 91 (varcomplicated -> callfunc .)


state 67

    (92) varcomp1 -> ID . varcomp2
    (52) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (93) varcomp2 -> . DOT varcomp3
    (94) varcomp2 -> . empty
    (62) check_exists_func -> .
    (138) empty -> .

    DOT             shift and go to state 103
    OPENPAREN       reduce using rule 62 (check_exists_func -> .)
    TIMES           reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    SUM             reduce using rule 138 (empty -> .)
    SUBTRACT        reduce using rule 138 (empty -> .)
    SAMEAS          reduce using rule 138 (empty -> .)
    BIGGERTHAN      reduce using rule 138 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (empty -> .)
    SMALLTHAN       reduce using rule 138 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 138 (empty -> .)
    DIFFERENTTHAN   reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    varcomp2                       shift and go to state 101
    check_exists_func              shift and go to state 102
    empty                          shift and go to state 104

state 68

    (48) params -> ID TWODOTS . type save_params altparams
    (63) type -> . INT
    (64) type -> . FLOAT
    (65) type -> . STRING
    (66) type -> . ID
    (67) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 105

state 69

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN . alt2func save_function store_params OPENCURLY alt3func
    (40) alt2func -> . TWODOTS type
    (41) alt2func -> . empty
    (138) empty -> .

    TWODOTS         shift and go to state 107
    OPENCURLY       reduce using rule 138 (empty -> .)

    alt2func                       shift and go to state 106
    empty                          shift and go to state 108

state 70

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 112
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    altmain                        shift and go to state 109
    var                            shift and go to state 110
    estatuto                       shift and go to state 111
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 71

    (12) class -> CLASS ID altclass save_class OPENCURLY alt2class .

    CLASS           reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    VAR             reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    FUNC            reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)
    MAIN            reduce using rule 12 (class -> CLASS ID altclass save_class OPENCURLY alt2class .)


state 72

    (15) alt2class -> var . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 75

    var                            shift and go to state 72
    alt2class                      shift and go to state 127
    function                       shift and go to state 73
    constructor                    shift and go to state 74

state 73

    (16) alt2class -> function . alt2class
    (15) alt2class -> . var alt2class
    (16) alt2class -> . function alt2class
    (17) alt2class -> . constructor CLOSECURLY SEMICOLON remove_class_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (37) function -> . FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func
    (20) constructor -> . CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    VAR             shift and go to state 12
    FUNC            shift and go to state 13
    CONSTRUCTOR     shift and go to state 75

    function                       shift and go to state 73
    alt2class                      shift and go to state 128
    var                            shift and go to state 72
    constructor                    shift and go to state 74

state 74

    (17) alt2class -> constructor . CLOSECURLY SEMICOLON remove_class_scope

    CLOSECURLY      shift and go to state 129


state 75

    (20) constructor -> CONSTRUCTOR . save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const
    (26) save_constructor -> .

    OPENPAREN       reduce using rule 26 (save_constructor -> .)

    save_constructor               shift and go to state 130

state 76

    (27) var -> VAR listids TWODOTS type save_vars SEMICOLON .

    CLASS           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    VAR             reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    FUNC            reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    MAIN            reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CONSTRUCTOR     reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    CLOSECURLY      reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    ID              reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    IF              reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    OUTPUT          reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    INPUT           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    RETURN          reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)
    WHILE           reduce using rule 27 (var -> VAR listids TWODOTS type save_vars SEMICOLON .)


state 77

    (30) listidsalty -> COMMA listids .

    TWODOTS         reduce using rule 30 (listidsalty -> COMMA listids .)


state 78

    (32) array -> OPENBRACKET expresion CLOSEBRACKET . empty_pv array2
    (77) empty_pv -> .

    OPENBRACKET     reduce using rule 77 (empty_pv -> .)
    COMMA           reduce using rule 77 (empty_pv -> .)
    TWODOTS         reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 131

state 79

    (99) expresion -> exp altexpresion .

    CLOSEBRACKET    reduce using rule 99 (expresion -> exp altexpresion .)
    CLOSEPAREN      reduce using rule 99 (expresion -> exp altexpresion .)
    SEMICOLON       reduce using rule 99 (expresion -> exp altexpresion .)
    COMMA           reduce using rule 99 (expresion -> exp altexpresion .)


state 80

    (100) altexpresion -> altexpresion2 . save_op exp
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 132

state 81

    (101) altexpresion -> empty .

    CLOSEBRACKET    reduce using rule 101 (altexpresion -> empty .)
    CLOSEPAREN      reduce using rule 101 (altexpresion -> empty .)
    SEMICOLON       reduce using rule 101 (altexpresion -> empty .)
    COMMA           reduce using rule 101 (altexpresion -> empty .)


state 82

    (102) altexpresion2 -> SAMEAS .

    OPENPAREN       reduce using rule 102 (altexpresion2 -> SAMEAS .)
    TRUE            reduce using rule 102 (altexpresion2 -> SAMEAS .)
    FALSE           reduce using rule 102 (altexpresion2 -> SAMEAS .)
    CTEFLOAT        reduce using rule 102 (altexpresion2 -> SAMEAS .)
    CTESTRING       reduce using rule 102 (altexpresion2 -> SAMEAS .)
    CTEINT          reduce using rule 102 (altexpresion2 -> SAMEAS .)
    ID              reduce using rule 102 (altexpresion2 -> SAMEAS .)


state 83

    (103) altexpresion2 -> BIGGERTHAN .

    OPENPAREN       reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    TRUE            reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    FALSE           reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    CTEFLOAT        reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    CTESTRING       reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    CTEINT          reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)
    ID              reduce using rule 103 (altexpresion2 -> BIGGERTHAN .)


state 84

    (104) altexpresion2 -> BIGGEREQUALSTHAN .

    OPENPAREN       reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    TRUE            reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    FALSE           reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEFLOAT        reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTESTRING       reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    CTEINT          reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)
    ID              reduce using rule 104 (altexpresion2 -> BIGGEREQUALSTHAN .)


state 85

    (105) altexpresion2 -> SMALLTHAN .

    OPENPAREN       reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    TRUE            reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    FALSE           reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    CTEFLOAT        reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    CTESTRING       reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    CTEINT          reduce using rule 105 (altexpresion2 -> SMALLTHAN .)
    ID              reduce using rule 105 (altexpresion2 -> SMALLTHAN .)


state 86

    (106) altexpresion2 -> SMALLEQUALSTHAN .

    OPENPAREN       reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    TRUE            reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    FALSE           reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEFLOAT        reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTESTRING       reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    CTEINT          reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)
    ID              reduce using rule 106 (altexpresion2 -> SMALLEQUALSTHAN .)


state 87

    (107) altexpresion2 -> DIFFERENTTHAN .

    OPENPAREN       reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    TRUE            reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    FALSE           reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    CTEFLOAT        reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    CTESTRING       reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    CTEINT          reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)
    ID              reduce using rule 107 (altexpresion2 -> DIFFERENTTHAN .)


state 88

    (108) altexpresion2 -> AND .

    OPENPAREN       reduce using rule 108 (altexpresion2 -> AND .)
    TRUE            reduce using rule 108 (altexpresion2 -> AND .)
    FALSE           reduce using rule 108 (altexpresion2 -> AND .)
    CTEFLOAT        reduce using rule 108 (altexpresion2 -> AND .)
    CTESTRING       reduce using rule 108 (altexpresion2 -> AND .)
    CTEINT          reduce using rule 108 (altexpresion2 -> AND .)
    ID              reduce using rule 108 (altexpresion2 -> AND .)


state 89

    (109) altexpresion2 -> OR .

    OPENPAREN       reduce using rule 109 (altexpresion2 -> OR .)
    TRUE            reduce using rule 109 (altexpresion2 -> OR .)
    FALSE           reduce using rule 109 (altexpresion2 -> OR .)
    CTEFLOAT        reduce using rule 109 (altexpresion2 -> OR .)
    CTESTRING       reduce using rule 109 (altexpresion2 -> OR .)
    CTEINT          reduce using rule 109 (altexpresion2 -> OR .)
    ID              reduce using rule 109 (altexpresion2 -> OR .)


state 90

    (111) exp -> termino altexp .

    SAMEAS          reduce using rule 111 (exp -> termino altexp .)
    BIGGERTHAN      reduce using rule 111 (exp -> termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 111 (exp -> termino altexp .)
    SMALLTHAN       reduce using rule 111 (exp -> termino altexp .)
    SMALLEQUALSTHAN reduce using rule 111 (exp -> termino altexp .)
    DIFFERENTTHAN   reduce using rule 111 (exp -> termino altexp .)
    AND             reduce using rule 111 (exp -> termino altexp .)
    OR              reduce using rule 111 (exp -> termino altexp .)
    CLOSEBRACKET    reduce using rule 111 (exp -> termino altexp .)
    CLOSEPAREN      reduce using rule 111 (exp -> termino altexp .)
    SEMICOLON       reduce using rule 111 (exp -> termino altexp .)
    COMMA           reduce using rule 111 (exp -> termino altexp .)


state 91

    (112) altexp -> SUM . save_op termino altexp
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 133

state 92

    (113) altexp -> SUBTRACT . save_op termino altexp
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 134

state 93

    (114) altexp -> empty .

    SAMEAS          reduce using rule 114 (altexp -> empty .)
    BIGGERTHAN      reduce using rule 114 (altexp -> empty .)
    BIGGEREQUALSTHAN reduce using rule 114 (altexp -> empty .)
    SMALLTHAN       reduce using rule 114 (altexp -> empty .)
    SMALLEQUALSTHAN reduce using rule 114 (altexp -> empty .)
    DIFFERENTTHAN   reduce using rule 114 (altexp -> empty .)
    AND             reduce using rule 114 (altexp -> empty .)
    OR              reduce using rule 114 (altexp -> empty .)
    CLOSEBRACKET    reduce using rule 114 (altexp -> empty .)
    CLOSEPAREN      reduce using rule 114 (altexp -> empty .)
    SEMICOLON       reduce using rule 114 (altexp -> empty .)
    COMMA           reduce using rule 114 (altexp -> empty .)


state 94

    (116) termino -> factor alttermino .

    SUM             reduce using rule 116 (termino -> factor alttermino .)
    SUBTRACT        reduce using rule 116 (termino -> factor alttermino .)
    SAMEAS          reduce using rule 116 (termino -> factor alttermino .)
    BIGGERTHAN      reduce using rule 116 (termino -> factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 116 (termino -> factor alttermino .)
    SMALLTHAN       reduce using rule 116 (termino -> factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 116 (termino -> factor alttermino .)
    DIFFERENTTHAN   reduce using rule 116 (termino -> factor alttermino .)
    AND             reduce using rule 116 (termino -> factor alttermino .)
    OR              reduce using rule 116 (termino -> factor alttermino .)
    CLOSEBRACKET    reduce using rule 116 (termino -> factor alttermino .)
    CLOSEPAREN      reduce using rule 116 (termino -> factor alttermino .)
    SEMICOLON       reduce using rule 116 (termino -> factor alttermino .)
    COMMA           reduce using rule 116 (termino -> factor alttermino .)


state 95

    (117) alttermino -> TIMES . save_op factor alttermino
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 135

state 96

    (118) alttermino -> DIV . save_op factor alttermino
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 136

state 97

    (119) alttermino -> empty .

    SUM             reduce using rule 119 (alttermino -> empty .)
    SUBTRACT        reduce using rule 119 (alttermino -> empty .)
    SAMEAS          reduce using rule 119 (alttermino -> empty .)
    BIGGERTHAN      reduce using rule 119 (alttermino -> empty .)
    BIGGEREQUALSTHAN reduce using rule 119 (alttermino -> empty .)
    SMALLTHAN       reduce using rule 119 (alttermino -> empty .)
    SMALLEQUALSTHAN reduce using rule 119 (alttermino -> empty .)
    DIFFERENTTHAN   reduce using rule 119 (alttermino -> empty .)
    AND             reduce using rule 119 (alttermino -> empty .)
    OR              reduce using rule 119 (alttermino -> empty .)
    CLOSEBRACKET    reduce using rule 119 (alttermino -> empty .)
    CLOSEPAREN      reduce using rule 119 (alttermino -> empty .)
    SEMICOLON       reduce using rule 119 (alttermino -> empty .)
    COMMA           reduce using rule 119 (alttermino -> empty .)


state 98

    (125) factor -> OPENPAREN save_op . expresion CLOSEPAREN save_op
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 137
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 99

    (83) varcall -> varcte save_const .

    TIMES           reduce using rule 83 (varcall -> varcte save_const .)
    DIV             reduce using rule 83 (varcall -> varcte save_const .)
    SUM             reduce using rule 83 (varcall -> varcte save_const .)
    SUBTRACT        reduce using rule 83 (varcall -> varcte save_const .)
    SAMEAS          reduce using rule 83 (varcall -> varcte save_const .)
    BIGGERTHAN      reduce using rule 83 (varcall -> varcte save_const .)
    BIGGEREQUALSTHAN reduce using rule 83 (varcall -> varcte save_const .)
    SMALLTHAN       reduce using rule 83 (varcall -> varcte save_const .)
    SMALLEQUALSTHAN reduce using rule 83 (varcall -> varcte save_const .)
    DIFFERENTTHAN   reduce using rule 83 (varcall -> varcte save_const .)
    AND             reduce using rule 83 (varcall -> varcte save_const .)
    OR              reduce using rule 83 (varcall -> varcte save_const .)
    CLOSEBRACKET    reduce using rule 83 (varcall -> varcte save_const .)
    CLOSEPAREN      reduce using rule 83 (varcall -> varcte save_const .)
    SEMICOLON       reduce using rule 83 (varcall -> varcte save_const .)
    COMMA           reduce using rule 83 (varcall -> varcte save_const .)


state 100

    (84) varcall -> varcomplicated save_comp .

    TIMES           reduce using rule 84 (varcall -> varcomplicated save_comp .)
    DIV             reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SUM             reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SUBTRACT        reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SAMEAS          reduce using rule 84 (varcall -> varcomplicated save_comp .)
    BIGGERTHAN      reduce using rule 84 (varcall -> varcomplicated save_comp .)
    BIGGEREQUALSTHAN reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SMALLTHAN       reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SMALLEQUALSTHAN reduce using rule 84 (varcall -> varcomplicated save_comp .)
    DIFFERENTTHAN   reduce using rule 84 (varcall -> varcomplicated save_comp .)
    AND             reduce using rule 84 (varcall -> varcomplicated save_comp .)
    OR              reduce using rule 84 (varcall -> varcomplicated save_comp .)
    CLOSEBRACKET    reduce using rule 84 (varcall -> varcomplicated save_comp .)
    CLOSEPAREN      reduce using rule 84 (varcall -> varcomplicated save_comp .)
    SEMICOLON       reduce using rule 84 (varcall -> varcomplicated save_comp .)
    COMMA           reduce using rule 84 (varcall -> varcomplicated save_comp .)


state 101

    (92) varcomp1 -> ID varcomp2 .

    TIMES           reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    DIV             reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SUM             reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SUBTRACT        reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SAMEAS          reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    BIGGERTHAN      reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    BIGGEREQUALSTHAN reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SMALLTHAN       reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SMALLEQUALSTHAN reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    DIFFERENTTHAN   reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    AND             reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    OR              reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    CLOSEBRACKET    reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    CLOSEPAREN      reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    SEMICOLON       reduce using rule 92 (varcomp1 -> ID varcomp2 .)
    COMMA           reduce using rule 92 (varcomp1 -> ID varcomp2 .)


state 102

    (52) callfunc -> ID check_exists_func . add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (57) add_false_stack -> .

    OPENPAREN       reduce using rule 57 (add_false_stack -> .)

    add_false_stack                shift and go to state 138

state 103

    (93) varcomp2 -> DOT . varcomp3
    (95) varcomp3 -> . varcomp1
    (96) varcomp3 -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 67

    varcomp3                       shift and go to state 139
    varcomp1                       shift and go to state 140
    callfunc                       shift and go to state 141

state 104

    (94) varcomp2 -> empty .

    TIMES           reduce using rule 94 (varcomp2 -> empty .)
    DIV             reduce using rule 94 (varcomp2 -> empty .)
    SUM             reduce using rule 94 (varcomp2 -> empty .)
    SUBTRACT        reduce using rule 94 (varcomp2 -> empty .)
    SAMEAS          reduce using rule 94 (varcomp2 -> empty .)
    BIGGERTHAN      reduce using rule 94 (varcomp2 -> empty .)
    BIGGEREQUALSTHAN reduce using rule 94 (varcomp2 -> empty .)
    SMALLTHAN       reduce using rule 94 (varcomp2 -> empty .)
    SMALLEQUALSTHAN reduce using rule 94 (varcomp2 -> empty .)
    DIFFERENTTHAN   reduce using rule 94 (varcomp2 -> empty .)
    AND             reduce using rule 94 (varcomp2 -> empty .)
    OR              reduce using rule 94 (varcomp2 -> empty .)
    CLOSEBRACKET    reduce using rule 94 (varcomp2 -> empty .)
    CLOSEPAREN      reduce using rule 94 (varcomp2 -> empty .)
    SEMICOLON       reduce using rule 94 (varcomp2 -> empty .)
    COMMA           reduce using rule 94 (varcomp2 -> empty .)


state 105

    (48) params -> ID TWODOTS type . save_params altparams
    (51) save_params -> .

    COMMA           reduce using rule 51 (save_params -> .)
    CLOSEPAREN      reduce using rule 51 (save_params -> .)

    save_params                    shift and go to state 142

state 106

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func . save_function store_params OPENCURLY alt3func
    (45) save_function -> .

    OPENCURLY       reduce using rule 45 (save_function -> .)

    save_function                  shift and go to state 143

state 107

    (40) alt2func -> TWODOTS . type
    (63) type -> . INT
    (64) type -> . FLOAT
    (65) type -> . STRING
    (66) type -> . ID
    (67) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 144

state 108

    (41) alt2func -> empty .

    OPENCURLY       reduce using rule 41 (alt2func -> empty .)


state 109

    (7) main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .

    $end            reduce using rule 7 (main -> MAIN save_main OPENPAREN CLOSEPAREN OPENCURLY altmain .)


state 110

    (8) altmain -> var . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 112
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    var                            shift and go to state 110
    altmain                        shift and go to state 145
    estatuto                       shift and go to state 111
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 111

    (9) altmain -> estatuto . altmain
    (8) altmain -> . var altmain
    (9) altmain -> . estatuto altmain
    (10) altmain -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 112
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    estatuto                       shift and go to state 111
    altmain                        shift and go to state 146
    var                            shift and go to state 110
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 112

    (10) altmain -> CLOSECURLY .

    $end            reduce using rule 10 (altmain -> CLOSECURLY .)


state 113

    (68) estatuto -> assign . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 147

state 114

    (69) estatuto -> condition . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 148

state 115

    (70) estatuto -> write . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 149

state 116

    (71) estatuto -> read . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 150

state 117

    (72) estatuto -> return . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 151

state 118

    (73) estatuto -> voidcall . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 152

state 119

    (74) estatuto -> while . empty_pv
    (77) empty_pv -> .

    CLOSECURLY      reduce using rule 77 (empty_pv -> .)
    VAR             reduce using rule 77 (empty_pv -> .)
    ID              reduce using rule 77 (empty_pv -> .)
    IF              reduce using rule 77 (empty_pv -> .)
    OUTPUT          reduce using rule 77 (empty_pv -> .)
    INPUT           reduce using rule 77 (empty_pv -> .)
    RETURN          reduce using rule 77 (empty_pv -> .)
    WHILE           reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 153

state 120

    (134) assign -> ID . save_comp EQUALS save_op expresion SEMICOLON
    (76) voidcall -> ID . DOT voidcall
    (52) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (98) save_comp -> .
    (62) check_exists_func -> .

    DOT             shift and go to state 155
    EQUALS          reduce using rule 98 (save_comp -> .)
    OPENPAREN       reduce using rule 62 (check_exists_func -> .)

    save_comp                      shift and go to state 154
    check_exists_func              shift and go to state 102

state 121

    (127) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> IF . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENPAREN       shift and go to state 156


state 122

    (122) write -> OUTPUT . save_op OPENPAREN expresion altwrite
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 157

state 123

    (121) read -> INPUT . save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 158

state 124

    (135) return -> RETURN . expresion generate_quad_ret SEMICOLON add_return_exists
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 159
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 125

    (75) voidcall -> callfunc . SEMICOLON

    SEMICOLON       shift and go to state 160


state 126

    (78) while -> WHILE . add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (81) add_stack_jump -> .

    OPENPAREN       reduce using rule 81 (add_stack_jump -> .)

    add_stack_jump                 shift and go to state 161

state 127

    (15) alt2class -> var alt2class .

    CLASS           reduce using rule 15 (alt2class -> var alt2class .)
    VAR             reduce using rule 15 (alt2class -> var alt2class .)
    FUNC            reduce using rule 15 (alt2class -> var alt2class .)
    MAIN            reduce using rule 15 (alt2class -> var alt2class .)


state 128

    (16) alt2class -> function alt2class .

    CLASS           reduce using rule 16 (alt2class -> function alt2class .)
    VAR             reduce using rule 16 (alt2class -> function alt2class .)
    FUNC            reduce using rule 16 (alt2class -> function alt2class .)
    MAIN            reduce using rule 16 (alt2class -> function alt2class .)


state 129

    (17) alt2class -> constructor CLOSECURLY . SEMICOLON remove_class_scope

    SEMICOLON       shift and go to state 162


state 130

    (20) constructor -> CONSTRUCTOR save_constructor . OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const

    OPENPAREN       shift and go to state 163


state 131

    (32) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv . array2
    (34) array2 -> . OPENBRACKET expresion CLOSEBRACKET empty_pv
    (35) array2 -> . empty
    (138) empty -> .

    OPENBRACKET     shift and go to state 164
    COMMA           reduce using rule 138 (empty -> .)
    TWODOTS         reduce using rule 138 (empty -> .)

    array2                         shift and go to state 165
    empty                          shift and go to state 166

state 132

    (100) altexpresion -> altexpresion2 save_op . exp
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    exp                            shift and go to state 167
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 133

    (112) altexp -> SUM save_op . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    termino                        shift and go to state 168
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 134

    (113) altexp -> SUBTRACT save_op . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    termino                        shift and go to state 169
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 135

    (117) alttermino -> TIMES save_op . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    factor                         shift and go to state 170
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 136

    (118) alttermino -> DIV save_op . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    factor                         shift and go to state 171
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 137

    (125) factor -> OPENPAREN save_op expresion . CLOSEPAREN save_op

    CLOSEPAREN      shift and go to state 172


state 138

    (52) callfunc -> ID check_exists_func add_false_stack . OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 173


state 139

    (93) varcomp2 -> DOT varcomp3 .

    TIMES           reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    DIV             reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SUM             reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SUBTRACT        reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SAMEAS          reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    BIGGERTHAN      reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    BIGGEREQUALSTHAN reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SMALLTHAN       reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SMALLEQUALSTHAN reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    DIFFERENTTHAN   reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    AND             reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    OR              reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    CLOSEBRACKET    reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    CLOSEPAREN      reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    SEMICOLON       reduce using rule 93 (varcomp2 -> DOT varcomp3 .)
    COMMA           reduce using rule 93 (varcomp2 -> DOT varcomp3 .)


state 140

    (95) varcomp3 -> varcomp1 .

    TIMES           reduce using rule 95 (varcomp3 -> varcomp1 .)
    DIV             reduce using rule 95 (varcomp3 -> varcomp1 .)
    SUM             reduce using rule 95 (varcomp3 -> varcomp1 .)
    SUBTRACT        reduce using rule 95 (varcomp3 -> varcomp1 .)
    SAMEAS          reduce using rule 95 (varcomp3 -> varcomp1 .)
    BIGGERTHAN      reduce using rule 95 (varcomp3 -> varcomp1 .)
    BIGGEREQUALSTHAN reduce using rule 95 (varcomp3 -> varcomp1 .)
    SMALLTHAN       reduce using rule 95 (varcomp3 -> varcomp1 .)
    SMALLEQUALSTHAN reduce using rule 95 (varcomp3 -> varcomp1 .)
    DIFFERENTTHAN   reduce using rule 95 (varcomp3 -> varcomp1 .)
    AND             reduce using rule 95 (varcomp3 -> varcomp1 .)
    OR              reduce using rule 95 (varcomp3 -> varcomp1 .)
    CLOSEBRACKET    reduce using rule 95 (varcomp3 -> varcomp1 .)
    CLOSEPAREN      reduce using rule 95 (varcomp3 -> varcomp1 .)
    SEMICOLON       reduce using rule 95 (varcomp3 -> varcomp1 .)
    COMMA           reduce using rule 95 (varcomp3 -> varcomp1 .)


state 141

    (96) varcomp3 -> callfunc .

    TIMES           reduce using rule 96 (varcomp3 -> callfunc .)
    DIV             reduce using rule 96 (varcomp3 -> callfunc .)
    SUM             reduce using rule 96 (varcomp3 -> callfunc .)
    SUBTRACT        reduce using rule 96 (varcomp3 -> callfunc .)
    SAMEAS          reduce using rule 96 (varcomp3 -> callfunc .)
    BIGGERTHAN      reduce using rule 96 (varcomp3 -> callfunc .)
    BIGGEREQUALSTHAN reduce using rule 96 (varcomp3 -> callfunc .)
    SMALLTHAN       reduce using rule 96 (varcomp3 -> callfunc .)
    SMALLEQUALSTHAN reduce using rule 96 (varcomp3 -> callfunc .)
    DIFFERENTTHAN   reduce using rule 96 (varcomp3 -> callfunc .)
    AND             reduce using rule 96 (varcomp3 -> callfunc .)
    OR              reduce using rule 96 (varcomp3 -> callfunc .)
    CLOSEBRACKET    reduce using rule 96 (varcomp3 -> callfunc .)
    CLOSEPAREN      reduce using rule 96 (varcomp3 -> callfunc .)
    SEMICOLON       reduce using rule 96 (varcomp3 -> callfunc .)
    COMMA           reduce using rule 96 (varcomp3 -> callfunc .)


state 142

    (48) params -> ID TWODOTS type save_params . altparams
    (49) altparams -> . COMMA ID TWODOTS type save_params altparams
    (50) altparams -> . empty
    (138) empty -> .

    COMMA           shift and go to state 175
    CLOSEPAREN      reduce using rule 138 (empty -> .)

    altparams                      shift and go to state 174
    empty                          shift and go to state 176

state 143

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function . store_params OPENCURLY alt3func
    (46) store_params -> .

    OPENCURLY       reduce using rule 46 (store_params -> .)

    store_params                   shift and go to state 177

state 144

    (40) alt2func -> TWODOTS type .

    OPENCURLY       reduce using rule 40 (alt2func -> TWODOTS type .)


state 145

    (8) altmain -> var altmain .

    $end            reduce using rule 8 (altmain -> var altmain .)


state 146

    (9) altmain -> estatuto altmain .

    $end            reduce using rule 9 (altmain -> estatuto altmain .)


state 147

    (68) estatuto -> assign empty_pv .

    CLOSECURLY      reduce using rule 68 (estatuto -> assign empty_pv .)
    VAR             reduce using rule 68 (estatuto -> assign empty_pv .)
    ID              reduce using rule 68 (estatuto -> assign empty_pv .)
    IF              reduce using rule 68 (estatuto -> assign empty_pv .)
    OUTPUT          reduce using rule 68 (estatuto -> assign empty_pv .)
    INPUT           reduce using rule 68 (estatuto -> assign empty_pv .)
    RETURN          reduce using rule 68 (estatuto -> assign empty_pv .)
    WHILE           reduce using rule 68 (estatuto -> assign empty_pv .)


state 148

    (69) estatuto -> condition empty_pv .

    CLOSECURLY      reduce using rule 69 (estatuto -> condition empty_pv .)
    VAR             reduce using rule 69 (estatuto -> condition empty_pv .)
    ID              reduce using rule 69 (estatuto -> condition empty_pv .)
    IF              reduce using rule 69 (estatuto -> condition empty_pv .)
    OUTPUT          reduce using rule 69 (estatuto -> condition empty_pv .)
    INPUT           reduce using rule 69 (estatuto -> condition empty_pv .)
    RETURN          reduce using rule 69 (estatuto -> condition empty_pv .)
    WHILE           reduce using rule 69 (estatuto -> condition empty_pv .)


state 149

    (70) estatuto -> write empty_pv .

    CLOSECURLY      reduce using rule 70 (estatuto -> write empty_pv .)
    VAR             reduce using rule 70 (estatuto -> write empty_pv .)
    ID              reduce using rule 70 (estatuto -> write empty_pv .)
    IF              reduce using rule 70 (estatuto -> write empty_pv .)
    OUTPUT          reduce using rule 70 (estatuto -> write empty_pv .)
    INPUT           reduce using rule 70 (estatuto -> write empty_pv .)
    RETURN          reduce using rule 70 (estatuto -> write empty_pv .)
    WHILE           reduce using rule 70 (estatuto -> write empty_pv .)


state 150

    (71) estatuto -> read empty_pv .

    CLOSECURLY      reduce using rule 71 (estatuto -> read empty_pv .)
    VAR             reduce using rule 71 (estatuto -> read empty_pv .)
    ID              reduce using rule 71 (estatuto -> read empty_pv .)
    IF              reduce using rule 71 (estatuto -> read empty_pv .)
    OUTPUT          reduce using rule 71 (estatuto -> read empty_pv .)
    INPUT           reduce using rule 71 (estatuto -> read empty_pv .)
    RETURN          reduce using rule 71 (estatuto -> read empty_pv .)
    WHILE           reduce using rule 71 (estatuto -> read empty_pv .)


state 151

    (72) estatuto -> return empty_pv .

    CLOSECURLY      reduce using rule 72 (estatuto -> return empty_pv .)
    VAR             reduce using rule 72 (estatuto -> return empty_pv .)
    ID              reduce using rule 72 (estatuto -> return empty_pv .)
    IF              reduce using rule 72 (estatuto -> return empty_pv .)
    OUTPUT          reduce using rule 72 (estatuto -> return empty_pv .)
    INPUT           reduce using rule 72 (estatuto -> return empty_pv .)
    RETURN          reduce using rule 72 (estatuto -> return empty_pv .)
    WHILE           reduce using rule 72 (estatuto -> return empty_pv .)


state 152

    (73) estatuto -> voidcall empty_pv .

    CLOSECURLY      reduce using rule 73 (estatuto -> voidcall empty_pv .)
    VAR             reduce using rule 73 (estatuto -> voidcall empty_pv .)
    ID              reduce using rule 73 (estatuto -> voidcall empty_pv .)
    IF              reduce using rule 73 (estatuto -> voidcall empty_pv .)
    OUTPUT          reduce using rule 73 (estatuto -> voidcall empty_pv .)
    INPUT           reduce using rule 73 (estatuto -> voidcall empty_pv .)
    RETURN          reduce using rule 73 (estatuto -> voidcall empty_pv .)
    WHILE           reduce using rule 73 (estatuto -> voidcall empty_pv .)


state 153

    (74) estatuto -> while empty_pv .

    CLOSECURLY      reduce using rule 74 (estatuto -> while empty_pv .)
    VAR             reduce using rule 74 (estatuto -> while empty_pv .)
    ID              reduce using rule 74 (estatuto -> while empty_pv .)
    IF              reduce using rule 74 (estatuto -> while empty_pv .)
    OUTPUT          reduce using rule 74 (estatuto -> while empty_pv .)
    INPUT           reduce using rule 74 (estatuto -> while empty_pv .)
    RETURN          reduce using rule 74 (estatuto -> while empty_pv .)
    WHILE           reduce using rule 74 (estatuto -> while empty_pv .)


state 154

    (134) assign -> ID save_comp . EQUALS save_op expresion SEMICOLON

    EQUALS          shift and go to state 178


state 155

    (76) voidcall -> ID DOT . voidcall
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    ID              shift and go to state 179

    voidcall                       shift and go to state 180
    callfunc                       shift and go to state 125

state 156

    (127) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> IF OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 181
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 157

    (122) write -> OUTPUT save_op . OPENPAREN expresion altwrite

    OPENPAREN       shift and go to state 182


state 158

    (121) read -> INPUT save_op . OPENPAREN ID save_comp CLOSEPAREN SEMICOLON

    OPENPAREN       shift and go to state 183


state 159

    (135) return -> RETURN expresion . generate_quad_ret SEMICOLON add_return_exists
    (136) generate_quad_ret -> .

    SEMICOLON       reduce using rule 136 (generate_quad_ret -> .)

    generate_quad_ret              shift and go to state 184

state 160

    (75) voidcall -> callfunc SEMICOLON .

    CLOSECURLY      reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    VAR             reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    ID              reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    IF              reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    OUTPUT          reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    INPUT           reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    RETURN          reduce using rule 75 (voidcall -> callfunc SEMICOLON .)
    WHILE           reduce using rule 75 (voidcall -> callfunc SEMICOLON .)


state 161

    (78) while -> WHILE add_stack_jump . OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    OPENPAREN       shift and go to state 185


state 162

    (17) alt2class -> constructor CLOSECURLY SEMICOLON . remove_class_scope
    (19) remove_class_scope -> .

    CLASS           reduce using rule 19 (remove_class_scope -> .)
    VAR             reduce using rule 19 (remove_class_scope -> .)
    FUNC            reduce using rule 19 (remove_class_scope -> .)
    MAIN            reduce using rule 19 (remove_class_scope -> .)

    remove_class_scope             shift and go to state 186

state 163

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN . altconst store_params CLOSEPAREN OPENCURLY alt2const
    (21) altconst -> . params
    (22) altconst -> . empty
    (48) params -> . ID TWODOTS type save_params altparams
    (138) empty -> .

    ID              shift and go to state 42
    CLOSEPAREN      reduce using rule 138 (empty -> .)

    altconst                       shift and go to state 187
    params                         shift and go to state 188
    empty                          shift and go to state 189

state 164

    (34) array2 -> OPENBRACKET . expresion CLOSEBRACKET empty_pv
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 190
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 165

    (32) array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .

    COMMA           reduce using rule 32 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)
    TWODOTS         reduce using rule 32 (array -> OPENBRACKET expresion CLOSEBRACKET empty_pv array2 .)


state 166

    (35) array2 -> empty .

    COMMA           reduce using rule 35 (array2 -> empty .)
    TWODOTS         reduce using rule 35 (array2 -> empty .)


state 167

    (100) altexpresion -> altexpresion2 save_op exp .

    CLOSEBRACKET    reduce using rule 100 (altexpresion -> altexpresion2 save_op exp .)
    CLOSEPAREN      reduce using rule 100 (altexpresion -> altexpresion2 save_op exp .)
    SEMICOLON       reduce using rule 100 (altexpresion -> altexpresion2 save_op exp .)
    COMMA           reduce using rule 100 (altexpresion -> altexpresion2 save_op exp .)


state 168

    (112) altexp -> SUM save_op termino . altexp
    (112) altexp -> . SUM save_op termino altexp
    (113) altexp -> . SUBTRACT save_op termino altexp
    (114) altexp -> . empty
    (138) empty -> .

    SUM             shift and go to state 91
    SUBTRACT        shift and go to state 92
    SAMEAS          reduce using rule 138 (empty -> .)
    BIGGERTHAN      reduce using rule 138 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (empty -> .)
    SMALLTHAN       reduce using rule 138 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 138 (empty -> .)
    DIFFERENTTHAN   reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    altexp                         shift and go to state 191
    empty                          shift and go to state 93

state 169

    (113) altexp -> SUBTRACT save_op termino . altexp
    (112) altexp -> . SUM save_op termino altexp
    (113) altexp -> . SUBTRACT save_op termino altexp
    (114) altexp -> . empty
    (138) empty -> .

    SUM             shift and go to state 91
    SUBTRACT        shift and go to state 92
    SAMEAS          reduce using rule 138 (empty -> .)
    BIGGERTHAN      reduce using rule 138 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (empty -> .)
    SMALLTHAN       reduce using rule 138 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 138 (empty -> .)
    DIFFERENTTHAN   reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    altexp                         shift and go to state 192
    empty                          shift and go to state 93

state 170

    (117) alttermino -> TIMES save_op factor . alttermino
    (117) alttermino -> . TIMES save_op factor alttermino
    (118) alttermino -> . DIV save_op factor alttermino
    (119) alttermino -> . empty
    (138) empty -> .

    TIMES           shift and go to state 95
    DIV             shift and go to state 96
    SUM             reduce using rule 138 (empty -> .)
    SUBTRACT        reduce using rule 138 (empty -> .)
    SAMEAS          reduce using rule 138 (empty -> .)
    BIGGERTHAN      reduce using rule 138 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (empty -> .)
    SMALLTHAN       reduce using rule 138 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 138 (empty -> .)
    DIFFERENTTHAN   reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    alttermino                     shift and go to state 193
    empty                          shift and go to state 97

state 171

    (118) alttermino -> DIV save_op factor . alttermino
    (117) alttermino -> . TIMES save_op factor alttermino
    (118) alttermino -> . DIV save_op factor alttermino
    (119) alttermino -> . empty
    (138) empty -> .

    TIMES           shift and go to state 95
    DIV             shift and go to state 96
    SUM             reduce using rule 138 (empty -> .)
    SUBTRACT        reduce using rule 138 (empty -> .)
    SAMEAS          reduce using rule 138 (empty -> .)
    BIGGERTHAN      reduce using rule 138 (empty -> .)
    BIGGEREQUALSTHAN reduce using rule 138 (empty -> .)
    SMALLTHAN       reduce using rule 138 (empty -> .)
    SMALLEQUALSTHAN reduce using rule 138 (empty -> .)
    DIFFERENTTHAN   reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    CLOSEBRACKET    reduce using rule 138 (empty -> .)
    CLOSEPAREN      reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)

    alttermino                     shift and go to state 194
    empty                          shift and go to state 97

state 172

    (125) factor -> OPENPAREN save_op expresion CLOSEPAREN . save_op
    (120) save_op -> .

    TIMES           reduce using rule 120 (save_op -> .)
    DIV             reduce using rule 120 (save_op -> .)
    SUM             reduce using rule 120 (save_op -> .)
    SUBTRACT        reduce using rule 120 (save_op -> .)
    SAMEAS          reduce using rule 120 (save_op -> .)
    BIGGERTHAN      reduce using rule 120 (save_op -> .)
    BIGGEREQUALSTHAN reduce using rule 120 (save_op -> .)
    SMALLTHAN       reduce using rule 120 (save_op -> .)
    SMALLEQUALSTHAN reduce using rule 120 (save_op -> .)
    DIFFERENTTHAN   reduce using rule 120 (save_op -> .)
    AND             reduce using rule 120 (save_op -> .)
    OR              reduce using rule 120 (save_op -> .)
    CLOSEBRACKET    reduce using rule 120 (save_op -> .)
    CLOSEPAREN      reduce using rule 120 (save_op -> .)
    SEMICOLON       reduce using rule 120 (save_op -> .)
    COMMA           reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 195

state 173

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN . altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (53) altcall -> . expresion generate_param_quad alt2call
    (54) altcall -> . empty
    (99) expresion -> . exp altexpresion
    (138) empty -> .
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 138 (empty -> .)
    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    altcall                        shift and go to state 196
    expresion                      shift and go to state 197
    empty                          shift and go to state 198
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 174

    (48) params -> ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 48 (params -> ID TWODOTS type save_params altparams .)


state 175

    (49) altparams -> COMMA . ID TWODOTS type save_params altparams

    ID              shift and go to state 199


state 176

    (50) altparams -> empty .

    CLOSEPAREN      reduce using rule 50 (altparams -> empty .)


state 177

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params . OPENCURLY alt3func

    OPENCURLY       shift and go to state 200


state 178

    (134) assign -> ID save_comp EQUALS . save_op expresion SEMICOLON
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 201

state 179

    (76) voidcall -> ID . DOT voidcall
    (52) callfunc -> ID . check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub
    (62) check_exists_func -> .

    DOT             shift and go to state 155
    OPENPAREN       reduce using rule 62 (check_exists_func -> .)

    check_exists_func              shift and go to state 102

state 180

    (76) voidcall -> ID DOT voidcall .

    CLOSECURLY      reduce using rule 76 (voidcall -> ID DOT voidcall .)
    VAR             reduce using rule 76 (voidcall -> ID DOT voidcall .)
    ID              reduce using rule 76 (voidcall -> ID DOT voidcall .)
    IF              reduce using rule 76 (voidcall -> ID DOT voidcall .)
    OUTPUT          reduce using rule 76 (voidcall -> ID DOT voidcall .)
    INPUT           reduce using rule 76 (voidcall -> ID DOT voidcall .)
    RETURN          reduce using rule 76 (voidcall -> ID DOT voidcall .)
    WHILE           reduce using rule 76 (voidcall -> ID DOT voidcall .)


state 181

    (127) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> IF OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    CLOSEPAREN      shift and go to state 202


state 182

    (122) write -> OUTPUT save_op OPENPAREN . expresion altwrite
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 203
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 183

    (121) read -> INPUT save_op OPENPAREN . ID save_comp CLOSEPAREN SEMICOLON

    ID              shift and go to state 204


state 184

    (135) return -> RETURN expresion generate_quad_ret . SEMICOLON add_return_exists

    SEMICOLON       shift and go to state 205


state 185

    (78) while -> WHILE add_stack_jump OPENPAREN . expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 206
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 186

    (17) alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .

    CLASS           reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    VAR             reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    FUNC            reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)
    MAIN            reduce using rule 17 (alt2class -> constructor CLOSECURLY SEMICOLON remove_class_scope .)


state 187

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst . store_params CLOSEPAREN OPENCURLY alt2const
    (46) store_params -> .

    CLOSEPAREN      reduce using rule 46 (store_params -> .)

    store_params                   shift and go to state 207

state 188

    (21) altconst -> params .

    CLOSEPAREN      reduce using rule 21 (altconst -> params .)


state 189

    (22) altconst -> empty .

    CLOSEPAREN      reduce using rule 22 (altconst -> empty .)


state 190

    (34) array2 -> OPENBRACKET expresion . CLOSEBRACKET empty_pv

    CLOSEBRACKET    shift and go to state 208


state 191

    (112) altexp -> SUM save_op termino altexp .

    SAMEAS          reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    BIGGERTHAN      reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    SMALLTHAN       reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    AND             reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    OR              reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    CLOSEPAREN      reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    SEMICOLON       reduce using rule 112 (altexp -> SUM save_op termino altexp .)
    COMMA           reduce using rule 112 (altexp -> SUM save_op termino altexp .)


state 192

    (113) altexp -> SUBTRACT save_op termino altexp .

    SAMEAS          reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGERTHAN      reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    BIGGEREQUALSTHAN reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLTHAN       reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    SMALLEQUALSTHAN reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    DIFFERENTTHAN   reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    AND             reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    OR              reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEBRACKET    reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    CLOSEPAREN      reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    SEMICOLON       reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)
    COMMA           reduce using rule 113 (altexp -> SUBTRACT save_op termino altexp .)


state 193

    (117) alttermino -> TIMES save_op factor alttermino .

    SUM             reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    SUBTRACT        reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    SAMEAS          reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    SMALLTHAN       reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    AND             reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    OR              reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    SEMICOLON       reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)
    COMMA           reduce using rule 117 (alttermino -> TIMES save_op factor alttermino .)


state 194

    (118) alttermino -> DIV save_op factor alttermino .

    SUM             reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    SUBTRACT        reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    SAMEAS          reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    BIGGERTHAN      reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    BIGGEREQUALSTHAN reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    SMALLTHAN       reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    SMALLEQUALSTHAN reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    DIFFERENTTHAN   reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    AND             reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    OR              reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    CLOSEBRACKET    reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    CLOSEPAREN      reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    SEMICOLON       reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)
    COMMA           reduce using rule 118 (alttermino -> DIV save_op factor alttermino .)


state 195

    (125) factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .

    TIMES           reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIV             reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUM             reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SUBTRACT        reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SAMEAS          reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGERTHAN      reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    BIGGEREQUALSTHAN reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLTHAN       reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SMALLEQUALSTHAN reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    DIFFERENTTHAN   reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    AND             reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    OR              reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEBRACKET    reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    CLOSEPAREN      reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    SEMICOLON       reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)
    COMMA           reduce using rule 125 (factor -> OPENPAREN save_op expresion CLOSEPAREN save_op .)


state 196

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall . check_params CLOSEPAREN end_false_stack generate_gosub
    (60) check_params -> .

    CLOSEPAREN      reduce using rule 60 (check_params -> .)

    check_params                   shift and go to state 209

state 197

    (53) altcall -> expresion . generate_param_quad alt2call
    (61) generate_param_quad -> .

    COMMA           reduce using rule 61 (generate_param_quad -> .)
    CLOSEPAREN      reduce using rule 61 (generate_param_quad -> .)

    generate_param_quad            shift and go to state 210

state 198

    (54) altcall -> empty .

    CLOSEPAREN      reduce using rule 54 (altcall -> empty .)


state 199

    (49) altparams -> COMMA ID . TWODOTS type save_params altparams

    TWODOTS         shift and go to state 211


state 200

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY . alt3func
    (42) alt3func -> . var alt3func
    (43) alt3func -> . estatuto alt3func
    (44) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 215
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    alt3func                       shift and go to state 212
    var                            shift and go to state 213
    estatuto                       shift and go to state 214
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 201

    (134) assign -> ID save_comp EQUALS save_op . expresion SEMICOLON
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 216
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 202

    (127) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> IF OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (131) add_gotof -> .

    OPENCURLY       reduce using rule 131 (add_gotof -> .)

    add_gotof                      shift and go to state 217

state 203

    (122) write -> OUTPUT save_op OPENPAREN expresion . altwrite
    (123) altwrite -> . COMMA save_op expresion altwrite
    (124) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 219
    CLOSEPAREN      shift and go to state 220

    altwrite                       shift and go to state 218

state 204

    (121) read -> INPUT save_op OPENPAREN ID . save_comp CLOSEPAREN SEMICOLON
    (98) save_comp -> .

    CLOSEPAREN      reduce using rule 98 (save_comp -> .)

    save_comp                      shift and go to state 221

state 205

    (135) return -> RETURN expresion generate_quad_ret SEMICOLON . add_return_exists
    (137) add_return_exists -> .

    CLOSECURLY      reduce using rule 137 (add_return_exists -> .)
    VAR             reduce using rule 137 (add_return_exists -> .)
    ID              reduce using rule 137 (add_return_exists -> .)
    IF              reduce using rule 137 (add_return_exists -> .)
    OUTPUT          reduce using rule 137 (add_return_exists -> .)
    INPUT           reduce using rule 137 (add_return_exists -> .)
    RETURN          reduce using rule 137 (add_return_exists -> .)
    WHILE           reduce using rule 137 (add_return_exists -> .)

    add_return_exists              shift and go to state 222

state 206

    (78) while -> WHILE add_stack_jump OPENPAREN expresion . CLOSEPAREN add_gotof OPENCURLY altwhile end_while

    CLOSEPAREN      shift and go to state 223


state 207

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params . CLOSEPAREN OPENCURLY alt2const

    CLOSEPAREN      shift and go to state 224


state 208

    (34) array2 -> OPENBRACKET expresion CLOSEBRACKET . empty_pv
    (77) empty_pv -> .

    COMMA           reduce using rule 77 (empty_pv -> .)
    TWODOTS         reduce using rule 77 (empty_pv -> .)

    empty_pv                       shift and go to state 225

state 209

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params . CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      shift and go to state 226


state 210

    (53) altcall -> expresion generate_param_quad . alt2call
    (55) alt2call -> . COMMA altcall
    (56) alt2call -> . empty
    (138) empty -> .

    COMMA           shift and go to state 228
    CLOSEPAREN      reduce using rule 138 (empty -> .)

    alt2call                       shift and go to state 227
    empty                          shift and go to state 229

state 211

    (49) altparams -> COMMA ID TWODOTS . type save_params altparams
    (63) type -> . INT
    (64) type -> . FLOAT
    (65) type -> . STRING
    (66) type -> . ID
    (67) type -> . BOOL

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    ID              shift and go to state 37
    BOOL            shift and go to state 38

    type                           shift and go to state 230

state 212

    (37) function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .

    CLASS           reduce using rule 37 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    VAR             reduce using rule 37 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    FUNC            reduce using rule 37 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    MAIN            reduce using rule 37 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)
    CONSTRUCTOR     reduce using rule 37 (function -> FUNC ID OPENPAREN altfunc CLOSEPAREN alt2func save_function store_params OPENCURLY alt3func .)


state 213

    (42) alt3func -> var . alt3func
    (42) alt3func -> . var alt3func
    (43) alt3func -> . estatuto alt3func
    (44) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 215
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    var                            shift and go to state 213
    alt3func                       shift and go to state 231
    estatuto                       shift and go to state 214
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 214

    (43) alt3func -> estatuto . alt3func
    (42) alt3func -> . var alt3func
    (43) alt3func -> . estatuto alt3func
    (44) alt3func -> . CLOSECURLY remove_function_scope
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 215
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    estatuto                       shift and go to state 214
    alt3func                       shift and go to state 232
    var                            shift and go to state 213
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 215

    (44) alt3func -> CLOSECURLY . remove_function_scope
    (47) remove_function_scope -> .

    CLASS           reduce using rule 47 (remove_function_scope -> .)
    VAR             reduce using rule 47 (remove_function_scope -> .)
    FUNC            reduce using rule 47 (remove_function_scope -> .)
    MAIN            reduce using rule 47 (remove_function_scope -> .)
    CONSTRUCTOR     reduce using rule 47 (remove_function_scope -> .)

    remove_function_scope          shift and go to state 233

state 216

    (134) assign -> ID save_comp EQUALS save_op expresion . SEMICOLON

    SEMICOLON       shift and go to state 234


state 217

    (127) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition add_end_if
    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 235


state 218

    (122) write -> OUTPUT save_op OPENPAREN expresion altwrite .

    CLOSECURLY      reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    VAR             reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    ID              reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    IF              reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    OUTPUT          reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    INPUT           reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    RETURN          reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)
    WHILE           reduce using rule 122 (write -> OUTPUT save_op OPENPAREN expresion altwrite .)


state 219

    (123) altwrite -> COMMA . save_op expresion altwrite
    (120) save_op -> .

    OPENPAREN       reduce using rule 120 (save_op -> .)
    TRUE            reduce using rule 120 (save_op -> .)
    FALSE           reduce using rule 120 (save_op -> .)
    CTEFLOAT        reduce using rule 120 (save_op -> .)
    CTESTRING       reduce using rule 120 (save_op -> .)
    CTEINT          reduce using rule 120 (save_op -> .)
    ID              reduce using rule 120 (save_op -> .)

    save_op                        shift and go to state 236

state 220

    (124) altwrite -> CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 237


state 221

    (121) read -> INPUT save_op OPENPAREN ID save_comp . CLOSEPAREN SEMICOLON

    CLOSEPAREN      shift and go to state 238


state 222

    (135) return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .

    CLOSECURLY      reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    VAR             reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    ID              reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    IF              reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    OUTPUT          reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    INPUT           reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    RETURN          reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)
    WHILE           reduce using rule 135 (return -> RETURN expresion generate_quad_ret SEMICOLON add_return_exists .)


state 223

    (78) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN . add_gotof OPENCURLY altwhile end_while
    (131) add_gotof -> .

    OPENCURLY       reduce using rule 131 (add_gotof -> .)

    add_gotof                      shift and go to state 239

state 224

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN . OPENCURLY alt2const

    OPENCURLY       shift and go to state 240


state 225

    (34) array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .

    COMMA           reduce using rule 34 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)
    TWODOTS         reduce using rule 34 (array2 -> OPENBRACKET expresion CLOSEBRACKET empty_pv .)


state 226

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN . end_false_stack generate_gosub
    (58) end_false_stack -> .

    TIMES           reduce using rule 58 (end_false_stack -> .)
    DIV             reduce using rule 58 (end_false_stack -> .)
    SUM             reduce using rule 58 (end_false_stack -> .)
    SUBTRACT        reduce using rule 58 (end_false_stack -> .)
    SAMEAS          reduce using rule 58 (end_false_stack -> .)
    BIGGERTHAN      reduce using rule 58 (end_false_stack -> .)
    BIGGEREQUALSTHAN reduce using rule 58 (end_false_stack -> .)
    SMALLTHAN       reduce using rule 58 (end_false_stack -> .)
    SMALLEQUALSTHAN reduce using rule 58 (end_false_stack -> .)
    DIFFERENTTHAN   reduce using rule 58 (end_false_stack -> .)
    AND             reduce using rule 58 (end_false_stack -> .)
    OR              reduce using rule 58 (end_false_stack -> .)
    CLOSEBRACKET    reduce using rule 58 (end_false_stack -> .)
    SEMICOLON       reduce using rule 58 (end_false_stack -> .)
    CLOSEPAREN      reduce using rule 58 (end_false_stack -> .)
    COMMA           reduce using rule 58 (end_false_stack -> .)

    end_false_stack                shift and go to state 241

state 227

    (53) altcall -> expresion generate_param_quad alt2call .

    CLOSEPAREN      reduce using rule 53 (altcall -> expresion generate_param_quad alt2call .)


state 228

    (55) alt2call -> COMMA . altcall
    (53) altcall -> . expresion generate_param_quad alt2call
    (54) altcall -> . empty
    (99) expresion -> . exp altexpresion
    (138) empty -> .
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSEPAREN      reduce using rule 138 (empty -> .)
    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    altcall                        shift and go to state 242
    expresion                      shift and go to state 197
    empty                          shift and go to state 198
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 229

    (56) alt2call -> empty .

    CLOSEPAREN      reduce using rule 56 (alt2call -> empty .)


state 230

    (49) altparams -> COMMA ID TWODOTS type . save_params altparams
    (51) save_params -> .

    COMMA           reduce using rule 51 (save_params -> .)
    CLOSEPAREN      reduce using rule 51 (save_params -> .)

    save_params                    shift and go to state 243

state 231

    (42) alt3func -> var alt3func .

    CLASS           reduce using rule 42 (alt3func -> var alt3func .)
    VAR             reduce using rule 42 (alt3func -> var alt3func .)
    FUNC            reduce using rule 42 (alt3func -> var alt3func .)
    MAIN            reduce using rule 42 (alt3func -> var alt3func .)
    CONSTRUCTOR     reduce using rule 42 (alt3func -> var alt3func .)


state 232

    (43) alt3func -> estatuto alt3func .

    CLASS           reduce using rule 43 (alt3func -> estatuto alt3func .)
    VAR             reduce using rule 43 (alt3func -> estatuto alt3func .)
    FUNC            reduce using rule 43 (alt3func -> estatuto alt3func .)
    MAIN            reduce using rule 43 (alt3func -> estatuto alt3func .)
    CONSTRUCTOR     reduce using rule 43 (alt3func -> estatuto alt3func .)


state 233

    (44) alt3func -> CLOSECURLY remove_function_scope .

    CLASS           reduce using rule 44 (alt3func -> CLOSECURLY remove_function_scope .)
    VAR             reduce using rule 44 (alt3func -> CLOSECURLY remove_function_scope .)
    FUNC            reduce using rule 44 (alt3func -> CLOSECURLY remove_function_scope .)
    MAIN            reduce using rule 44 (alt3func -> CLOSECURLY remove_function_scope .)
    CONSTRUCTOR     reduce using rule 44 (alt3func -> CLOSECURLY remove_function_scope .)


state 234

    (134) assign -> ID save_comp EQUALS save_op expresion SEMICOLON .

    CLOSECURLY      reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    VAR             reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    ID              reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    IF              reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    OUTPUT          reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    INPUT           reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    RETURN          reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)
    WHILE           reduce using rule 134 (assign -> ID save_comp EQUALS save_op expresion SEMICOLON .)


state 235

    (127) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition add_end_if
    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (129) altcondition -> . estatuto altcondition
    (130) altcondition -> . CLOSECURLY
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 246
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    altcondition                   shift and go to state 244
    estatuto                       shift and go to state 245
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 236

    (123) altwrite -> COMMA save_op . expresion altwrite
    (99) expresion -> . exp altexpresion
    (110) exp -> . termino
    (111) exp -> . termino altexp
    (115) termino -> . factor
    (116) termino -> . factor alttermino
    (125) factor -> . OPENPAREN save_op expresion CLOSEPAREN save_op
    (126) factor -> . varcall
    (83) varcall -> . varcte save_const
    (84) varcall -> . varcomplicated save_comp
    (85) varcte -> . TRUE
    (86) varcte -> . FALSE
    (87) varcte -> . CTEFLOAT
    (88) varcte -> . CTESTRING
    (89) varcte -> . CTEINT
    (90) varcomplicated -> . varcomp1
    (91) varcomplicated -> . callfunc
    (92) varcomp1 -> . ID varcomp2
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    OPENPAREN       shift and go to state 56
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    CTEFLOAT        shift and go to state 62
    CTESTRING       shift and go to state 63
    CTEINT          shift and go to state 64
    ID              shift and go to state 67

    expresion                      shift and go to state 247
    exp                            shift and go to state 53
    termino                        shift and go to state 54
    factor                         shift and go to state 55
    varcall                        shift and go to state 57
    varcte                         shift and go to state 58
    varcomplicated                 shift and go to state 59
    varcomp1                       shift and go to state 65
    callfunc                       shift and go to state 66

state 237

    (124) altwrite -> CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 124 (altwrite -> CLOSEPAREN SEMICOLON .)


state 238

    (121) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN . SEMICOLON

    SEMICOLON       shift and go to state 248


state 239

    (78) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof . OPENCURLY altwhile end_while

    OPENCURLY       shift and go to state 249


state 240

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    alt2const                      shift and go to state 250
    var                            shift and go to state 251
    estatuto                       shift and go to state 252
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 241

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack . generate_gosub
    (59) generate_gosub -> .

    TIMES           reduce using rule 59 (generate_gosub -> .)
    DIV             reduce using rule 59 (generate_gosub -> .)
    SUM             reduce using rule 59 (generate_gosub -> .)
    SUBTRACT        reduce using rule 59 (generate_gosub -> .)
    SAMEAS          reduce using rule 59 (generate_gosub -> .)
    BIGGERTHAN      reduce using rule 59 (generate_gosub -> .)
    BIGGEREQUALSTHAN reduce using rule 59 (generate_gosub -> .)
    SMALLTHAN       reduce using rule 59 (generate_gosub -> .)
    SMALLEQUALSTHAN reduce using rule 59 (generate_gosub -> .)
    DIFFERENTTHAN   reduce using rule 59 (generate_gosub -> .)
    AND             reduce using rule 59 (generate_gosub -> .)
    OR              reduce using rule 59 (generate_gosub -> .)
    CLOSEBRACKET    reduce using rule 59 (generate_gosub -> .)
    SEMICOLON       reduce using rule 59 (generate_gosub -> .)
    CLOSEPAREN      reduce using rule 59 (generate_gosub -> .)
    COMMA           reduce using rule 59 (generate_gosub -> .)

    generate_gosub                 shift and go to state 254

state 242

    (55) alt2call -> COMMA altcall .

    CLOSEPAREN      reduce using rule 55 (alt2call -> COMMA altcall .)


state 243

    (49) altparams -> COMMA ID TWODOTS type save_params . altparams
    (49) altparams -> . COMMA ID TWODOTS type save_params altparams
    (50) altparams -> . empty
    (138) empty -> .

    COMMA           shift and go to state 175
    CLOSEPAREN      reduce using rule 138 (empty -> .)

    altparams                      shift and go to state 255
    empty                          shift and go to state 176

state 244

    (127) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . add_end_if
    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition . ELSE generate_goto OPENCURLY altcondition add_end_if
    (132) add_end_if -> .

    ELSE            shift and go to state 257
    CLOSECURLY      reduce using rule 132 (add_end_if -> .)
    VAR             reduce using rule 132 (add_end_if -> .)
    ID              reduce using rule 132 (add_end_if -> .)
    IF              reduce using rule 132 (add_end_if -> .)
    OUTPUT          reduce using rule 132 (add_end_if -> .)
    INPUT           reduce using rule 132 (add_end_if -> .)
    RETURN          reduce using rule 132 (add_end_if -> .)
    WHILE           reduce using rule 132 (add_end_if -> .)

    add_end_if                     shift and go to state 256

state 245

    (129) altcondition -> estatuto . altcondition
    (129) altcondition -> . estatuto altcondition
    (130) altcondition -> . CLOSECURLY
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 246
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    estatuto                       shift and go to state 245
    altcondition                   shift and go to state 258
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 246

    (130) altcondition -> CLOSECURLY .

    ELSE            reduce using rule 130 (altcondition -> CLOSECURLY .)
    CLOSECURLY      reduce using rule 130 (altcondition -> CLOSECURLY .)
    VAR             reduce using rule 130 (altcondition -> CLOSECURLY .)
    ID              reduce using rule 130 (altcondition -> CLOSECURLY .)
    IF              reduce using rule 130 (altcondition -> CLOSECURLY .)
    OUTPUT          reduce using rule 130 (altcondition -> CLOSECURLY .)
    INPUT           reduce using rule 130 (altcondition -> CLOSECURLY .)
    RETURN          reduce using rule 130 (altcondition -> CLOSECURLY .)
    WHILE           reduce using rule 130 (altcondition -> CLOSECURLY .)


state 247

    (123) altwrite -> COMMA save_op expresion . altwrite
    (123) altwrite -> . COMMA save_op expresion altwrite
    (124) altwrite -> . CLOSEPAREN SEMICOLON

    COMMA           shift and go to state 219
    CLOSEPAREN      shift and go to state 220

    altwrite                       shift and go to state 259

state 248

    (121) read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .

    CLOSECURLY      reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    VAR             reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    ID              reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    IF              reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    OUTPUT          reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    INPUT           reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    RETURN          reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)
    WHILE           reduce using rule 121 (read -> INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON .)


state 249

    (78) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY . altwhile end_while
    (79) altwhile -> . estatuto altwhile
    (80) altwhile -> . CLOSECURLY
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 262
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    altwhile                       shift and go to state 260
    estatuto                       shift and go to state 261
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 250

    (20) constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .

    CLOSECURLY      reduce using rule 20 (constructor -> CONSTRUCTOR save_constructor OPENPAREN altconst store_params CLOSEPAREN OPENCURLY alt2const .)


state 251

    (23) alt2const -> var . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    var                            shift and go to state 251
    alt2const                      shift and go to state 263
    estatuto                       shift and go to state 252
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 252

    (24) alt2const -> estatuto . alt2const
    (23) alt2const -> . var alt2const
    (24) alt2const -> . estatuto alt2const
    (25) alt2const -> . CLOSECURLY
    (27) var -> . VAR listids TWODOTS type save_vars SEMICOLON
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 253
    VAR             shift and go to state 12
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    estatuto                       shift and go to state 252
    alt2const                      shift and go to state 264
    var                            shift and go to state 251
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 253

    (25) alt2const -> CLOSECURLY .

    CLOSECURLY      reduce using rule 25 (alt2const -> CLOSECURLY .)


state 254

    (52) callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .

    TIMES           reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIV             reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUM             reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SUBTRACT        reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SAMEAS          reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGERTHAN      reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    BIGGEREQUALSTHAN reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLTHAN       reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SMALLEQUALSTHAN reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    DIFFERENTTHAN   reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    AND             reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    OR              reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEBRACKET    reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    SEMICOLON       reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    CLOSEPAREN      reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)
    COMMA           reduce using rule 52 (callfunc -> ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub .)


state 255

    (49) altparams -> COMMA ID TWODOTS type save_params altparams .

    CLOSEPAREN      reduce using rule 49 (altparams -> COMMA ID TWODOTS type save_params altparams .)


state 256

    (127) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 127 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if .)


state 257

    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE . generate_goto OPENCURLY altcondition add_end_if
    (133) generate_goto -> .

    OPENCURLY       reduce using rule 133 (generate_goto -> .)

    generate_goto                  shift and go to state 265

state 258

    (129) altcondition -> estatuto altcondition .

    ELSE            reduce using rule 129 (altcondition -> estatuto altcondition .)
    CLOSECURLY      reduce using rule 129 (altcondition -> estatuto altcondition .)
    VAR             reduce using rule 129 (altcondition -> estatuto altcondition .)
    ID              reduce using rule 129 (altcondition -> estatuto altcondition .)
    IF              reduce using rule 129 (altcondition -> estatuto altcondition .)
    OUTPUT          reduce using rule 129 (altcondition -> estatuto altcondition .)
    INPUT           reduce using rule 129 (altcondition -> estatuto altcondition .)
    RETURN          reduce using rule 129 (altcondition -> estatuto altcondition .)
    WHILE           reduce using rule 129 (altcondition -> estatuto altcondition .)


state 259

    (123) altwrite -> COMMA save_op expresion altwrite .

    CLOSECURLY      reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    VAR             reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    ID              reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    IF              reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    OUTPUT          reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    INPUT           reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    RETURN          reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)
    WHILE           reduce using rule 123 (altwrite -> COMMA save_op expresion altwrite .)


state 260

    (78) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile . end_while
    (82) end_while -> .

    CLOSECURLY      reduce using rule 82 (end_while -> .)
    VAR             reduce using rule 82 (end_while -> .)
    ID              reduce using rule 82 (end_while -> .)
    IF              reduce using rule 82 (end_while -> .)
    OUTPUT          reduce using rule 82 (end_while -> .)
    INPUT           reduce using rule 82 (end_while -> .)
    RETURN          reduce using rule 82 (end_while -> .)
    WHILE           reduce using rule 82 (end_while -> .)

    end_while                      shift and go to state 266

state 261

    (79) altwhile -> estatuto . altwhile
    (79) altwhile -> . estatuto altwhile
    (80) altwhile -> . CLOSECURLY
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 262
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    estatuto                       shift and go to state 261
    altwhile                       shift and go to state 267
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 262

    (80) altwhile -> CLOSECURLY .

    CLOSECURLY      reduce using rule 80 (altwhile -> CLOSECURLY .)
    VAR             reduce using rule 80 (altwhile -> CLOSECURLY .)
    ID              reduce using rule 80 (altwhile -> CLOSECURLY .)
    IF              reduce using rule 80 (altwhile -> CLOSECURLY .)
    OUTPUT          reduce using rule 80 (altwhile -> CLOSECURLY .)
    INPUT           reduce using rule 80 (altwhile -> CLOSECURLY .)
    RETURN          reduce using rule 80 (altwhile -> CLOSECURLY .)
    WHILE           reduce using rule 80 (altwhile -> CLOSECURLY .)


state 263

    (23) alt2const -> var alt2const .

    CLOSECURLY      reduce using rule 23 (alt2const -> var alt2const .)


state 264

    (24) alt2const -> estatuto alt2const .

    CLOSECURLY      reduce using rule 24 (alt2const -> estatuto alt2const .)


state 265

    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto . OPENCURLY altcondition add_end_if

    OPENCURLY       shift and go to state 268


state 266

    (78) while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .

    CLOSECURLY      reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    VAR             reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    ID              reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    IF              reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    OUTPUT          reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    INPUT           reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    RETURN          reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)
    WHILE           reduce using rule 78 (while -> WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while .)


state 267

    (79) altwhile -> estatuto altwhile .

    CLOSECURLY      reduce using rule 79 (altwhile -> estatuto altwhile .)
    VAR             reduce using rule 79 (altwhile -> estatuto altwhile .)
    ID              reduce using rule 79 (altwhile -> estatuto altwhile .)
    IF              reduce using rule 79 (altwhile -> estatuto altwhile .)
    OUTPUT          reduce using rule 79 (altwhile -> estatuto altwhile .)
    INPUT           reduce using rule 79 (altwhile -> estatuto altwhile .)
    RETURN          reduce using rule 79 (altwhile -> estatuto altwhile .)
    WHILE           reduce using rule 79 (altwhile -> estatuto altwhile .)


state 268

    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY . altcondition add_end_if
    (129) altcondition -> . estatuto altcondition
    (130) altcondition -> . CLOSECURLY
    (68) estatuto -> . assign empty_pv
    (69) estatuto -> . condition empty_pv
    (70) estatuto -> . write empty_pv
    (71) estatuto -> . read empty_pv
    (72) estatuto -> . return empty_pv
    (73) estatuto -> . voidcall empty_pv
    (74) estatuto -> . while empty_pv
    (134) assign -> . ID save_comp EQUALS save_op expresion SEMICOLON
    (127) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition add_end_if
    (128) condition -> . IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if
    (122) write -> . OUTPUT save_op OPENPAREN expresion altwrite
    (121) read -> . INPUT save_op OPENPAREN ID save_comp CLOSEPAREN SEMICOLON
    (135) return -> . RETURN expresion generate_quad_ret SEMICOLON add_return_exists
    (75) voidcall -> . callfunc SEMICOLON
    (76) voidcall -> . ID DOT voidcall
    (78) while -> . WHILE add_stack_jump OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altwhile end_while
    (52) callfunc -> . ID check_exists_func add_false_stack OPENPAREN altcall check_params CLOSEPAREN end_false_stack generate_gosub

    CLOSECURLY      shift and go to state 246
    ID              shift and go to state 120
    IF              shift and go to state 121
    OUTPUT          shift and go to state 122
    INPUT           shift and go to state 123
    RETURN          shift and go to state 124
    WHILE           shift and go to state 126

    altcondition                   shift and go to state 269
    estatuto                       shift and go to state 245
    assign                         shift and go to state 113
    condition                      shift and go to state 114
    write                          shift and go to state 115
    read                           shift and go to state 116
    return                         shift and go to state 117
    voidcall                       shift and go to state 118
    while                          shift and go to state 119
    callfunc                       shift and go to state 125

state 269

    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition . add_end_if
    (132) add_end_if -> .

    CLOSECURLY      reduce using rule 132 (add_end_if -> .)
    VAR             reduce using rule 132 (add_end_if -> .)
    ID              reduce using rule 132 (add_end_if -> .)
    IF              reduce using rule 132 (add_end_if -> .)
    OUTPUT          reduce using rule 132 (add_end_if -> .)
    INPUT           reduce using rule 132 (add_end_if -> .)
    RETURN          reduce using rule 132 (add_end_if -> .)
    WHILE           reduce using rule 132 (add_end_if -> .)

    add_end_if                     shift and go to state 270

state 270

    (128) condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .

    CLOSECURLY      reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    VAR             reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    ID              reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    IF              reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    OUTPUT          reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    INPUT           reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    RETURN          reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)
    WHILE           reduce using rule 128 (condition -> IF OPENPAREN expresion CLOSEPAREN add_gotof OPENCURLY altcondition ELSE generate_goto OPENCURLY altcondition add_end_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 54 resolved using rule (exp -> termino)
WARNING: rejected rule (empty -> <empty>) in state 54
WARNING: reduce/reduce conflict in state 55 resolved using rule (termino -> factor)
WARNING: rejected rule (empty -> <empty>) in state 55
